;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.5
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(cl:in-package :xcb)



(cl:defconstant #.(custom-lispify "None" 'constant) 0)

(cl:export '#.(custom-lispify "None" 'constant))

(cffi:defctype #.(custom-lispify "XID" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "XID" 'typename))

(cffi:defctype #.(custom-lispify "Window" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "Window" 'typename))

(cl:defconstant #.(custom-lispify "XlibSpecificationRelease" 'constant) 6)

(cl:export '#.(custom-lispify "XlibSpecificationRelease" 'constant))

(cffi:defcfun ("_Xmblen" #.(custom-lispify "_Xmblen" 'function)) :int
  (str string-or-ptr)
  (len :int))

(cl:export '#.(custom-lispify "_Xmblen" 'function))

(cl:defconstant #.(custom-lispify "X_HAVE_UTF8_STRING" 'constant) 1)

(cl:export '#.(custom-lispify "X_HAVE_UTF8_STRING" 'constant))

(cffi:defctype #.(custom-lispify "XPointer" 'typename) string-or-ptr)

(cl:export '#.(custom-lispify "XPointer" 'typename))

(cl:defconstant #.(custom-lispify "True" 'constant) 1)

(cl:export '#.(custom-lispify "True" 'constant))

(cl:defconstant #.(custom-lispify "False" 'constant) 0)

(cl:export '#.(custom-lispify "False" 'constant))

(cl:defconstant #.(custom-lispify "QueuedAlready" 'constant) 0)

(cl:export '#.(custom-lispify "QueuedAlready" 'constant))

(cl:defconstant #.(custom-lispify "QueuedAfterReading" 'constant) 1)

(cl:export '#.(custom-lispify "QueuedAfterReading" 'constant))

(cl:defconstant #.(custom-lispify "QueuedAfterFlush" 'constant) 2)

(cl:export '#.(custom-lispify "QueuedAfterFlush" 'constant))

(cffi:defcstruct #.(custom-lispify "XExtData" 'structname-decl)
	(#.(custom-lispify "number" 'slotname) :int)
	(#.(custom-lispify "next" 'slotname) :pointer)
	(#.(custom-lispify "free_private" 'slotname) :pointer)
	(#.(custom-lispify "private_data" 'slotname) string-or-ptr))

(cl:export '#.(custom-lispify "XExtData" 'classname))

(cl:export '#.(custom-lispify "number" 'slotname))

(cl:export '#.(custom-lispify "next" 'slotname))

(cl:export '#.(custom-lispify "free_private" 'slotname))

(cl:export '#.(custom-lispify "private_data" 'slotname))

(cffi:defcstruct #.(custom-lispify "XExtCodes" 'structname-decl)
	(#.(custom-lispify "extension" 'slotname) :int)
	(#.(custom-lispify "major_opcode" 'slotname) :int)
	(#.(custom-lispify "first_event" 'slotname) :int)
	(#.(custom-lispify "first_error" 'slotname) :int))

(cl:export '#.(custom-lispify "XExtCodes" 'classname))

(cl:export '#.(custom-lispify "extension" 'slotname))

(cl:export '#.(custom-lispify "major_opcode" 'slotname))

(cl:export '#.(custom-lispify "first_event" 'slotname))

(cl:export '#.(custom-lispify "first_error" 'slotname))

(cffi:defcstruct #.(custom-lispify "XPixmapFormatValues" 'structname-decl)
	(#.(custom-lispify "depth" 'slotname) :int)
	(#.(custom-lispify "bits_per_pixel" 'slotname) :int)
	(#.(custom-lispify "scanline_pad" 'slotname) :int))

(cl:export '#.(custom-lispify "XPixmapFormatValues" 'classname))

(cl:export '#.(custom-lispify "depth" 'slotname))

(cl:export '#.(custom-lispify "bits_per_pixel" 'slotname))

(cl:export '#.(custom-lispify "scanline_pad" 'slotname))

(cffi:defcstruct #.(custom-lispify "XGCValues" 'structname-decl)
	(#.(custom-lispify "function" 'slotname) :int)
	(#.(custom-lispify "plane_mask" 'slotname) :unsigned-long)
	(#.(custom-lispify "foreground" 'slotname) :unsigned-long)
	(#.(custom-lispify "background" 'slotname) :unsigned-long)
	(#.(custom-lispify "line_width" 'slotname) :int)
	(#.(custom-lispify "line_style" 'slotname) :int)
	(#.(custom-lispify "cap_style" 'slotname) :int)
	(#.(custom-lispify "join_style" 'slotname) :int)
	(#.(custom-lispify "fill_style" 'slotname) :int)
	(#.(custom-lispify "fill_rule" 'slotname) :int)
	(#.(custom-lispify "arc_mode" 'slotname) :int)
	(#.(custom-lispify "tile" 'slotname) :pointer)
	(#.(custom-lispify "stipple" 'slotname) :pointer)
	(#.(custom-lispify "ts_x_origin" 'slotname) :int)
	(#.(custom-lispify "ts_y_origin" 'slotname) :int)
	(#.(custom-lispify "font" 'slotname) :pointer)
	(#.(custom-lispify "subwindow_mode" 'slotname) :int)
	(#.(custom-lispify "graphics_exposures" 'slotname) :int)
	(#.(custom-lispify "clip_x_origin" 'slotname) :int)
	(#.(custom-lispify "clip_y_origin" 'slotname) :int)
	(#.(custom-lispify "clip_mask" 'slotname) :pointer)
	(#.(custom-lispify "dash_offset" 'slotname) :int)
	(#.(custom-lispify "dashes" 'slotname) :char))

(cl:export '#.(custom-lispify "XGCValues" 'classname))

(cl:export '#.(custom-lispify "function" 'slotname))

(cl:export '#.(custom-lispify "plane_mask" 'slotname))

(cl:export '#.(custom-lispify "foreground" 'slotname))

(cl:export '#.(custom-lispify "background" 'slotname))

(cl:export '#.(custom-lispify "line_width" 'slotname))

(cl:export '#.(custom-lispify "line_style" 'slotname))

(cl:export '#.(custom-lispify "cap_style" 'slotname))

(cl:export '#.(custom-lispify "join_style" 'slotname))

(cl:export '#.(custom-lispify "fill_style" 'slotname))

(cl:export '#.(custom-lispify "fill_rule" 'slotname))

(cl:export '#.(custom-lispify "arc_mode" 'slotname))

(cl:export '#.(custom-lispify "tile" 'slotname))

(cl:export '#.(custom-lispify "stipple" 'slotname))

(cl:export '#.(custom-lispify "ts_x_origin" 'slotname))

(cl:export '#.(custom-lispify "ts_y_origin" 'slotname))

(cl:export '#.(custom-lispify "font" 'slotname))

(cl:export '#.(custom-lispify "subwindow_mode" 'slotname))

(cl:export '#.(custom-lispify "graphics_exposures" 'slotname))

(cl:export '#.(custom-lispify "clip_x_origin" 'slotname))

(cl:export '#.(custom-lispify "clip_y_origin" 'slotname))

(cl:export '#.(custom-lispify "clip_mask" 'slotname))

(cl:export '#.(custom-lispify "dash_offset" 'slotname))

(cl:export '#.(custom-lispify "dashes" 'slotname))

(cffi:defctype #.(custom-lispify "GC" 'typename) :pointer)

(cl:export '#.(custom-lispify "GC" 'typename))

(cffi:defcstruct #.(custom-lispify "Visual" 'structname-decl)
	(#.(custom-lispify "ext_data" 'slotname) :pointer)
	(#.(custom-lispify "visualid" 'slotname) :pointer)
	(#.(custom-lispify "class" 'slotname) :int)
	(#.(custom-lispify "red_mask" 'slotname) :unsigned-long)
	(#.(custom-lispify "green_mask" 'slotname) :unsigned-long)
	(#.(custom-lispify "blue_mask" 'slotname) :unsigned-long)
	(#.(custom-lispify "bits_per_rgb" 'slotname) :int)
	(#.(custom-lispify "map_entries" 'slotname) :int))

(cl:export '#.(custom-lispify "Visual" 'classname))

(cl:export '#.(custom-lispify "ext_data" 'slotname))

(cl:export '#.(custom-lispify "visualid" 'slotname))

(cl:export '#.(custom-lispify "class" 'slotname))

(cl:export '#.(custom-lispify "red_mask" 'slotname))

(cl:export '#.(custom-lispify "green_mask" 'slotname))

(cl:export '#.(custom-lispify "blue_mask" 'slotname))

(cl:export '#.(custom-lispify "bits_per_rgb" 'slotname))

(cl:export '#.(custom-lispify "map_entries" 'slotname))

(cffi:defcstruct #.(custom-lispify "Depth" 'structname-decl)
	(#.(custom-lispify "depth" 'slotname) :int)
	(#.(custom-lispify "nvisuals" 'slotname) :int)
	(#.(custom-lispify "visuals" 'slotname) :pointer))

(cl:export '#.(custom-lispify "Depth" 'classname))

(cl:export '#.(custom-lispify "depth" 'slotname))

(cl:export '#.(custom-lispify "nvisuals" 'slotname))

(cl:export '#.(custom-lispify "visuals" 'slotname))

(cffi:defcstruct #.(custom-lispify "Screen" 'structname-decl)
	(#.(custom-lispify "ext_data" 'slotname) :pointer)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "root" 'slotname) :unsigned-long)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "mwidth" 'slotname) :int)
	(#.(custom-lispify "mheight" 'slotname) :int)
	(#.(custom-lispify "ndepths" 'slotname) :int)
	(#.(custom-lispify "depths" 'slotname) :pointer)
	(#.(custom-lispify "root_depth" 'slotname) :int)
	(#.(custom-lispify "root_visual" 'slotname) :pointer)
	(#.(custom-lispify "default_gc" 'slotname) :pointer)
	(#.(custom-lispify "cmap" 'slotname) :pointer)
	(#.(custom-lispify "white_pixel" 'slotname) :unsigned-long)
	(#.(custom-lispify "black_pixel" 'slotname) :unsigned-long)
	(#.(custom-lispify "max_maps" 'slotname) :int)
	(#.(custom-lispify "min_maps" 'slotname) :int)
	(#.(custom-lispify "backing_store" 'slotname) :int)
	(#.(custom-lispify "save_unders" 'slotname) :int)
	(#.(custom-lispify "root_input_mask" 'slotname) :long))

(cl:export '#.(custom-lispify "Screen" 'classname))

(cl:export '#.(custom-lispify "ext_data" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "root" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "mwidth" 'slotname))

(cl:export '#.(custom-lispify "mheight" 'slotname))

(cl:export '#.(custom-lispify "ndepths" 'slotname))

(cl:export '#.(custom-lispify "depths" 'slotname))

(cl:export '#.(custom-lispify "root_depth" 'slotname))

(cl:export '#.(custom-lispify "root_visual" 'slotname))

(cl:export '#.(custom-lispify "default_gc" 'slotname))

(cl:export '#.(custom-lispify "cmap" 'slotname))

(cl:export '#.(custom-lispify "white_pixel" 'slotname))

(cl:export '#.(custom-lispify "black_pixel" 'slotname))

(cl:export '#.(custom-lispify "max_maps" 'slotname))

(cl:export '#.(custom-lispify "min_maps" 'slotname))

(cl:export '#.(custom-lispify "backing_store" 'slotname))

(cl:export '#.(custom-lispify "save_unders" 'slotname))

(cl:export '#.(custom-lispify "root_input_mask" 'slotname))

(cffi:defcstruct #.(custom-lispify "ScreenFormat" 'structname-decl)
	(#.(custom-lispify "ext_data" 'slotname) :pointer)
	(#.(custom-lispify "depth" 'slotname) :int)
	(#.(custom-lispify "bits_per_pixel" 'slotname) :int)
	(#.(custom-lispify "scanline_pad" 'slotname) :int))

(cl:export '#.(custom-lispify "ScreenFormat" 'classname))

(cl:export '#.(custom-lispify "ext_data" 'slotname))

(cl:export '#.(custom-lispify "depth" 'slotname))

(cl:export '#.(custom-lispify "bits_per_pixel" 'slotname))

(cl:export '#.(custom-lispify "scanline_pad" 'slotname))

(cffi:defcstruct #.(custom-lispify "XSetWindowAttributes" 'structname-decl)
	(#.(custom-lispify "background_pixmap" 'slotname) :pointer)
	(#.(custom-lispify "background_pixel" 'slotname) :unsigned-long)
	(#.(custom-lispify "border_pixmap" 'slotname) :pointer)
	(#.(custom-lispify "border_pixel" 'slotname) :unsigned-long)
	(#.(custom-lispify "bit_gravity" 'slotname) :int)
	(#.(custom-lispify "win_gravity" 'slotname) :int)
	(#.(custom-lispify "backing_store" 'slotname) :int)
	(#.(custom-lispify "backing_planes" 'slotname) :unsigned-long)
	(#.(custom-lispify "backing_pixel" 'slotname) :unsigned-long)
	(#.(custom-lispify "save_under" 'slotname) :int)
	(#.(custom-lispify "event_mask" 'slotname) :long)
	(#.(custom-lispify "do_not_propagate_mask" 'slotname) :long)
	(#.(custom-lispify "override_redirect" 'slotname) :int)
	(#.(custom-lispify "colormap" 'slotname) :pointer)
	(#.(custom-lispify "cursor" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XSetWindowAttributes" 'classname))

(cl:export '#.(custom-lispify "background_pixmap" 'slotname))

(cl:export '#.(custom-lispify "background_pixel" 'slotname))

(cl:export '#.(custom-lispify "border_pixmap" 'slotname))

(cl:export '#.(custom-lispify "border_pixel" 'slotname))

(cl:export '#.(custom-lispify "bit_gravity" 'slotname))

(cl:export '#.(custom-lispify "win_gravity" 'slotname))

(cl:export '#.(custom-lispify "backing_store" 'slotname))

(cl:export '#.(custom-lispify "backing_planes" 'slotname))

(cl:export '#.(custom-lispify "backing_pixel" 'slotname))

(cl:export '#.(custom-lispify "save_under" 'slotname))

(cl:export '#.(custom-lispify "event_mask" 'slotname))

(cl:export '#.(custom-lispify "do_not_propagate_mask" 'slotname))

(cl:export '#.(custom-lispify "override_redirect" 'slotname))

(cl:export '#.(custom-lispify "colormap" 'slotname))

(cl:export '#.(custom-lispify "cursor" 'slotname))

(cffi:defcstruct #.(custom-lispify "XWindowAttributes" 'structname-decl)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "border_width" 'slotname) :int)
	(#.(custom-lispify "depth" 'slotname) :int)
	(#.(custom-lispify "visual" 'slotname) :pointer)
	(#.(custom-lispify "root" 'slotname) :unsigned-long)
	(#.(custom-lispify "class" 'slotname) :int)
	(#.(custom-lispify "bit_gravity" 'slotname) :int)
	(#.(custom-lispify "win_gravity" 'slotname) :int)
	(#.(custom-lispify "backing_store" 'slotname) :int)
	(#.(custom-lispify "backing_planes" 'slotname) :unsigned-long)
	(#.(custom-lispify "backing_pixel" 'slotname) :unsigned-long)
	(#.(custom-lispify "save_under" 'slotname) :int)
	(#.(custom-lispify "colormap" 'slotname) :pointer)
	(#.(custom-lispify "map_installed" 'slotname) :int)
	(#.(custom-lispify "map_state" 'slotname) :int)
	(#.(custom-lispify "all_event_masks" 'slotname) :long)
	(#.(custom-lispify "your_event_mask" 'slotname) :long)
	(#.(custom-lispify "do_not_propagate_mask" 'slotname) :long)
	(#.(custom-lispify "override_redirect" 'slotname) :int)
	(#.(custom-lispify "screen" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XWindowAttributes" 'classname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "border_width" 'slotname))

(cl:export '#.(custom-lispify "depth" 'slotname))

(cl:export '#.(custom-lispify "visual" 'slotname))

(cl:export '#.(custom-lispify "root" 'slotname))

(cl:export '#.(custom-lispify "class" 'slotname))

(cl:export '#.(custom-lispify "bit_gravity" 'slotname))

(cl:export '#.(custom-lispify "win_gravity" 'slotname))

(cl:export '#.(custom-lispify "backing_store" 'slotname))

(cl:export '#.(custom-lispify "backing_planes" 'slotname))

(cl:export '#.(custom-lispify "backing_pixel" 'slotname))

(cl:export '#.(custom-lispify "save_under" 'slotname))

(cl:export '#.(custom-lispify "colormap" 'slotname))

(cl:export '#.(custom-lispify "map_installed" 'slotname))

(cl:export '#.(custom-lispify "map_state" 'slotname))

(cl:export '#.(custom-lispify "all_event_masks" 'slotname))

(cl:export '#.(custom-lispify "your_event_mask" 'slotname))

(cl:export '#.(custom-lispify "do_not_propagate_mask" 'slotname))

(cl:export '#.(custom-lispify "override_redirect" 'slotname))

(cl:export '#.(custom-lispify "screen" 'slotname))

(cffi:defcstruct #.(custom-lispify "XHostAddress" 'structname-decl)
	(#.(custom-lispify "family" 'slotname) :int)
	(#.(custom-lispify "length" 'slotname) :int)
	(#.(custom-lispify "address" 'slotname) string-or-ptr))

(cl:export '#.(custom-lispify "XHostAddress" 'classname))

(cl:export '#.(custom-lispify "family" 'slotname))

(cl:export '#.(custom-lispify "length" 'slotname))

(cl:export '#.(custom-lispify "address" 'slotname))

(cffi:defcstruct #.(custom-lispify "XServerInterpretedAddress" 'structname-decl)
	(#.(custom-lispify "typelength" 'slotname) :int)
	(#.(custom-lispify "valuelength" 'slotname) :int)
	(#.(custom-lispify "type" 'slotname) string-or-ptr)
	(#.(custom-lispify "value" 'slotname) string-or-ptr))

(cl:export '#.(custom-lispify "XServerInterpretedAddress" 'classname))

(cl:export '#.(custom-lispify "typelength" 'slotname))

(cl:export '#.(custom-lispify "valuelength" 'slotname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "value" 'slotname))

(cffi:defcstruct #.(custom-lispify "XImage" 'structname-decl)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "xoffset" 'slotname) :int)
	(#.(custom-lispify "format" 'slotname) :int)
	(#.(custom-lispify "data" 'slotname) string-or-ptr)
	(#.(custom-lispify "byte_order" 'slotname) :int)
	(#.(custom-lispify "bitmap_unit" 'slotname) :int)
	(#.(custom-lispify "bitmap_bit_order" 'slotname) :int)
	(#.(custom-lispify "bitmap_pad" 'slotname) :int)
	(#.(custom-lispify "depth" 'slotname) :int)
	(#.(custom-lispify "bytes_per_line" 'slotname) :int)
	(#.(custom-lispify "bits_per_pixel" 'slotname) :int)
	(#.(custom-lispify "red_mask" 'slotname) :unsigned-long)
	(#.(custom-lispify "green_mask" 'slotname) :unsigned-long)
	(#.(custom-lispify "blue_mask" 'slotname) :unsigned-long)
	(#.(custom-lispify "obdata" 'slotname) string-or-ptr)
	(#.(custom-lispify "f" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XImage" 'classname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "xoffset" 'slotname))

(cl:export '#.(custom-lispify "format" 'slotname))

(cl:export '#.(custom-lispify "data" 'slotname))

(cl:export '#.(custom-lispify "byte_order" 'slotname))

(cl:export '#.(custom-lispify "bitmap_unit" 'slotname))

(cl:export '#.(custom-lispify "bitmap_bit_order" 'slotname))

(cl:export '#.(custom-lispify "bitmap_pad" 'slotname))

(cl:export '#.(custom-lispify "depth" 'slotname))

(cl:export '#.(custom-lispify "bytes_per_line" 'slotname))

(cl:export '#.(custom-lispify "bits_per_pixel" 'slotname))

(cl:export '#.(custom-lispify "red_mask" 'slotname))

(cl:export '#.(custom-lispify "green_mask" 'slotname))

(cl:export '#.(custom-lispify "blue_mask" 'slotname))

(cl:export '#.(custom-lispify "obdata" 'slotname))

(cl:export '#.(custom-lispify "f" 'slotname))

(cffi:defcstruct #.(custom-lispify "XImage_f" 'structname-decl)
	(#.(custom-lispify "create_image" 'slotname) :pointer)
	(#.(custom-lispify "destroy_image" 'slotname) :pointer)
	(#.(custom-lispify "get_pixel" 'slotname) :pointer)
	(#.(custom-lispify "put_pixel" 'slotname) :pointer)
	(#.(custom-lispify "sub_image" 'slotname) :pointer)
	(#.(custom-lispify "add_pixel" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XImage_f" 'classname))

(cl:export '#.(custom-lispify "create_image" 'slotname))

(cl:export '#.(custom-lispify "destroy_image" 'slotname))

(cl:export '#.(custom-lispify "get_pixel" 'slotname))

(cl:export '#.(custom-lispify "put_pixel" 'slotname))

(cl:export '#.(custom-lispify "sub_image" 'slotname))

(cl:export '#.(custom-lispify "add_pixel" 'slotname))

(cffi:defcstruct #.(custom-lispify "XWindowChanges" 'structname-decl)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "border_width" 'slotname) :int)
	(#.(custom-lispify "sibling" 'slotname) :unsigned-long)
	(#.(custom-lispify "stack_mode" 'slotname) :int))

(cl:export '#.(custom-lispify "XWindowChanges" 'classname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "border_width" 'slotname))

(cl:export '#.(custom-lispify "sibling" 'slotname))

(cl:export '#.(custom-lispify "stack_mode" 'slotname))

(cffi:defcstruct #.(custom-lispify "XColor" 'structname-decl)
	(#.(custom-lispify "pixel" 'slotname) :unsigned-long)
	(#.(custom-lispify "red" 'slotname) :unsigned-short)
	(#.(custom-lispify "green" 'slotname) :unsigned-short)
	(#.(custom-lispify "blue" 'slotname) :unsigned-short)
	(#.(custom-lispify "flags" 'slotname) :char)
	(#.(custom-lispify "pad" 'slotname) :char))

(cl:export '#.(custom-lispify "XColor" 'classname))

(cl:export '#.(custom-lispify "pixel" 'slotname))

(cl:export '#.(custom-lispify "red" 'slotname))

(cl:export '#.(custom-lispify "green" 'slotname))

(cl:export '#.(custom-lispify "blue" 'slotname))

(cl:export '#.(custom-lispify "flags" 'slotname))

(cl:export '#.(custom-lispify "pad" 'slotname))

(cffi:defcstruct #.(custom-lispify "XSegment" 'structname-decl)
	(#.(custom-lispify "x1" 'slotname) :short)
	(#.(custom-lispify "y1" 'slotname) :short)
	(#.(custom-lispify "x2" 'slotname) :short)
	(#.(custom-lispify "y2" 'slotname) :short))

(cl:export '#.(custom-lispify "XSegment" 'classname))

(cl:export '#.(custom-lispify "x1" 'slotname))

(cl:export '#.(custom-lispify "y1" 'slotname))

(cl:export '#.(custom-lispify "x2" 'slotname))

(cl:export '#.(custom-lispify "y2" 'slotname))

(cffi:defcstruct #.(custom-lispify "XPoint" 'structname-decl)
	(#.(custom-lispify "x" 'slotname) :short)
	(#.(custom-lispify "y" 'slotname) :short))

(cl:export '#.(custom-lispify "XPoint" 'classname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cffi:defcstruct #.(custom-lispify "XRectangle" 'structname-decl)
	(#.(custom-lispify "x" 'slotname) :short)
	(#.(custom-lispify "y" 'slotname) :short)
	(#.(custom-lispify "width" 'slotname) :unsigned-short)
	(#.(custom-lispify "height" 'slotname) :unsigned-short))

(cl:export '#.(custom-lispify "XRectangle" 'classname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cffi:defcstruct #.(custom-lispify "XArc" 'structname-decl)
	(#.(custom-lispify "x" 'slotname) :short)
	(#.(custom-lispify "y" 'slotname) :short)
	(#.(custom-lispify "width" 'slotname) :unsigned-short)
	(#.(custom-lispify "height" 'slotname) :unsigned-short)
	(#.(custom-lispify "angle1" 'slotname) :short)
	(#.(custom-lispify "angle2" 'slotname) :short))

(cl:export '#.(custom-lispify "XArc" 'classname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "angle1" 'slotname))

(cl:export '#.(custom-lispify "angle2" 'slotname))

(cffi:defcstruct #.(custom-lispify "XKeyboardControl" 'structname-decl)
	(#.(custom-lispify "key_click_percent" 'slotname) :int)
	(#.(custom-lispify "bell_percent" 'slotname) :int)
	(#.(custom-lispify "bell_pitch" 'slotname) :int)
	(#.(custom-lispify "bell_duration" 'slotname) :int)
	(#.(custom-lispify "led" 'slotname) :int)
	(#.(custom-lispify "led_mode" 'slotname) :int)
	(#.(custom-lispify "key" 'slotname) :int)
	(#.(custom-lispify "auto_repeat_mode" 'slotname) :int))

(cl:export '#.(custom-lispify "XKeyboardControl" 'classname))

(cl:export '#.(custom-lispify "key_click_percent" 'slotname))

(cl:export '#.(custom-lispify "bell_percent" 'slotname))

(cl:export '#.(custom-lispify "bell_pitch" 'slotname))

(cl:export '#.(custom-lispify "bell_duration" 'slotname))

(cl:export '#.(custom-lispify "led" 'slotname))

(cl:export '#.(custom-lispify "led_mode" 'slotname))

(cl:export '#.(custom-lispify "key" 'slotname))

(cl:export '#.(custom-lispify "auto_repeat_mode" 'slotname))

(cffi:defcstruct #.(custom-lispify "XKeyboardState" 'structname-decl)
	(#.(custom-lispify "key_click_percent" 'slotname) :int)
	(#.(custom-lispify "bell_percent" 'slotname) :int)
	(#.(custom-lispify "bell_pitch" 'slotname) :unsigned-int)
	(#.(custom-lispify "bell_duration" 'slotname) :unsigned-int)
	(#.(custom-lispify "led_mask" 'slotname) :unsigned-long)
	(#.(custom-lispify "global_auto_repeat" 'slotname) :int)
	(#.(custom-lispify "auto_repeats" 'slotname) :char :count 32))

(cl:export '#.(custom-lispify "XKeyboardState" 'classname))

(cl:export '#.(custom-lispify "key_click_percent" 'slotname))

(cl:export '#.(custom-lispify "bell_percent" 'slotname))

(cl:export '#.(custom-lispify "bell_pitch" 'slotname))

(cl:export '#.(custom-lispify "bell_duration" 'slotname))

(cl:export '#.(custom-lispify "led_mask" 'slotname))

(cl:export '#.(custom-lispify "global_auto_repeat" 'slotname))

(cl:export '#.(custom-lispify "auto_repeats" 'slotname))

(cffi:defcstruct #.(custom-lispify "XTimeCoord" 'structname-decl)
	(#.(custom-lispify "time" 'slotname) :pointer)
	(#.(custom-lispify "x" 'slotname) :short)
	(#.(custom-lispify "y" 'slotname) :short))

(cl:export '#.(custom-lispify "XTimeCoord" 'classname))

(cl:export '#.(custom-lispify "time" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cffi:defcstruct #.(custom-lispify "XModifierKeymap" 'structname-decl)
	(#.(custom-lispify "max_keypermod" 'slotname) :int)
	(#.(custom-lispify "modifiermap" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XModifierKeymap" 'classname))

(cl:export '#.(custom-lispify "max_keypermod" 'slotname))

(cl:export '#.(custom-lispify "modifiermap" 'slotname))

(cffi:defctype #.(custom-lispify "_XPrivDisplay" 'typename) :pointer)

(cl:export '#.(custom-lispify "_XPrivDisplay" 'typename))

(cffi:defcstruct #.(custom-lispify "XKeyEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "root" 'slotname) :unsigned-long)
	(#.(custom-lispify "subwindow" 'slotname) :unsigned-long)
	(#.(custom-lispify "time" 'slotname) :pointer)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "x_root" 'slotname) :int)
	(#.(custom-lispify "y_root" 'slotname) :int)
	(#.(custom-lispify "state" 'slotname) :unsigned-int)
	(#.(custom-lispify "keycode" 'slotname) :unsigned-int)
	(#.(custom-lispify "same_screen" 'slotname) :int))

(cl:export '#.(custom-lispify "XKeyEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "root" 'slotname))

(cl:export '#.(custom-lispify "subwindow" 'slotname))

(cl:export '#.(custom-lispify "time" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "x_root" 'slotname))

(cl:export '#.(custom-lispify "y_root" 'slotname))

(cl:export '#.(custom-lispify "state" 'slotname))

(cl:export '#.(custom-lispify "keycode" 'slotname))

(cl:export '#.(custom-lispify "same_screen" 'slotname))

(cffi:defctype #.(custom-lispify "XKeyPressedEvent" 'typename) #.(custom-lispify "XKeyEvent" 'structname))

(cl:export '#.(custom-lispify "XKeyPressedEvent" 'typename))

(cffi:defctype #.(custom-lispify "XKeyReleasedEvent" 'typename) #.(custom-lispify "XKeyEvent" 'structname))

(cl:export '#.(custom-lispify "XKeyReleasedEvent" 'typename))

(cffi:defcstruct #.(custom-lispify "XButtonEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "root" 'slotname) :unsigned-long)
	(#.(custom-lispify "subwindow" 'slotname) :unsigned-long)
	(#.(custom-lispify "time" 'slotname) :pointer)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "x_root" 'slotname) :int)
	(#.(custom-lispify "y_root" 'slotname) :int)
	(#.(custom-lispify "state" 'slotname) :unsigned-int)
	(#.(custom-lispify "button" 'slotname) :unsigned-int)
	(#.(custom-lispify "same_screen" 'slotname) :int))

(cl:export '#.(custom-lispify "XButtonEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "root" 'slotname))

(cl:export '#.(custom-lispify "subwindow" 'slotname))

(cl:export '#.(custom-lispify "time" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "x_root" 'slotname))

(cl:export '#.(custom-lispify "y_root" 'slotname))

(cl:export '#.(custom-lispify "state" 'slotname))

(cl:export '#.(custom-lispify "button" 'slotname))

(cl:export '#.(custom-lispify "same_screen" 'slotname))

(cffi:defctype #.(custom-lispify "XButtonPressedEvent" 'typename) #.(custom-lispify "XButtonEvent" 'structname))

(cl:export '#.(custom-lispify "XButtonPressedEvent" 'typename))

(cffi:defctype #.(custom-lispify "XButtonReleasedEvent" 'typename) #.(custom-lispify "XButtonEvent" 'structname))

(cl:export '#.(custom-lispify "XButtonReleasedEvent" 'typename))

(cffi:defcstruct #.(custom-lispify "XMotionEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "root" 'slotname) :unsigned-long)
	(#.(custom-lispify "subwindow" 'slotname) :unsigned-long)
	(#.(custom-lispify "time" 'slotname) :pointer)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "x_root" 'slotname) :int)
	(#.(custom-lispify "y_root" 'slotname) :int)
	(#.(custom-lispify "state" 'slotname) :unsigned-int)
	(#.(custom-lispify "is_hint" 'slotname) :char)
	(#.(custom-lispify "same_screen" 'slotname) :int))

(cl:export '#.(custom-lispify "XMotionEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "root" 'slotname))

(cl:export '#.(custom-lispify "subwindow" 'slotname))

(cl:export '#.(custom-lispify "time" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "x_root" 'slotname))

(cl:export '#.(custom-lispify "y_root" 'slotname))

(cl:export '#.(custom-lispify "state" 'slotname))

(cl:export '#.(custom-lispify "is_hint" 'slotname))

(cl:export '#.(custom-lispify "same_screen" 'slotname))

(cffi:defctype #.(custom-lispify "XPointerMovedEvent" 'typename) #.(custom-lispify "XMotionEvent" 'structname))

(cl:export '#.(custom-lispify "XPointerMovedEvent" 'typename))

(cffi:defcstruct #.(custom-lispify "XCrossingEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "root" 'slotname) :unsigned-long)
	(#.(custom-lispify "subwindow" 'slotname) :unsigned-long)
	(#.(custom-lispify "time" 'slotname) :pointer)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "x_root" 'slotname) :int)
	(#.(custom-lispify "y_root" 'slotname) :int)
	(#.(custom-lispify "mode" 'slotname) :int)
	(#.(custom-lispify "detail" 'slotname) :int)
	(#.(custom-lispify "same_screen" 'slotname) :int)
	(#.(custom-lispify "focus" 'slotname) :int)
	(#.(custom-lispify "state" 'slotname) :unsigned-int))

(cl:export '#.(custom-lispify "XCrossingEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "root" 'slotname))

(cl:export '#.(custom-lispify "subwindow" 'slotname))

(cl:export '#.(custom-lispify "time" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "x_root" 'slotname))

(cl:export '#.(custom-lispify "y_root" 'slotname))

(cl:export '#.(custom-lispify "mode" 'slotname))

(cl:export '#.(custom-lispify "detail" 'slotname))

(cl:export '#.(custom-lispify "same_screen" 'slotname))

(cl:export '#.(custom-lispify "focus" 'slotname))

(cl:export '#.(custom-lispify "state" 'slotname))

(cffi:defctype #.(custom-lispify "XEnterWindowEvent" 'typename) #.(custom-lispify "XCrossingEvent" 'structname))

(cl:export '#.(custom-lispify "XEnterWindowEvent" 'typename))

(cffi:defctype #.(custom-lispify "XLeaveWindowEvent" 'typename) #.(custom-lispify "XCrossingEvent" 'structname))

(cl:export '#.(custom-lispify "XLeaveWindowEvent" 'typename))

(cffi:defcstruct #.(custom-lispify "XFocusChangeEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "mode" 'slotname) :int)
	(#.(custom-lispify "detail" 'slotname) :int))

(cl:export '#.(custom-lispify "XFocusChangeEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "mode" 'slotname))

(cl:export '#.(custom-lispify "detail" 'slotname))

(cffi:defctype #.(custom-lispify "XFocusInEvent" 'typename) #.(custom-lispify "XFocusChangeEvent" 'structname))

(cl:export '#.(custom-lispify "XFocusInEvent" 'typename))

(cffi:defctype #.(custom-lispify "XFocusOutEvent" 'typename) #.(custom-lispify "XFocusChangeEvent" 'structname))

(cl:export '#.(custom-lispify "XFocusOutEvent" 'typename))

(cffi:defcstruct #.(custom-lispify "XKeymapEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "key_vector" 'slotname) :char :count 32))

(cl:export '#.(custom-lispify "XKeymapEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "key_vector" 'slotname))

(cffi:defcstruct #.(custom-lispify "XExposeEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "count" 'slotname) :int))

(cl:export '#.(custom-lispify "XExposeEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "count" 'slotname))

(cffi:defcstruct #.(custom-lispify "XGraphicsExposeEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "drawable" 'slotname) :pointer)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "count" 'slotname) :int)
	(#.(custom-lispify "major_code" 'slotname) :int)
	(#.(custom-lispify "minor_code" 'slotname) :int))

(cl:export '#.(custom-lispify "XGraphicsExposeEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "drawable" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "count" 'slotname))

(cl:export '#.(custom-lispify "major_code" 'slotname))

(cl:export '#.(custom-lispify "minor_code" 'slotname))

(cffi:defcstruct #.(custom-lispify "XNoExposeEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "drawable" 'slotname) :pointer)
	(#.(custom-lispify "major_code" 'slotname) :int)
	(#.(custom-lispify "minor_code" 'slotname) :int))

(cl:export '#.(custom-lispify "XNoExposeEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "drawable" 'slotname))

(cl:export '#.(custom-lispify "major_code" 'slotname))

(cl:export '#.(custom-lispify "minor_code" 'slotname))

(cffi:defcstruct #.(custom-lispify "XVisibilityEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "state" 'slotname) :int))

(cl:export '#.(custom-lispify "XVisibilityEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "state" 'slotname))

(cffi:defcstruct #.(custom-lispify "XCreateWindowEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "parent" 'slotname) :unsigned-long)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "border_width" 'slotname) :int)
	(#.(custom-lispify "override_redirect" 'slotname) :int))

(cl:export '#.(custom-lispify "XCreateWindowEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "parent" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "border_width" 'slotname))

(cl:export '#.(custom-lispify "override_redirect" 'slotname))

(cffi:defcstruct #.(custom-lispify "XDestroyWindowEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "event" 'slotname) :unsigned-long)
	(#.(custom-lispify "window" 'slotname) :unsigned-long))

(cl:export '#.(custom-lispify "XDestroyWindowEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "event" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cffi:defcstruct #.(custom-lispify "XUnmapEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "event" 'slotname) :unsigned-long)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "from_configure" 'slotname) :int))

(cl:export '#.(custom-lispify "XUnmapEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "event" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "from_configure" 'slotname))

(cffi:defcstruct #.(custom-lispify "XMapEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "event" 'slotname) :unsigned-long)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "override_redirect" 'slotname) :int))

(cl:export '#.(custom-lispify "XMapEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "event" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "override_redirect" 'slotname))

(cffi:defcstruct #.(custom-lispify "XMapRequestEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "parent" 'slotname) :unsigned-long)
	(#.(custom-lispify "window" 'slotname) :unsigned-long))

(cl:export '#.(custom-lispify "XMapRequestEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "parent" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cffi:defcstruct #.(custom-lispify "XReparentEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "event" 'slotname) :unsigned-long)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "parent" 'slotname) :unsigned-long)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "override_redirect" 'slotname) :int))

(cl:export '#.(custom-lispify "XReparentEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "event" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "parent" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "override_redirect" 'slotname))

(cffi:defcstruct #.(custom-lispify "XConfigureEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "event" 'slotname) :unsigned-long)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "border_width" 'slotname) :int)
	(#.(custom-lispify "above" 'slotname) :unsigned-long)
	(#.(custom-lispify "override_redirect" 'slotname) :int))

(cl:export '#.(custom-lispify "XConfigureEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "event" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "border_width" 'slotname))

(cl:export '#.(custom-lispify "above" 'slotname))

(cl:export '#.(custom-lispify "override_redirect" 'slotname))

(cffi:defcstruct #.(custom-lispify "XGravityEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "event" 'slotname) :unsigned-long)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int))

(cl:export '#.(custom-lispify "XGravityEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "event" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cffi:defcstruct #.(custom-lispify "XResizeRequestEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int))

(cl:export '#.(custom-lispify "XResizeRequestEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cffi:defcstruct #.(custom-lispify "XConfigureRequestEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "parent" 'slotname) :unsigned-long)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "border_width" 'slotname) :int)
	(#.(custom-lispify "above" 'slotname) :unsigned-long)
	(#.(custom-lispify "detail" 'slotname) :int)
	(#.(custom-lispify "value_mask" 'slotname) :unsigned-long))

(cl:export '#.(custom-lispify "XConfigureRequestEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "parent" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "border_width" 'slotname))

(cl:export '#.(custom-lispify "above" 'slotname))

(cl:export '#.(custom-lispify "detail" 'slotname))

(cl:export '#.(custom-lispify "value_mask" 'slotname))

(cffi:defcstruct #.(custom-lispify "XCirculateEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "event" 'slotname) :unsigned-long)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "place" 'slotname) :int))

(cl:export '#.(custom-lispify "XCirculateEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "event" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "place" 'slotname))

(cffi:defcstruct #.(custom-lispify "XCirculateRequestEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "parent" 'slotname) :unsigned-long)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "place" 'slotname) :int))

(cl:export '#.(custom-lispify "XCirculateRequestEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "parent" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "place" 'slotname))

(cffi:defcstruct #.(custom-lispify "XPropertyEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "atom" 'slotname) :pointer)
	(#.(custom-lispify "time" 'slotname) :pointer)
	(#.(custom-lispify "state" 'slotname) :int))

(cl:export '#.(custom-lispify "XPropertyEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "atom" 'slotname))

(cl:export '#.(custom-lispify "time" 'slotname))

(cl:export '#.(custom-lispify "state" 'slotname))

(cffi:defcstruct #.(custom-lispify "XSelectionClearEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "selection" 'slotname) :pointer)
	(#.(custom-lispify "time" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XSelectionClearEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "selection" 'slotname))

(cl:export '#.(custom-lispify "time" 'slotname))

(cffi:defcstruct #.(custom-lispify "XSelectionRequestEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "owner" 'slotname) :unsigned-long)
	(#.(custom-lispify "requestor" 'slotname) :unsigned-long)
	(#.(custom-lispify "selection" 'slotname) :pointer)
	(#.(custom-lispify "target" 'slotname) :pointer)
	(#.(custom-lispify "property" 'slotname) :pointer)
	(#.(custom-lispify "time" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XSelectionRequestEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "owner" 'slotname))

(cl:export '#.(custom-lispify "requestor" 'slotname))

(cl:export '#.(custom-lispify "selection" 'slotname))

(cl:export '#.(custom-lispify "target" 'slotname))

(cl:export '#.(custom-lispify "property" 'slotname))

(cl:export '#.(custom-lispify "time" 'slotname))

(cffi:defcstruct #.(custom-lispify "XSelectionEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "requestor" 'slotname) :unsigned-long)
	(#.(custom-lispify "selection" 'slotname) :pointer)
	(#.(custom-lispify "target" 'slotname) :pointer)
	(#.(custom-lispify "property" 'slotname) :pointer)
	(#.(custom-lispify "time" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XSelectionEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "requestor" 'slotname))

(cl:export '#.(custom-lispify "selection" 'slotname))

(cl:export '#.(custom-lispify "target" 'slotname))

(cl:export '#.(custom-lispify "property" 'slotname))

(cl:export '#.(custom-lispify "time" 'slotname))

(cffi:defcstruct #.(custom-lispify "XColormapEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "colormap" 'slotname) :pointer)
	(#.(custom-lispify "new" 'slotname) :int)
	(#.(custom-lispify "state" 'slotname) :int))

(cl:export '#.(custom-lispify "XColormapEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "colormap" 'slotname))

(cl:export '#.(custom-lispify "new" 'slotname))

(cl:export '#.(custom-lispify "state" 'slotname))

(cffi:defcstruct #.(custom-lispify "XClientMessageEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "message_type" 'slotname) :pointer)
	(#.(custom-lispify "format" 'slotname) :int)
	(#.(custom-lispify "data" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XClientMessageEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "message_type" 'slotname))

(cl:export '#.(custom-lispify "format" 'slotname))

(cl:export '#.(custom-lispify "data" 'slotname))

(cffi:defcunion #.(custom-lispify "XClientMessageEvent_data" 'unionname-decl)
	(#.(custom-lispify "b" 'slotname) :char :count 20)
	(#.(custom-lispify "s" 'slotname) :short :count 10)
	(#.(custom-lispify "l" 'slotname) :long :count 5))

(cl:export '#.(custom-lispify "XClientMessageEvent_data" 'classname))

(cl:export '#.(custom-lispify "b" 'slotname))

(cl:export '#.(custom-lispify "s" 'slotname))

(cl:export '#.(custom-lispify "l" 'slotname))

(cffi:defcstruct #.(custom-lispify "XMappingEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long)
	(#.(custom-lispify "request" 'slotname) :int)
	(#.(custom-lispify "first_keycode" 'slotname) :int)
	(#.(custom-lispify "count" 'slotname) :int))

(cl:export '#.(custom-lispify "XMappingEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cl:export '#.(custom-lispify "request" 'slotname))

(cl:export '#.(custom-lispify "first_keycode" 'slotname))

(cl:export '#.(custom-lispify "count" 'slotname))

(cffi:defcstruct #.(custom-lispify "XErrorEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "resourceid" 'slotname) :unsigned-long)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "error_code" 'slotname) :unsigned-char)
	(#.(custom-lispify "request_code" 'slotname) :unsigned-char)
	(#.(custom-lispify "minor_code" 'slotname) :unsigned-char))

(cl:export '#.(custom-lispify "XErrorEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "resourceid" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "error_code" 'slotname))

(cl:export '#.(custom-lispify "request_code" 'slotname))

(cl:export '#.(custom-lispify "minor_code" 'slotname))

(cffi:defcstruct #.(custom-lispify "XAnyEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "window" 'slotname) :unsigned-long))

(cl:export '#.(custom-lispify "XAnyEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "window" 'slotname))

(cffi:defcstruct #.(custom-lispify "XGenericEvent" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "extension" 'slotname) :int)
	(#.(custom-lispify "evtype" 'slotname) :int))

(cl:export '#.(custom-lispify "XGenericEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "extension" 'slotname))

(cl:export '#.(custom-lispify "evtype" 'slotname))

(cffi:defcstruct #.(custom-lispify "XGenericEventCookie" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "extension" 'slotname) :int)
	(#.(custom-lispify "evtype" 'slotname) :int)
	(#.(custom-lispify "cookie" 'slotname) :unsigned-int)
	(#.(custom-lispify "data" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XGenericEventCookie" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "extension" 'slotname))

(cl:export '#.(custom-lispify "evtype" 'slotname))

(cl:export '#.(custom-lispify "cookie" 'slotname))

(cl:export '#.(custom-lispify "data" 'slotname))

(cffi:defcunion #.(custom-lispify "XEvent" 'unionname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "xany" 'slotname) #.(custom-lispify "XAnyEvent" 'structname))
	(#.(custom-lispify "xkey" 'slotname) #.(custom-lispify "XKeyEvent" 'structname))
	(#.(custom-lispify "xbutton" 'slotname) #.(custom-lispify "XButtonEvent" 'structname))
	(#.(custom-lispify "xmotion" 'slotname) #.(custom-lispify "XMotionEvent" 'structname))
	(#.(custom-lispify "xcrossing" 'slotname) #.(custom-lispify "XCrossingEvent" 'structname))
	(#.(custom-lispify "xfocus" 'slotname) #.(custom-lispify "XFocusChangeEvent" 'structname))
	(#.(custom-lispify "xexpose" 'slotname) #.(custom-lispify "XExposeEvent" 'structname))
	(#.(custom-lispify "xgraphicsexpose" 'slotname) #.(custom-lispify "XGraphicsExposeEvent" 'structname))
	(#.(custom-lispify "xnoexpose" 'slotname) #.(custom-lispify "XNoExposeEvent" 'structname))
	(#.(custom-lispify "xvisibility" 'slotname) #.(custom-lispify "XVisibilityEvent" 'structname))
	(#.(custom-lispify "xcreatewindow" 'slotname) #.(custom-lispify "XCreateWindowEvent" 'structname))
	(#.(custom-lispify "xdestroywindow" 'slotname) #.(custom-lispify "XDestroyWindowEvent" 'structname))
	(#.(custom-lispify "xunmap" 'slotname) #.(custom-lispify "XUnmapEvent" 'structname))
	(#.(custom-lispify "xmap" 'slotname) #.(custom-lispify "XMapEvent" 'structname))
	(#.(custom-lispify "xmaprequest" 'slotname) #.(custom-lispify "XMapRequestEvent" 'structname))
	(#.(custom-lispify "xreparent" 'slotname) #.(custom-lispify "XReparentEvent" 'structname))
	(#.(custom-lispify "xconfigure" 'slotname) #.(custom-lispify "XConfigureEvent" 'structname))
	(#.(custom-lispify "xgravity" 'slotname) #.(custom-lispify "XGravityEvent" 'structname))
	(#.(custom-lispify "xresizerequest" 'slotname) #.(custom-lispify "XResizeRequestEvent" 'structname))
	(#.(custom-lispify "xconfigurerequest" 'slotname) #.(custom-lispify "XConfigureRequestEvent" 'structname))
	(#.(custom-lispify "xcirculate" 'slotname) #.(custom-lispify "XCirculateEvent" 'structname))
	(#.(custom-lispify "xcirculaterequest" 'slotname) #.(custom-lispify "XCirculateRequestEvent" 'structname))
	(#.(custom-lispify "xproperty" 'slotname) #.(custom-lispify "XPropertyEvent" 'structname))
	(#.(custom-lispify "xselectionclear" 'slotname) #.(custom-lispify "XSelectionClearEvent" 'structname))
	(#.(custom-lispify "xselectionrequest" 'slotname) #.(custom-lispify "XSelectionRequestEvent" 'structname))
	(#.(custom-lispify "xselection" 'slotname) #.(custom-lispify "XSelectionEvent" 'structname))
	(#.(custom-lispify "xcolormap" 'slotname) #.(custom-lispify "XColormapEvent" 'structname))
	(#.(custom-lispify "xclient" 'slotname) #.(custom-lispify "XClientMessageEvent" 'structname))
	(#.(custom-lispify "xmapping" 'slotname) #.(custom-lispify "XMappingEvent" 'structname))
	(#.(custom-lispify "xerror" 'slotname) #.(custom-lispify "XErrorEvent" 'structname))
	(#.(custom-lispify "xkeymap" 'slotname) #.(custom-lispify "XKeymapEvent" 'structname))
	(#.(custom-lispify "xgeneric" 'slotname) #.(custom-lispify "XGenericEvent" 'structname))
	(#.(custom-lispify "xcookie" 'slotname) #.(custom-lispify "XGenericEventCookie" 'structname))
	(#.(custom-lispify "pad" 'slotname) :long :count 24))

(cl:export '#.(custom-lispify "XEvent" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "xany" 'slotname))

(cl:export '#.(custom-lispify "xkey" 'slotname))

(cl:export '#.(custom-lispify "xbutton" 'slotname))

(cl:export '#.(custom-lispify "xmotion" 'slotname))

(cl:export '#.(custom-lispify "xcrossing" 'slotname))

(cl:export '#.(custom-lispify "xfocus" 'slotname))

(cl:export '#.(custom-lispify "xexpose" 'slotname))

(cl:export '#.(custom-lispify "xgraphicsexpose" 'slotname))

(cl:export '#.(custom-lispify "xnoexpose" 'slotname))

(cl:export '#.(custom-lispify "xvisibility" 'slotname))

(cl:export '#.(custom-lispify "xcreatewindow" 'slotname))

(cl:export '#.(custom-lispify "xdestroywindow" 'slotname))

(cl:export '#.(custom-lispify "xunmap" 'slotname))

(cl:export '#.(custom-lispify "xmap" 'slotname))

(cl:export '#.(custom-lispify "xmaprequest" 'slotname))

(cl:export '#.(custom-lispify "xreparent" 'slotname))

(cl:export '#.(custom-lispify "xconfigure" 'slotname))

(cl:export '#.(custom-lispify "xgravity" 'slotname))

(cl:export '#.(custom-lispify "xresizerequest" 'slotname))

(cl:export '#.(custom-lispify "xconfigurerequest" 'slotname))

(cl:export '#.(custom-lispify "xcirculate" 'slotname))

(cl:export '#.(custom-lispify "xcirculaterequest" 'slotname))

(cl:export '#.(custom-lispify "xproperty" 'slotname))

(cl:export '#.(custom-lispify "xselectionclear" 'slotname))

(cl:export '#.(custom-lispify "xselectionrequest" 'slotname))

(cl:export '#.(custom-lispify "xselection" 'slotname))

(cl:export '#.(custom-lispify "xcolormap" 'slotname))

(cl:export '#.(custom-lispify "xclient" 'slotname))

(cl:export '#.(custom-lispify "xmapping" 'slotname))

(cl:export '#.(custom-lispify "xerror" 'slotname))

(cl:export '#.(custom-lispify "xkeymap" 'slotname))

(cl:export '#.(custom-lispify "xgeneric" 'slotname))

(cl:export '#.(custom-lispify "xcookie" 'slotname))

(cl:export '#.(custom-lispify "pad" 'slotname))

(cffi:defcstruct #.(custom-lispify "XCharStruct" 'structname-decl)
	(#.(custom-lispify "lbearing" 'slotname) :short)
	(#.(custom-lispify "rbearing" 'slotname) :short)
	(#.(custom-lispify "width" 'slotname) :short)
	(#.(custom-lispify "ascent" 'slotname) :short)
	(#.(custom-lispify "descent" 'slotname) :short)
	(#.(custom-lispify "attributes" 'slotname) :unsigned-short))

(cl:export '#.(custom-lispify "XCharStruct" 'classname))

(cl:export '#.(custom-lispify "lbearing" 'slotname))

(cl:export '#.(custom-lispify "rbearing" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "ascent" 'slotname))

(cl:export '#.(custom-lispify "descent" 'slotname))

(cl:export '#.(custom-lispify "attributes" 'slotname))

(cffi:defcstruct #.(custom-lispify "XFontProp" 'structname-decl)
	(#.(custom-lispify "name" 'slotname) :pointer)
	(#.(custom-lispify "card32" 'slotname) :unsigned-long))

(cl:export '#.(custom-lispify "XFontProp" 'classname))

(cl:export '#.(custom-lispify "name" 'slotname))

(cl:export '#.(custom-lispify "card32" 'slotname))

(cffi:defcstruct #.(custom-lispify "XFontStruct" 'structname-decl)
	(#.(custom-lispify "ext_data" 'slotname) :pointer)
	(#.(custom-lispify "fid" 'slotname) :pointer)
	(#.(custom-lispify "direction" 'slotname) :unsigned-int)
	(#.(custom-lispify "min_char_or_byte2" 'slotname) :unsigned-int)
	(#.(custom-lispify "max_char_or_byte2" 'slotname) :unsigned-int)
	(#.(custom-lispify "min_byte1" 'slotname) :unsigned-int)
	(#.(custom-lispify "max_byte1" 'slotname) :unsigned-int)
	(#.(custom-lispify "all_chars_exist" 'slotname) :int)
	(#.(custom-lispify "default_char" 'slotname) :unsigned-int)
	(#.(custom-lispify "n_properties" 'slotname) :int)
	(#.(custom-lispify "properties" 'slotname) :pointer)
	(#.(custom-lispify "min_bounds" 'slotname) #.(custom-lispify "XCharStruct" 'structname))
	(#.(custom-lispify "max_bounds" 'slotname) #.(custom-lispify "XCharStruct" 'structname))
	(#.(custom-lispify "per_char" 'slotname) :pointer)
	(#.(custom-lispify "ascent" 'slotname) :int)
	(#.(custom-lispify "descent" 'slotname) :int))

(cl:export '#.(custom-lispify "XFontStruct" 'classname))

(cl:export '#.(custom-lispify "ext_data" 'slotname))

(cl:export '#.(custom-lispify "fid" 'slotname))

(cl:export '#.(custom-lispify "direction" 'slotname))

(cl:export '#.(custom-lispify "min_char_or_byte2" 'slotname))

(cl:export '#.(custom-lispify "max_char_or_byte2" 'slotname))

(cl:export '#.(custom-lispify "min_byte1" 'slotname))

(cl:export '#.(custom-lispify "max_byte1" 'slotname))

(cl:export '#.(custom-lispify "all_chars_exist" 'slotname))

(cl:export '#.(custom-lispify "default_char" 'slotname))

(cl:export '#.(custom-lispify "n_properties" 'slotname))

(cl:export '#.(custom-lispify "properties" 'slotname))

(cl:export '#.(custom-lispify "min_bounds" 'slotname))

(cl:export '#.(custom-lispify "max_bounds" 'slotname))

(cl:export '#.(custom-lispify "per_char" 'slotname))

(cl:export '#.(custom-lispify "ascent" 'slotname))

(cl:export '#.(custom-lispify "descent" 'slotname))

(cffi:defcstruct #.(custom-lispify "XTextItem" 'structname-decl)
	(#.(custom-lispify "chars" 'slotname) string-or-ptr)
	(#.(custom-lispify "nchars" 'slotname) :int)
	(#.(custom-lispify "delta" 'slotname) :int)
	(#.(custom-lispify "font" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XTextItem" 'classname))

(cl:export '#.(custom-lispify "chars" 'slotname))

(cl:export '#.(custom-lispify "nchars" 'slotname))

(cl:export '#.(custom-lispify "delta" 'slotname))

(cl:export '#.(custom-lispify "font" 'slotname))

(cffi:defcstruct #.(custom-lispify "XChar2b" 'structname-decl)
	(#.(custom-lispify "byte1" 'slotname) :unsigned-char)
	(#.(custom-lispify "byte2" 'slotname) :unsigned-char))

(cl:export '#.(custom-lispify "XChar2b" 'classname))

(cl:export '#.(custom-lispify "byte1" 'slotname))

(cl:export '#.(custom-lispify "byte2" 'slotname))

(cffi:defcstruct #.(custom-lispify "XTextItem16" 'structname-decl)
	(#.(custom-lispify "chars" 'slotname) :pointer)
	(#.(custom-lispify "nchars" 'slotname) :int)
	(#.(custom-lispify "delta" 'slotname) :int)
	(#.(custom-lispify "font" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XTextItem16" 'classname))

(cl:export '#.(custom-lispify "chars" 'slotname))

(cl:export '#.(custom-lispify "nchars" 'slotname))

(cl:export '#.(custom-lispify "delta" 'slotname))

(cl:export '#.(custom-lispify "font" 'slotname))

(cffi:defcunion #.(custom-lispify "XEDataObject" 'unionname-decl)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "gc" 'slotname) :pointer)
	(#.(custom-lispify "visual" 'slotname) :pointer)
	(#.(custom-lispify "screen" 'slotname) :pointer)
	(#.(custom-lispify "pixmap_format" 'slotname) :pointer)
	(#.(custom-lispify "font" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XEDataObject" 'classname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "gc" 'slotname))

(cl:export '#.(custom-lispify "visual" 'slotname))

(cl:export '#.(custom-lispify "screen" 'slotname))

(cl:export '#.(custom-lispify "pixmap_format" 'slotname))

(cl:export '#.(custom-lispify "font" 'slotname))

(cffi:defcstruct #.(custom-lispify "XFontSetExtents" 'structname-decl)
	(#.(custom-lispify "max_ink_extent" 'slotname) #.(custom-lispify "XRectangle" 'structname))
	(#.(custom-lispify "max_logical_extent" 'slotname) #.(custom-lispify "XRectangle" 'structname)))

(cl:export '#.(custom-lispify "XFontSetExtents" 'classname))

(cl:export '#.(custom-lispify "max_ink_extent" 'slotname))

(cl:export '#.(custom-lispify "max_logical_extent" 'slotname))

(cffi:defctype #.(custom-lispify "XOM" 'typename) :pointer)

(cl:export '#.(custom-lispify "XOM" 'typename))

(cffi:defctype #.(custom-lispify "XOC" 'typename) :pointer)

(cl:export '#.(custom-lispify "XOC" 'typename))

(cffi:defctype #.(custom-lispify "XFontSet" 'typename) :pointer)

(cl:export '#.(custom-lispify "XFontSet" 'typename))

(cffi:defcstruct #.(custom-lispify "XmbTextItem" 'structname-decl)
	(#.(custom-lispify "chars" 'slotname) string-or-ptr)
	(#.(custom-lispify "nchars" 'slotname) :int)
	(#.(custom-lispify "delta" 'slotname) :int)
	(#.(custom-lispify "font_set" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XmbTextItem" 'classname))

(cl:export '#.(custom-lispify "chars" 'slotname))

(cl:export '#.(custom-lispify "nchars" 'slotname))

(cl:export '#.(custom-lispify "delta" 'slotname))

(cl:export '#.(custom-lispify "font_set" 'slotname))

(cffi:defcstruct #.(custom-lispify "XwcTextItem" 'structname-decl)
	(#.(custom-lispify "chars" 'slotname) :pointer)
	(#.(custom-lispify "nchars" 'slotname) :int)
	(#.(custom-lispify "delta" 'slotname) :int)
	(#.(custom-lispify "font_set" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XwcTextItem" 'classname))

(cl:export '#.(custom-lispify "chars" 'slotname))

(cl:export '#.(custom-lispify "nchars" 'slotname))

(cl:export '#.(custom-lispify "delta" 'slotname))

(cl:export '#.(custom-lispify "font_set" 'slotname))

(cl:defconstant #.(custom-lispify "XNRequiredCharSet" 'constant) '#.(intern "requiredCharSet"))

(cl:export '#.(custom-lispify "XNRequiredCharSet" 'constant))

(cl:defconstant #.(custom-lispify "XNQueryOrientation" 'constant) '#.(intern "queryOrientation"))

(cl:export '#.(custom-lispify "XNQueryOrientation" 'constant))

(cl:defconstant #.(custom-lispify "XNBaseFontName" 'constant) '#.(intern "baseFontName"))

(cl:export '#.(custom-lispify "XNBaseFontName" 'constant))

(cl:defconstant #.(custom-lispify "XNOMAutomatic" 'constant) '#.(intern "omAutomatic"))

(cl:export '#.(custom-lispify "XNOMAutomatic" 'constant))

(cl:defconstant #.(custom-lispify "XNMissingCharSet" 'constant) '#.(intern "missingCharSet"))

(cl:export '#.(custom-lispify "XNMissingCharSet" 'constant))

(cl:defconstant #.(custom-lispify "XNDefaultString" 'constant) '#.(intern "defaultString"))

(cl:export '#.(custom-lispify "XNDefaultString" 'constant))

(cl:defconstant #.(custom-lispify "XNOrientation" 'constant) '#.(intern "orientation"))

(cl:export '#.(custom-lispify "XNOrientation" 'constant))

(cl:defconstant #.(custom-lispify "XNDirectionalDependentDrawing" 'constant) '#.(intern "directionalDependentDrawing"))

(cl:export '#.(custom-lispify "XNDirectionalDependentDrawing" 'constant))

(cl:defconstant #.(custom-lispify "XNContextualDrawing" 'constant) '#.(intern "contextualDrawing"))

(cl:export '#.(custom-lispify "XNContextualDrawing" 'constant))

(cl:defconstant #.(custom-lispify "XNFontInfo" 'constant) '#.(intern "fontInfo"))

(cl:export '#.(custom-lispify "XNFontInfo" 'constant))

(cffi:defcstruct #.(custom-lispify "XOMCharSetList" 'structname-decl)
	(#.(custom-lispify "charset_count" 'slotname) :int)
	(#.(custom-lispify "charset_list" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XOMCharSetList" 'classname))

(cl:export '#.(custom-lispify "charset_count" 'slotname))

(cl:export '#.(custom-lispify "charset_list" 'slotname))

(cffi:defcenum #.(custom-lispify "XOrientation" 'enumname)
	#.(custom-lispify "XOMOrientation_LTR_TTB" 'enumvalue :keyword)
	#.(custom-lispify "XOMOrientation_RTL_TTB" 'enumvalue :keyword)
	#.(custom-lispify "XOMOrientation_TTB_LTR" 'enumvalue :keyword)
	#.(custom-lispify "XOMOrientation_TTB_RTL" 'enumvalue :keyword)
	#.(custom-lispify "XOMOrientation_Context" 'enumvalue :keyword))

(cl:export '#.(custom-lispify "XOrientation" 'enumname))

(cffi:defcstruct #.(custom-lispify "XOMOrientation" 'structname-decl)
	(#.(custom-lispify "num_orientation" 'slotname) :int)
	(#.(custom-lispify "orientation" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XOMOrientation" 'classname))

(cl:export '#.(custom-lispify "num_orientation" 'slotname))

(cl:export '#.(custom-lispify "orientation" 'slotname))

(cffi:defcstruct #.(custom-lispify "XOMFontInfo" 'structname-decl)
	(#.(custom-lispify "num_font" 'slotname) :int)
	(#.(custom-lispify "font_struct_list" 'slotname) :pointer)
	(#.(custom-lispify "font_name_list" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XOMFontInfo" 'classname))

(cl:export '#.(custom-lispify "num_font" 'slotname))

(cl:export '#.(custom-lispify "font_struct_list" 'slotname))

(cl:export '#.(custom-lispify "font_name_list" 'slotname))

(cffi:defctype #.(custom-lispify "XIM" 'typename) :pointer)

(cl:export '#.(custom-lispify "XIM" 'typename))

(cffi:defctype #.(custom-lispify "XIC" 'typename) :pointer)

(cl:export '#.(custom-lispify "XIC" 'typename))

(cffi:defctype #.(custom-lispify "XIMProc" 'typename) :pointer)

(cl:export '#.(custom-lispify "XIMProc" 'typename))

(cffi:defctype #.(custom-lispify "XICProc" 'typename) :pointer)

(cl:export '#.(custom-lispify "XICProc" 'typename))

(cffi:defctype #.(custom-lispify "XIDProc" 'typename) :pointer)

(cl:export '#.(custom-lispify "XIDProc" 'typename))

(cffi:defctype #.(custom-lispify "XIMStyle" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "XIMStyle" 'typename))

(cffi:defcstruct #.(custom-lispify "XIMStyles" 'structname-decl)
	(#.(custom-lispify "count_styles" 'slotname) :unsigned-short)
	(#.(custom-lispify "supported_styles" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMStyles" 'classname))

(cl:export '#.(custom-lispify "count_styles" 'slotname))

(cl:export '#.(custom-lispify "supported_styles" 'slotname))

(cl:defconstant #.(custom-lispify "XIMPreeditArea" 'constant) #x00001)

(cl:export '#.(custom-lispify "XIMPreeditArea" 'constant))

(cl:defconstant #.(custom-lispify "XIMPreeditCallbacks" 'constant) #x00002)

(cl:export '#.(custom-lispify "XIMPreeditCallbacks" 'constant))

(cl:defconstant #.(custom-lispify "XIMPreeditPosition" 'constant) #x00004)

(cl:export '#.(custom-lispify "XIMPreeditPosition" 'constant))

(cl:defconstant #.(custom-lispify "XIMPreeditNothing" 'constant) #x00008)

(cl:export '#.(custom-lispify "XIMPreeditNothing" 'constant))

(cl:defconstant #.(custom-lispify "XIMPreeditNone" 'constant) #x00010)

(cl:export '#.(custom-lispify "XIMPreeditNone" 'constant))

(cl:defconstant #.(custom-lispify "XIMStatusArea" 'constant) #x00100)

(cl:export '#.(custom-lispify "XIMStatusArea" 'constant))

(cl:defconstant #.(custom-lispify "XIMStatusCallbacks" 'constant) #x00200)

(cl:export '#.(custom-lispify "XIMStatusCallbacks" 'constant))

(cl:defconstant #.(custom-lispify "XIMStatusNothing" 'constant) #x00400)

(cl:export '#.(custom-lispify "XIMStatusNothing" 'constant))

(cl:defconstant #.(custom-lispify "XIMStatusNone" 'constant) #x00800)

(cl:export '#.(custom-lispify "XIMStatusNone" 'constant))

(cl:defconstant #.(custom-lispify "XNVaNestedList" 'constant) '#.(intern "XNVaNestedList"))

(cl:export '#.(custom-lispify "XNVaNestedList" 'constant))

(cl:defconstant #.(custom-lispify "XNQueryInputStyle" 'constant) '#.(intern "queryInputStyle"))

(cl:export '#.(custom-lispify "XNQueryInputStyle" 'constant))

(cl:defconstant #.(custom-lispify "XNClientWindow" 'constant) '#.(intern "clientWindow"))

(cl:export '#.(custom-lispify "XNClientWindow" 'constant))

(cl:defconstant #.(custom-lispify "XNInputStyle" 'constant) '#.(intern "inputStyle"))

(cl:export '#.(custom-lispify "XNInputStyle" 'constant))

(cl:defconstant #.(custom-lispify "XNFocusWindow" 'constant) '#.(intern "focusWindow"))

(cl:export '#.(custom-lispify "XNFocusWindow" 'constant))

(cl:defconstant #.(custom-lispify "XNResourceName" 'constant) '#.(intern "resourceName"))

(cl:export '#.(custom-lispify "XNResourceName" 'constant))

(cl:defconstant #.(custom-lispify "XNResourceClass" 'constant) '#.(intern "resourceClass"))

(cl:export '#.(custom-lispify "XNResourceClass" 'constant))

(cl:defconstant #.(custom-lispify "XNGeometryCallback" 'constant) '#.(intern "geometryCallback"))

(cl:export '#.(custom-lispify "XNGeometryCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNDestroyCallback" 'constant) '#.(intern "destroyCallback"))

(cl:export '#.(custom-lispify "XNDestroyCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNFilterEvents" 'constant) '#.(intern "filterEvents"))

(cl:export '#.(custom-lispify "XNFilterEvents" 'constant))

(cl:defconstant #.(custom-lispify "XNPreeditStartCallback" 'constant) '#.(intern "preeditStartCallback"))

(cl:export '#.(custom-lispify "XNPreeditStartCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNPreeditDoneCallback" 'constant) '#.(intern "preeditDoneCallback"))

(cl:export '#.(custom-lispify "XNPreeditDoneCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNPreeditDrawCallback" 'constant) '#.(intern "preeditDrawCallback"))

(cl:export '#.(custom-lispify "XNPreeditDrawCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNPreeditCaretCallback" 'constant) '#.(intern "preeditCaretCallback"))

(cl:export '#.(custom-lispify "XNPreeditCaretCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNPreeditStateNotifyCallback" 'constant) '#.(intern "preeditStateNotifyCallback"))

(cl:export '#.(custom-lispify "XNPreeditStateNotifyCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNPreeditAttributes" 'constant) '#.(intern "preeditAttributes"))

(cl:export '#.(custom-lispify "XNPreeditAttributes" 'constant))

(cl:defconstant #.(custom-lispify "XNStatusStartCallback" 'constant) '#.(intern "statusStartCallback"))

(cl:export '#.(custom-lispify "XNStatusStartCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNStatusDoneCallback" 'constant) '#.(intern "statusDoneCallback"))

(cl:export '#.(custom-lispify "XNStatusDoneCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNStatusDrawCallback" 'constant) '#.(intern "statusDrawCallback"))

(cl:export '#.(custom-lispify "XNStatusDrawCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNStatusAttributes" 'constant) '#.(intern "statusAttributes"))

(cl:export '#.(custom-lispify "XNStatusAttributes" 'constant))

(cl:defconstant #.(custom-lispify "XNArea" 'constant) '#.(intern "area"))

(cl:export '#.(custom-lispify "XNArea" 'constant))

(cl:defconstant #.(custom-lispify "XNAreaNeeded" 'constant) '#.(intern "areaNeeded"))

(cl:export '#.(custom-lispify "XNAreaNeeded" 'constant))

(cl:defconstant #.(custom-lispify "XNSpotLocation" 'constant) '#.(intern "spotLocation"))

(cl:export '#.(custom-lispify "XNSpotLocation" 'constant))

(cl:defconstant #.(custom-lispify "XNColormap" 'constant) '#.(intern "colorMap"))

(cl:export '#.(custom-lispify "XNColormap" 'constant))

(cl:defconstant #.(custom-lispify "XNStdColormap" 'constant) '#.(intern "stdColorMap"))

(cl:export '#.(custom-lispify "XNStdColormap" 'constant))

(cl:defconstant #.(custom-lispify "XNForeground" 'constant) '#.(intern "foreground"))

(cl:export '#.(custom-lispify "XNForeground" 'constant))

(cl:defconstant #.(custom-lispify "XNBackground" 'constant) '#.(intern "background"))

(cl:export '#.(custom-lispify "XNBackground" 'constant))

(cl:defconstant #.(custom-lispify "XNBackgroundPixmap" 'constant) '#.(intern "backgroundPixmap"))

(cl:export '#.(custom-lispify "XNBackgroundPixmap" 'constant))

(cl:defconstant #.(custom-lispify "XNFontSet" 'constant) '#.(intern "fontSet"))

(cl:export '#.(custom-lispify "XNFontSet" 'constant))

(cl:defconstant #.(custom-lispify "XNLineSpace" 'constant) '#.(intern "lineSpace"))

(cl:export '#.(custom-lispify "XNLineSpace" 'constant))

(cl:defconstant #.(custom-lispify "XNCursor" 'constant) '#.(intern "cursor"))

(cl:export '#.(custom-lispify "XNCursor" 'constant))

(cl:defconstant #.(custom-lispify "XNQueryIMValuesList" 'constant) '#.(intern "queryIMValuesList"))

(cl:export '#.(custom-lispify "XNQueryIMValuesList" 'constant))

(cl:defconstant #.(custom-lispify "XNQueryICValuesList" 'constant) '#.(intern "queryICValuesList"))

(cl:export '#.(custom-lispify "XNQueryICValuesList" 'constant))

(cl:defconstant #.(custom-lispify "XNVisiblePosition" 'constant) '#.(intern "visiblePosition"))

(cl:export '#.(custom-lispify "XNVisiblePosition" 'constant))

(cl:defconstant #.(custom-lispify "XNR6PreeditCallback" 'constant) '#.(intern "r6PreeditCallback"))

(cl:export '#.(custom-lispify "XNR6PreeditCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNStringConversionCallback" 'constant) '#.(intern "stringConversionCallback"))

(cl:export '#.(custom-lispify "XNStringConversionCallback" 'constant))

(cl:defconstant #.(custom-lispify "XNStringConversion" 'constant) '#.(intern "stringConversion"))

(cl:export '#.(custom-lispify "XNStringConversion" 'constant))

(cl:defconstant #.(custom-lispify "XNResetState" 'constant) '#.(intern "resetState"))

(cl:export '#.(custom-lispify "XNResetState" 'constant))

(cl:defconstant #.(custom-lispify "XNHotKey" 'constant) '#.(intern "hotKey"))

(cl:export '#.(custom-lispify "XNHotKey" 'constant))

(cl:defconstant #.(custom-lispify "XNHotKeyState" 'constant) '#.(intern "hotKeyState"))

(cl:export '#.(custom-lispify "XNHotKeyState" 'constant))

(cl:defconstant #.(custom-lispify "XNPreeditState" 'constant) '#.(intern "preeditState"))

(cl:export '#.(custom-lispify "XNPreeditState" 'constant))

(cl:defconstant #.(custom-lispify "XNSeparatorofNestedList" 'constant) '#.(intern "separatorofNestedList"))

(cl:export '#.(custom-lispify "XNSeparatorofNestedList" 'constant))

(cl:defconstant #.(custom-lispify "XBufferOverflow" 'constant) -1)

(cl:export '#.(custom-lispify "XBufferOverflow" 'constant))

(cl:defconstant #.(custom-lispify "XLookupNone" 'constant) 1)

(cl:export '#.(custom-lispify "XLookupNone" 'constant))

(cl:defconstant #.(custom-lispify "XLookupChars" 'constant) 2)

(cl:export '#.(custom-lispify "XLookupChars" 'constant))

(cl:defconstant #.(custom-lispify "XLookupKeySym" 'constant) 3)

(cl:export '#.(custom-lispify "XLookupKeySym" 'constant))

(cl:defconstant #.(custom-lispify "XLookupBoth" 'constant) 4)

(cl:export '#.(custom-lispify "XLookupBoth" 'constant))

(cffi:defctype #.(custom-lispify "XVaNestedList" 'typename) :pointer)

(cl:export '#.(custom-lispify "XVaNestedList" 'typename))

(cffi:defcstruct #.(custom-lispify "XIMCallback" 'structname-decl)
	(#.(custom-lispify "client_data" 'slotname) string-or-ptr)
	(#.(custom-lispify "callback" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMCallback" 'classname))

(cl:export '#.(custom-lispify "client_data" 'slotname))

(cl:export '#.(custom-lispify "callback" 'slotname))

(cffi:defcstruct #.(custom-lispify "XICCallback" 'structname-decl)
	(#.(custom-lispify "client_data" 'slotname) string-or-ptr)
	(#.(custom-lispify "callback" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XICCallback" 'classname))

(cl:export '#.(custom-lispify "client_data" 'slotname))

(cl:export '#.(custom-lispify "callback" 'slotname))

(cffi:defctype #.(custom-lispify "XIMFeedback" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "XIMFeedback" 'typename))

(cl:defconstant #.(custom-lispify "XIMReverse" 'constant) 1)

(cl:export '#.(custom-lispify "XIMReverse" 'constant))

(cl:defconstant #.(custom-lispify "XIMUnderline" 'constant) (cl:ash 1 1))

(cl:export '#.(custom-lispify "XIMUnderline" 'constant))

(cl:defconstant #.(custom-lispify "XIMHighlight" 'constant) (cl:ash 1 2))

(cl:export '#.(custom-lispify "XIMHighlight" 'constant))

(cl:defconstant #.(custom-lispify "XIMPrimary" 'constant) (cl:ash 1 5))

(cl:export '#.(custom-lispify "XIMPrimary" 'constant))

(cl:defconstant #.(custom-lispify "XIMSecondary" 'constant) (cl:ash 1 6))

(cl:export '#.(custom-lispify "XIMSecondary" 'constant))

(cl:defconstant #.(custom-lispify "XIMTertiary" 'constant) (cl:ash 1 7))

(cl:export '#.(custom-lispify "XIMTertiary" 'constant))

(cl:defconstant #.(custom-lispify "XIMVisibleToForward" 'constant) (cl:ash 1 8))

(cl:export '#.(custom-lispify "XIMVisibleToForward" 'constant))

(cl:defconstant #.(custom-lispify "XIMVisibleToBackword" 'constant) (cl:ash 1 9))

(cl:export '#.(custom-lispify "XIMVisibleToBackword" 'constant))

(cl:defconstant #.(custom-lispify "XIMVisibleToCenter" 'constant) (cl:ash 1 10))

(cl:export '#.(custom-lispify "XIMVisibleToCenter" 'constant))

(cffi:defcstruct #.(custom-lispify "XIMText" 'structname-decl)
	(#.(custom-lispify "length" 'slotname) :unsigned-short)
	(#.(custom-lispify "feedback" 'slotname) :pointer)
	(#.(custom-lispify "encoding_is_wchar" 'slotname) :int)
	(#.(custom-lispify "string" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMText" 'classname))

(cl:export '#.(custom-lispify "length" 'slotname))

(cl:export '#.(custom-lispify "feedback" 'slotname))

(cl:export '#.(custom-lispify "encoding_is_wchar" 'slotname))

(cl:export '#.(custom-lispify "string" 'slotname))

(cffi:defcunion #.(custom-lispify "XIMText_string" 'unionname-decl)
	(#.(custom-lispify "multi_byte" 'slotname) string-or-ptr)
	(#.(custom-lispify "wide_char" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMText_string" 'classname))

(cl:export '#.(custom-lispify "multi_byte" 'slotname))

(cl:export '#.(custom-lispify "wide_char" 'slotname))

(cffi:defctype #.(custom-lispify "XIMPreeditState" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "XIMPreeditState" 'typename))

(cl:defconstant #.(custom-lispify "XIMPreeditUnKnown" 'constant) 0)

(cl:export '#.(custom-lispify "XIMPreeditUnKnown" 'constant))

(cl:defconstant #.(custom-lispify "XIMPreeditEnable" 'constant) 1)

(cl:export '#.(custom-lispify "XIMPreeditEnable" 'constant))

(cl:defconstant #.(custom-lispify "XIMPreeditDisable" 'constant) (cl:ash 1 1))

(cl:export '#.(custom-lispify "XIMPreeditDisable" 'constant))

(cffi:defcstruct #.(custom-lispify "XIMPreeditStateNotifyCallbackStruct" 'structname-decl)
	(#.(custom-lispify "state" 'slotname) :unsigned-long))

(cl:export '#.(custom-lispify "XIMPreeditStateNotifyCallbackStruct" 'classname))

(cl:export '#.(custom-lispify "state" 'slotname))

(cffi:defctype #.(custom-lispify "XIMResetState" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "XIMResetState" 'typename))

(cl:defconstant #.(custom-lispify "XIMInitialState" 'constant) 1)

(cl:export '#.(custom-lispify "XIMInitialState" 'constant))

(cl:defconstant #.(custom-lispify "XIMPreserveState" 'constant) (cl:ash 1 1))

(cl:export '#.(custom-lispify "XIMPreserveState" 'constant))

(cffi:defctype #.(custom-lispify "XIMStringConversionFeedback" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "XIMStringConversionFeedback" 'typename))

(cl:defconstant #.(custom-lispify "XIMStringConversionLeftEdge" 'constant) #x000000001)

(cl:export '#.(custom-lispify "XIMStringConversionLeftEdge" 'constant))

(cl:defconstant #.(custom-lispify "XIMStringConversionRightEdge" 'constant) #x000000002)

(cl:export '#.(custom-lispify "XIMStringConversionRightEdge" 'constant))

(cl:defconstant #.(custom-lispify "XIMStringConversionTopEdge" 'constant) #x000000004)

(cl:export '#.(custom-lispify "XIMStringConversionTopEdge" 'constant))

(cl:defconstant #.(custom-lispify "XIMStringConversionBottomEdge" 'constant) #x000000008)

(cl:export '#.(custom-lispify "XIMStringConversionBottomEdge" 'constant))

(cl:defconstant #.(custom-lispify "XIMStringConversionConcealed" 'constant) #x000000010)

(cl:export '#.(custom-lispify "XIMStringConversionConcealed" 'constant))

(cl:defconstant #.(custom-lispify "XIMStringConversionWrapped" 'constant) #x000000020)

(cl:export '#.(custom-lispify "XIMStringConversionWrapped" 'constant))

(cffi:defcstruct #.(custom-lispify "XIMStringConversionText" 'structname-decl)
	(#.(custom-lispify "length" 'slotname) :unsigned-short)
	(#.(custom-lispify "feedback" 'slotname) :pointer)
	(#.(custom-lispify "encoding_is_wchar" 'slotname) :int)
	(#.(custom-lispify "string" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMStringConversionText" 'classname))

(cl:export '#.(custom-lispify "length" 'slotname))

(cl:export '#.(custom-lispify "feedback" 'slotname))

(cl:export '#.(custom-lispify "encoding_is_wchar" 'slotname))

(cl:export '#.(custom-lispify "string" 'slotname))

(cffi:defcunion #.(custom-lispify "XIMStringConversionText_string" 'unionname-decl)
	(#.(custom-lispify "mbs" 'slotname) string-or-ptr)
	(#.(custom-lispify "wcs" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMStringConversionText_string" 'classname))

(cl:export '#.(custom-lispify "mbs" 'slotname))

(cl:export '#.(custom-lispify "wcs" 'slotname))

(cffi:defctype #.(custom-lispify "XIMStringConversionPosition" 'typename) :unsigned-short)

(cl:export '#.(custom-lispify "XIMStringConversionPosition" 'typename))

(cffi:defctype #.(custom-lispify "XIMStringConversionType" 'typename) :unsigned-short)

(cl:export '#.(custom-lispify "XIMStringConversionType" 'typename))

(cl:defconstant #.(custom-lispify "XIMStringConversionBuffer" 'constant) #x00001)

(cl:export '#.(custom-lispify "XIMStringConversionBuffer" 'constant))

(cl:defconstant #.(custom-lispify "XIMStringConversionLine" 'constant) #x00002)

(cl:export '#.(custom-lispify "XIMStringConversionLine" 'constant))

(cl:defconstant #.(custom-lispify "XIMStringConversionWord" 'constant) #x00003)

(cl:export '#.(custom-lispify "XIMStringConversionWord" 'constant))

(cl:defconstant #.(custom-lispify "XIMStringConversionChar" 'constant) #x00004)

(cl:export '#.(custom-lispify "XIMStringConversionChar" 'constant))

(cffi:defctype #.(custom-lispify "XIMStringConversionOperation" 'typename) :unsigned-short)

(cl:export '#.(custom-lispify "XIMStringConversionOperation" 'typename))

(cl:defconstant #.(custom-lispify "XIMStringConversionSubstitution" 'constant) #x00001)

(cl:export '#.(custom-lispify "XIMStringConversionSubstitution" 'constant))

(cl:defconstant #.(custom-lispify "XIMStringConversionRetrieval" 'constant) #x00002)

(cl:export '#.(custom-lispify "XIMStringConversionRetrieval" 'constant))

(cffi:defcenum #.(custom-lispify "XIMCaretDirection" 'enumname)
	#.(custom-lispify "XIMForwardChar" 'enumvalue :keyword)
	#.(custom-lispify "XIMBackwardChar" 'enumvalue :keyword)
	#.(custom-lispify "XIMForwardWord" 'enumvalue :keyword)
	#.(custom-lispify "XIMBackwardWord" 'enumvalue :keyword)
	#.(custom-lispify "XIMCaretUp" 'enumvalue :keyword)
	#.(custom-lispify "XIMCaretDown" 'enumvalue :keyword)
	#.(custom-lispify "XIMNextLine" 'enumvalue :keyword)
	#.(custom-lispify "XIMPreviousLine" 'enumvalue :keyword)
	#.(custom-lispify "XIMLineStart" 'enumvalue :keyword)
	#.(custom-lispify "XIMLineEnd" 'enumvalue :keyword)
	#.(custom-lispify "XIMAbsolutePosition" 'enumvalue :keyword)
	#.(custom-lispify "XIMDontChange" 'enumvalue :keyword))

(cl:export '#.(custom-lispify "XIMCaretDirection" 'enumname))

(cffi:defcstruct #.(custom-lispify "XIMStringConversionCallbackStruct" 'structname-decl)
	(#.(custom-lispify "position" 'slotname) :unsigned-short)
	(#.(custom-lispify "direction" 'slotname) #.(custom-lispify "XIMCaretDirection" 'enumname))
	(#.(custom-lispify "operation" 'slotname) :unsigned-short)
	(#.(custom-lispify "factor" 'slotname) :unsigned-short)
	(#.(custom-lispify "text" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMStringConversionCallbackStruct" 'classname))

(cl:export '#.(custom-lispify "position" 'slotname))

(cl:export '#.(custom-lispify "direction" 'slotname))

(cl:export '#.(custom-lispify "operation" 'slotname))

(cl:export '#.(custom-lispify "factor" 'slotname))

(cl:export '#.(custom-lispify "text" 'slotname))

(cffi:defcstruct #.(custom-lispify "XIMPreeditDrawCallbackStruct" 'structname-decl)
	(#.(custom-lispify "caret" 'slotname) :int)
	(#.(custom-lispify "chg_first" 'slotname) :int)
	(#.(custom-lispify "chg_length" 'slotname) :int)
	(#.(custom-lispify "text" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMPreeditDrawCallbackStruct" 'classname))

(cl:export '#.(custom-lispify "caret" 'slotname))

(cl:export '#.(custom-lispify "chg_first" 'slotname))

(cl:export '#.(custom-lispify "chg_length" 'slotname))

(cl:export '#.(custom-lispify "text" 'slotname))

(cffi:defcenum #.(custom-lispify "XIMCaretStyle" 'enumname)
	#.(custom-lispify "XIMIsInvisible" 'enumvalue :keyword)
	#.(custom-lispify "XIMIsPrimary" 'enumvalue :keyword)
	#.(custom-lispify "XIMIsSecondary" 'enumvalue :keyword))

(cl:export '#.(custom-lispify "XIMCaretStyle" 'enumname))

(cffi:defcstruct #.(custom-lispify "XIMPreeditCaretCallbackStruct" 'structname-decl)
	(#.(custom-lispify "position" 'slotname) :int)
	(#.(custom-lispify "direction" 'slotname) #.(custom-lispify "XIMCaretDirection" 'enumname))
	(#.(custom-lispify "style" 'slotname) #.(custom-lispify "XIMCaretStyle" 'enumname)))

(cl:export '#.(custom-lispify "XIMPreeditCaretCallbackStruct" 'classname))

(cl:export '#.(custom-lispify "position" 'slotname))

(cl:export '#.(custom-lispify "direction" 'slotname))

(cl:export '#.(custom-lispify "style" 'slotname))

(cffi:defcenum #.(custom-lispify "XIMStatusDataType" 'enumname)
	#.(custom-lispify "XIMTextType" 'enumvalue :keyword)
	#.(custom-lispify "XIMBitmapType" 'enumvalue :keyword))

(cl:export '#.(custom-lispify "XIMStatusDataType" 'enumname))

(cffi:defcstruct #.(custom-lispify "XIMStatusDrawCallbackStruct" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) #.(custom-lispify "XIMStatusDataType" 'enumname))
	(#.(custom-lispify "data" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMStatusDrawCallbackStruct" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "data" 'slotname))

(cffi:defcunion #.(custom-lispify "XIMStatusDrawCallbackStruct_data" 'unionname-decl)
	(#.(custom-lispify "text" 'slotname) :pointer)
	(#.(custom-lispify "bitmap" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMStatusDrawCallbackStruct_data" 'classname))

(cl:export '#.(custom-lispify "text" 'slotname))

(cl:export '#.(custom-lispify "bitmap" 'slotname))

(cffi:defcstruct #.(custom-lispify "XIMHotKeyTrigger" 'structname-decl)
	(#.(custom-lispify "keysym" 'slotname) :pointer)
	(#.(custom-lispify "modifier" 'slotname) :int)
	(#.(custom-lispify "modifier_mask" 'slotname) :int))

(cl:export '#.(custom-lispify "XIMHotKeyTrigger" 'classname))

(cl:export '#.(custom-lispify "keysym" 'slotname))

(cl:export '#.(custom-lispify "modifier" 'slotname))

(cl:export '#.(custom-lispify "modifier_mask" 'slotname))

(cffi:defcstruct #.(custom-lispify "XIMHotKeyTriggers" 'structname-decl)
	(#.(custom-lispify "num_hot_key" 'slotname) :int)
	(#.(custom-lispify "key" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMHotKeyTriggers" 'classname))

(cl:export '#.(custom-lispify "num_hot_key" 'slotname))

(cl:export '#.(custom-lispify "key" 'slotname))

(cffi:defctype #.(custom-lispify "XIMHotKeyState" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "XIMHotKeyState" 'typename))

(cl:defconstant #.(custom-lispify "XIMHotKeyStateON" 'constant) #x00001)

(cl:export '#.(custom-lispify "XIMHotKeyStateON" 'constant))

(cl:defconstant #.(custom-lispify "XIMHotKeyStateOFF" 'constant) #x00002)

(cl:export '#.(custom-lispify "XIMHotKeyStateOFF" 'constant))

(cffi:defcstruct #.(custom-lispify "XIMValuesList" 'structname-decl)
	(#.(custom-lispify "count_values" 'slotname) :unsigned-short)
	(#.(custom-lispify "supported_values" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XIMValuesList" 'classname))

(cl:export '#.(custom-lispify "count_values" 'slotname))

(cl:export '#.(custom-lispify "supported_values" 'slotname))

(cffi:defcvar ("_Xdebug" #.(custom-lispify "_Xdebug" 'variable))
 :int)

(cl:export '#.(custom-lispify "_Xdebug" 'variable))

(cffi:defcfun ("XLoadQueryFont" #.(custom-lispify "XLoadQueryFont" 'function)) :pointer
  (arg0 :pointer)
  (arg1 string-or-ptr))

(cl:export '#.(custom-lispify "XLoadQueryFont" 'function))

(cffi:defcfun ("XQueryFont" #.(custom-lispify "XQueryFont" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XQueryFont" 'function))

(cffi:defcfun ("XGetMotionEvents" #.(custom-lispify "XGetMotionEvents" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XGetMotionEvents" 'function))

(cffi:defcfun ("XDeleteModifiermapEntry" #.(custom-lispify "XDeleteModifiermapEntry" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XDeleteModifiermapEntry" 'function))

(cffi:defcfun ("XGetModifierMapping" #.(custom-lispify "XGetModifierMapping" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XGetModifierMapping" 'function))

(cffi:defcfun ("XInsertModifiermapEntry" #.(custom-lispify "XInsertModifiermapEntry" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XInsertModifiermapEntry" 'function))

(cffi:defcfun ("XNewModifiermap" #.(custom-lispify "XNewModifiermap" 'function)) :pointer
  (arg0 :int))

(cl:export '#.(custom-lispify "XNewModifiermap" 'function))

(cffi:defcfun ("XCreateImage" #.(custom-lispify "XCreateImage" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :int)
  (arg4 :int)
  (arg5 string-or-ptr)
  (arg6 :unsigned-int)
  (arg7 :unsigned-int)
  (arg8 :int)
  (arg9 :int))

(cl:export '#.(custom-lispify "XCreateImage" 'function))

(cffi:defcfun ("XInitImage" #.(custom-lispify "XInitImage" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XInitImage" 'function))

(cffi:defcfun ("XGetImage" #.(custom-lispify "XGetImage" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-long)
  (arg7 :int))

(cl:export '#.(custom-lispify "XGetImage" 'function))

(cffi:defcfun ("XGetSubImage" #.(custom-lispify "XGetSubImage" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-long)
  (arg7 :int)
  (arg8 :pointer)
  (arg9 :int)
  (arg10 :int))

(cl:export '#.(custom-lispify "XGetSubImage" 'function))

(cffi:defcfun ("XOpenDisplay" #.(custom-lispify "XOpenDisplay" 'function)) :pointer
  (arg0 string-or-ptr))

(cl:export '#.(custom-lispify "XOpenDisplay" 'function))

(cffi:defcfun ("XrmInitialize" #.(custom-lispify "XrmInitialize" 'function)) :void)

(cl:export '#.(custom-lispify "XrmInitialize" 'function))

(cffi:defcfun ("XFetchBytes" #.(custom-lispify "XFetchBytes" 'function)) string-or-ptr
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XFetchBytes" 'function))

(cffi:defcfun ("XFetchBuffer" #.(custom-lispify "XFetchBuffer" 'function)) string-or-ptr
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XFetchBuffer" 'function))

(cffi:defcfun ("XGetAtomName" #.(custom-lispify "XGetAtomName" 'function)) string-or-ptr
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XGetAtomName" 'function))

(cffi:defcfun ("XGetAtomNames" #.(custom-lispify "XGetAtomNames" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetAtomNames" 'function))

(cffi:defcfun ("XGetDefault" #.(custom-lispify "XGetDefault" 'function)) string-or-ptr
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 string-or-ptr))

(cl:export '#.(custom-lispify "XGetDefault" 'function))

(cffi:defcfun ("XDisplayName" #.(custom-lispify "XDisplayName" 'function)) string-or-ptr
  (arg0 string-or-ptr))

(cl:export '#.(custom-lispify "XDisplayName" 'function))

(cffi:defcfun ("XKeysymToString" #.(custom-lispify "XKeysymToString" 'function)) string-or-ptr
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XKeysymToString" 'function))

(cffi:defcfun ("XSynchronize" #.(custom-lispify "XSynchronize" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XSynchronize" 'function))

(cffi:defcfun ("XSetAfterFunction" #.(custom-lispify "XSetAfterFunction" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XSetAfterFunction" 'function))

(cffi:defcfun ("XInternAtom" #.(custom-lispify "XInternAtom" 'function)) :pointer
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int))

(cl:export '#.(custom-lispify "XInternAtom" 'function))

(cffi:defcfun ("XInternAtoms" #.(custom-lispify "XInternAtoms" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XInternAtoms" 'function))

(cffi:defcfun ("XCopyColormapAndFree" #.(custom-lispify "XCopyColormapAndFree" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XCopyColormapAndFree" 'function))

(cffi:defcfun ("XCreateColormap" #.(custom-lispify "XCreateColormap" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :int))

(cl:export '#.(custom-lispify "XCreateColormap" 'function))

(cffi:defcfun ("XCreatePixmapCursor" #.(custom-lispify "XCreatePixmapCursor" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int))

(cl:export '#.(custom-lispify "XCreatePixmapCursor" 'function))

(cffi:defcfun ("XCreateGlyphCursor" #.(custom-lispify "XCreateGlyphCursor" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :unsigned-int)
  (arg4 :unsigned-int)
  (arg5 :pointer)
  (arg6 :pointer))

(cl:export '#.(custom-lispify "XCreateGlyphCursor" 'function))

(cffi:defcfun ("XCreateFontCursor" #.(custom-lispify "XCreateFontCursor" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :unsigned-int))

(cl:export '#.(custom-lispify "XCreateFontCursor" 'function))

(cffi:defcfun ("XLoadFont" #.(custom-lispify "XLoadFont" 'function)) :pointer
  (arg0 :pointer)
  (arg1 string-or-ptr))

(cl:export '#.(custom-lispify "XLoadFont" 'function))

(cffi:defcfun ("XCreateGC" #.(custom-lispify "XCreateGC" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XCreateGC" 'function))

(cffi:defcfun ("XGContextFromGC" #.(custom-lispify "XGContextFromGC" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XGContextFromGC" 'function))

(cffi:defcfun ("XFlushGC" #.(custom-lispify "XFlushGC" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XFlushGC" 'function))

(cffi:defcfun ("XCreatePixmap" #.(custom-lispify "XCreatePixmap" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int)
  (arg4 :unsigned-int))

(cl:export '#.(custom-lispify "XCreatePixmap" 'function))

(cffi:defcfun ("XCreateBitmapFromData" #.(custom-lispify "XCreateBitmapFromData" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 :unsigned-int)
  (arg4 :unsigned-int))

(cl:export '#.(custom-lispify "XCreateBitmapFromData" 'function))

(cffi:defcfun ("XCreatePixmapFromBitmapData" #.(custom-lispify "XCreatePixmapFromBitmapData" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 :unsigned-int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-long)
  (arg6 :unsigned-long)
  (arg7 :unsigned-int))

(cl:export '#.(custom-lispify "XCreatePixmapFromBitmapData" 'function))

(cffi:defcfun ("XCreateSimpleWindow" #.(custom-lispify "XCreateSimpleWindow" 'function)) :unsigned-long
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int)
  (arg7 :unsigned-long)
  (arg8 :unsigned-long))

(cl:export '#.(custom-lispify "XCreateSimpleWindow" 'function))

(cffi:defcfun ("XGetSelectionOwner" #.(custom-lispify "XGetSelectionOwner" 'function)) :unsigned-long
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XGetSelectionOwner" 'function))

(cffi:defcfun ("XCreateWindow" #.(custom-lispify "XCreateWindow" 'function)) :unsigned-long
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int)
  (arg7 :int)
  (arg8 :unsigned-int)
  (arg9 :pointer)
  (arg10 :unsigned-long)
  (arg11 :pointer))

(cl:export '#.(custom-lispify "XCreateWindow" 'function))

(cffi:defcfun ("XListInstalledColormaps" #.(custom-lispify "XListInstalledColormaps" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XListInstalledColormaps" 'function))

(cffi:defcfun ("XListFonts" #.(custom-lispify "XListFonts" 'function)) :pointer
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XListFonts" 'function))

(cffi:defcfun ("XListFontsWithInfo" #.(custom-lispify "XListFontsWithInfo" 'function)) :pointer
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XListFontsWithInfo" 'function))

(cffi:defcfun ("XGetFontPath" #.(custom-lispify "XGetFontPath" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XGetFontPath" 'function))

(cffi:defcfun ("XListExtensions" #.(custom-lispify "XListExtensions" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XListExtensions" 'function))

(cffi:defcfun ("XListProperties" #.(custom-lispify "XListProperties" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XListProperties" 'function))

(cffi:defcfun ("XListHosts" #.(custom-lispify "XListHosts" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XListHosts" 'function))

(cffi:defcfun ("XKeycodeToKeysym" #.(custom-lispify "XKeycodeToKeysym" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XKeycodeToKeysym" 'function))

(cffi:defcfun ("XLookupKeysym" #.(custom-lispify "XLookupKeysym" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XLookupKeysym" 'function))

(cffi:defcfun ("XGetKeyboardMapping" #.(custom-lispify "XGetKeyboardMapping" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetKeyboardMapping" 'function))

(cffi:defcfun ("XStringToKeysym" #.(custom-lispify "XStringToKeysym" 'function)) :pointer
  (arg0 string-or-ptr))

(cl:export '#.(custom-lispify "XStringToKeysym" 'function))

(cffi:defcfun ("XMaxRequestSize" #.(custom-lispify "XMaxRequestSize" 'function)) :long
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XMaxRequestSize" 'function))

(cffi:defcfun ("XExtendedMaxRequestSize" #.(custom-lispify "XExtendedMaxRequestSize" 'function)) :long
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XExtendedMaxRequestSize" 'function))

(cffi:defcfun ("XResourceManagerString" #.(custom-lispify "XResourceManagerString" 'function)) string-or-ptr
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XResourceManagerString" 'function))

(cffi:defcfun ("XScreenResourceString" #.(custom-lispify "XScreenResourceString" 'function)) string-or-ptr
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XScreenResourceString" 'function))

(cffi:defcfun ("XDisplayMotionBufferSize" #.(custom-lispify "XDisplayMotionBufferSize" 'function)) :unsigned-long
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDisplayMotionBufferSize" 'function))

(cffi:defcfun ("XVisualIDFromVisual" #.(custom-lispify "XVisualIDFromVisual" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XVisualIDFromVisual" 'function))

(cffi:defcfun ("XInitThreads" #.(custom-lispify "XInitThreads" 'function)) :int)

(cl:export '#.(custom-lispify "XInitThreads" 'function))

(cffi:defcfun ("XLockDisplay" #.(custom-lispify "XLockDisplay" 'function)) :void
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XLockDisplay" 'function))

(cffi:defcfun ("XUnlockDisplay" #.(custom-lispify "XUnlockDisplay" 'function)) :void
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XUnlockDisplay" 'function))

(cffi:defcfun ("XInitExtension" #.(custom-lispify "XInitExtension" 'function)) :pointer
  (arg0 :pointer)
  (arg1 string-or-ptr))

(cl:export '#.(custom-lispify "XInitExtension" 'function))

(cffi:defcfun ("XAddExtension" #.(custom-lispify "XAddExtension" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XAddExtension" 'function))

(cffi:defcfun ("XFindOnExtensionList" #.(custom-lispify "XFindOnExtensionList" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XFindOnExtensionList" 'function))

(cffi:defcfun ("XEHeadOfExtensionList" #.(custom-lispify "XEHeadOfExtensionList" 'function)) :pointer
  (arg0 #.(custom-lispify "XEDataObject" 'unionname)))

(cl:export '#.(custom-lispify "XEHeadOfExtensionList" 'function))

(cffi:defcfun ("XRootWindow" #.(custom-lispify "XRootWindow" 'function)) :unsigned-long
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XRootWindow" 'function))

(cffi:defcfun ("XDefaultRootWindow" #.(custom-lispify "XDefaultRootWindow" 'function)) :unsigned-long
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDefaultRootWindow" 'function))

(cffi:defcfun ("XRootWindowOfScreen" #.(custom-lispify "XRootWindowOfScreen" 'function)) :unsigned-long
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XRootWindowOfScreen" 'function))

(cffi:defcfun ("XDefaultVisual" #.(custom-lispify "XDefaultVisual" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XDefaultVisual" 'function))

(cffi:defcfun ("XDefaultVisualOfScreen" #.(custom-lispify "XDefaultVisualOfScreen" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDefaultVisualOfScreen" 'function))

(cffi:defcfun ("XDefaultGC" #.(custom-lispify "XDefaultGC" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XDefaultGC" 'function))

(cffi:defcfun ("XDefaultGCOfScreen" #.(custom-lispify "XDefaultGCOfScreen" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDefaultGCOfScreen" 'function))

(cffi:defcfun ("XBlackPixel" #.(custom-lispify "XBlackPixel" 'function)) :unsigned-long
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XBlackPixel" 'function))

(cffi:defcfun ("XWhitePixel" #.(custom-lispify "XWhitePixel" 'function)) :unsigned-long
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XWhitePixel" 'function))

(cffi:defcfun ("XAllPlanes" #.(custom-lispify "XAllPlanes" 'function)) :unsigned-long)

(cl:export '#.(custom-lispify "XAllPlanes" 'function))

(cffi:defcfun ("XBlackPixelOfScreen" #.(custom-lispify "XBlackPixelOfScreen" 'function)) :unsigned-long
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XBlackPixelOfScreen" 'function))

(cffi:defcfun ("XWhitePixelOfScreen" #.(custom-lispify "XWhitePixelOfScreen" 'function)) :unsigned-long
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XWhitePixelOfScreen" 'function))

(cffi:defcfun ("XNextRequest" #.(custom-lispify "XNextRequest" 'function)) :unsigned-long
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XNextRequest" 'function))

(cffi:defcfun ("XLastKnownRequestProcessed" #.(custom-lispify "XLastKnownRequestProcessed" 'function)) :unsigned-long
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XLastKnownRequestProcessed" 'function))

(cffi:defcfun ("XServerVendor" #.(custom-lispify "XServerVendor" 'function)) string-or-ptr
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XServerVendor" 'function))

(cffi:defcfun ("XDisplayString" #.(custom-lispify "XDisplayString" 'function)) string-or-ptr
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDisplayString" 'function))

(cffi:defcfun ("XDefaultColormap" #.(custom-lispify "XDefaultColormap" 'function)) :unsigned-long
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XDefaultColormap" 'function))

(cffi:defcfun ("XDefaultColormapOfScreen" #.(custom-lispify "XDefaultColormapOfScreen" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDefaultColormapOfScreen" 'function))

(cffi:defcfun ("XDisplayOfScreen" #.(custom-lispify "XDisplayOfScreen" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDisplayOfScreen" 'function))

(cffi:defcfun ("XScreenOfDisplay" #.(custom-lispify "XScreenOfDisplay" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XScreenOfDisplay" 'function))

(cffi:defcfun ("XDefaultScreenOfDisplay" #.(custom-lispify "XDefaultScreenOfDisplay" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDefaultScreenOfDisplay" 'function))

(cffi:defcfun ("XEventMaskOfScreen" #.(custom-lispify "XEventMaskOfScreen" 'function)) :long
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XEventMaskOfScreen" 'function))

(cffi:defcfun ("XScreenNumberOfScreen" #.(custom-lispify "XScreenNumberOfScreen" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XScreenNumberOfScreen" 'function))

(cffi:defctype #.(custom-lispify "XErrorHandler" 'typename) :pointer)

(cl:export '#.(custom-lispify "XErrorHandler" 'typename))

(cffi:defcfun ("XSetErrorHandler" #.(custom-lispify "XSetErrorHandler" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XSetErrorHandler" 'function))

(cffi:defctype #.(custom-lispify "XIOErrorHandler" 'typename) :pointer)

(cl:export '#.(custom-lispify "XIOErrorHandler" 'typename))

(cffi:defcfun ("XSetIOErrorHandler" #.(custom-lispify "XSetIOErrorHandler" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XSetIOErrorHandler" 'function))

(cffi:defcfun ("XListPixmapFormats" #.(custom-lispify "XListPixmapFormats" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XListPixmapFormats" 'function))

(cffi:defcfun ("XListDepths" #.(custom-lispify "XListDepths" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XListDepths" 'function))

(cffi:defcfun ("XReconfigureWMWindow" #.(custom-lispify "XReconfigureWMWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :unsigned-int)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XReconfigureWMWindow" 'function))

(cffi:defcfun ("XGetWMProtocols" #.(custom-lispify "XGetWMProtocols" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetWMProtocols" 'function))

(cffi:defcfun ("XSetWMProtocols" #.(custom-lispify "XSetWMProtocols" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :int))

(cl:export '#.(custom-lispify "XSetWMProtocols" 'function))

(cffi:defcfun ("XIconifyWindow" #.(custom-lispify "XIconifyWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int))

(cl:export '#.(custom-lispify "XIconifyWindow" 'function))

(cffi:defcfun ("XWithdrawWindow" #.(custom-lispify "XWithdrawWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int))

(cl:export '#.(custom-lispify "XWithdrawWindow" 'function))

(cffi:defcfun ("XGetCommand" #.(custom-lispify "XGetCommand" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetCommand" 'function))

(cffi:defcfun ("XGetWMColormapWindows" #.(custom-lispify "XGetWMColormapWindows" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetWMColormapWindows" 'function))

(cffi:defcfun ("XSetWMColormapWindows" #.(custom-lispify "XSetWMColormapWindows" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :int))

(cl:export '#.(custom-lispify "XSetWMColormapWindows" 'function))

(cffi:defcfun ("XFreeStringList" #.(custom-lispify "XFreeStringList" 'function)) :void
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XFreeStringList" 'function))

(cffi:defcfun ("XSetTransientForHint" #.(custom-lispify "XSetTransientForHint" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :unsigned-long))

(cl:export '#.(custom-lispify "XSetTransientForHint" 'function))

(cffi:defcfun ("XActivateScreenSaver" #.(custom-lispify "XActivateScreenSaver" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XActivateScreenSaver" 'function))

(cffi:defcfun ("XAddHost" #.(custom-lispify "XAddHost" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XAddHost" 'function))

(cffi:defcfun ("XAddHosts" #.(custom-lispify "XAddHosts" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XAddHosts" 'function))

(cffi:defcfun ("XAddToExtensionList" #.(custom-lispify "XAddToExtensionList" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XAddToExtensionList" 'function))

(cffi:defcfun ("XAddToSaveSet" #.(custom-lispify "XAddToSaveSet" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XAddToSaveSet" 'function))

(cffi:defcfun ("XAllocColor" #.(custom-lispify "XAllocColor" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XAllocColor" 'function))

(cffi:defcfun ("XAllocColorCells" #.(custom-lispify "XAllocColorCells" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :unsigned-int)
  (arg5 :pointer)
  (arg6 :unsigned-int))

(cl:export '#.(custom-lispify "XAllocColorCells" 'function))

(cffi:defcfun ("XAllocColorPlanes" #.(custom-lispify "XAllocColorPlanes" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :int)
  (arg7 :int)
  (arg8 :pointer)
  (arg9 :pointer)
  (arg10 :pointer))

(cl:export '#.(custom-lispify "XAllocColorPlanes" 'function))

(cffi:defcfun ("XAllocNamedColor" #.(custom-lispify "XAllocNamedColor" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XAllocNamedColor" 'function))

(cffi:defcfun ("XAllowEvents" #.(custom-lispify "XAllowEvents" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XAllowEvents" 'function))

(cffi:defcfun ("XAutoRepeatOff" #.(custom-lispify "XAutoRepeatOff" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XAutoRepeatOff" 'function))

(cffi:defcfun ("XAutoRepeatOn" #.(custom-lispify "XAutoRepeatOn" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XAutoRepeatOn" 'function))

(cffi:defcfun ("XBell" #.(custom-lispify "XBell" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XBell" 'function))

(cffi:defcfun ("XBitmapBitOrder" #.(custom-lispify "XBitmapBitOrder" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XBitmapBitOrder" 'function))

(cffi:defcfun ("XBitmapPad" #.(custom-lispify "XBitmapPad" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XBitmapPad" 'function))

(cffi:defcfun ("XBitmapUnit" #.(custom-lispify "XBitmapUnit" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XBitmapUnit" 'function))

(cffi:defcfun ("XCellsOfScreen" #.(custom-lispify "XCellsOfScreen" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XCellsOfScreen" 'function))

(cffi:defcfun ("XChangeActivePointerGrab" #.(custom-lispify "XChangeActivePointerGrab" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-int)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XChangeActivePointerGrab" 'function))

(cffi:defcfun ("XChangeGC" #.(custom-lispify "XChangeGC" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XChangeGC" 'function))

(cffi:defcfun ("XChangeKeyboardControl" #.(custom-lispify "XChangeKeyboardControl" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XChangeKeyboardControl" 'function))

(cffi:defcfun ("XChangeKeyboardMapping" #.(custom-lispify "XChangeKeyboardMapping" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :int))

(cl:export '#.(custom-lispify "XChangeKeyboardMapping" 'function))

(cffi:defcfun ("XChangePointerControl" #.(custom-lispify "XChangePointerControl" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :int)
  (arg4 :int)
  (arg5 :int))

(cl:export '#.(custom-lispify "XChangePointerControl" 'function))

(cffi:defcfun ("XChangeProperty" #.(custom-lispify "XChangeProperty" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :int))

(cl:export '#.(custom-lispify "XChangeProperty" 'function))

(cffi:defcfun ("XChangeSaveSet" #.(custom-lispify "XChangeSaveSet" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int))

(cl:export '#.(custom-lispify "XChangeSaveSet" 'function))

(cffi:defcfun ("XChangeWindowAttributes" #.(custom-lispify "XChangeWindowAttributes" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :unsigned-long)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XChangeWindowAttributes" 'function))

(cffi:defcfun ("XCheckIfEvent" #.(custom-lispify "XCheckIfEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 string-or-ptr))

(cl:export '#.(custom-lispify "XCheckIfEvent" 'function))

(cffi:defcfun ("XCheckMaskEvent" #.(custom-lispify "XCheckMaskEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XCheckMaskEvent" 'function))

(cffi:defcfun ("XCheckTypedEvent" #.(custom-lispify "XCheckTypedEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XCheckTypedEvent" 'function))

(cffi:defcfun ("XCheckTypedWindowEvent" #.(custom-lispify "XCheckTypedWindowEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XCheckTypedWindowEvent" 'function))

(cffi:defcfun ("XCheckWindowEvent" #.(custom-lispify "XCheckWindowEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :long)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XCheckWindowEvent" 'function))

(cffi:defcfun ("XCirculateSubwindows" #.(custom-lispify "XCirculateSubwindows" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int))

(cl:export '#.(custom-lispify "XCirculateSubwindows" 'function))

(cffi:defcfun ("XCirculateSubwindowsDown" #.(custom-lispify "XCirculateSubwindowsDown" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XCirculateSubwindowsDown" 'function))

(cffi:defcfun ("XCirculateSubwindowsUp" #.(custom-lispify "XCirculateSubwindowsUp" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XCirculateSubwindowsUp" 'function))

(cffi:defcfun ("XClearArea" #.(custom-lispify "XClearArea" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int)
  (arg6 :int))

(cl:export '#.(custom-lispify "XClearArea" 'function))

(cffi:defcfun ("XClearWindow" #.(custom-lispify "XClearWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XClearWindow" 'function))

(cffi:defcfun ("XCloseDisplay" #.(custom-lispify "XCloseDisplay" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XCloseDisplay" 'function))

(cffi:defcfun ("XConfigureWindow" #.(custom-lispify "XConfigureWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :unsigned-int)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XConfigureWindow" 'function))

(cffi:defcfun ("XConnectionNumber" #.(custom-lispify "XConnectionNumber" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XConnectionNumber" 'function))

(cffi:defcfun ("XConvertSelection" #.(custom-lispify "XConvertSelection" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :unsigned-long)
  (arg5 :pointer))

(cl:export '#.(custom-lispify "XConvertSelection" 'function))

(cffi:defcfun ("XCopyArea" #.(custom-lispify "XCopyArea" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :unsigned-int)
  (arg7 :unsigned-int)
  (arg8 :int)
  (arg9 :int))

(cl:export '#.(custom-lispify "XCopyArea" 'function))

(cffi:defcfun ("XCopyGC" #.(custom-lispify "XCopyGC" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XCopyGC" 'function))

(cffi:defcfun ("XCopyPlane" #.(custom-lispify "XCopyPlane" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :unsigned-int)
  (arg7 :unsigned-int)
  (arg8 :int)
  (arg9 :int)
  (arg10 :unsigned-long))

(cl:export '#.(custom-lispify "XCopyPlane" 'function))

(cffi:defcfun ("XDefaultDepth" #.(custom-lispify "XDefaultDepth" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XDefaultDepth" 'function))

(cffi:defcfun ("XDefaultDepthOfScreen" #.(custom-lispify "XDefaultDepthOfScreen" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDefaultDepthOfScreen" 'function))

(cffi:defcfun ("XDefaultScreen" #.(custom-lispify "XDefaultScreen" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDefaultScreen" 'function))

(cffi:defcfun ("XDefineCursor" #.(custom-lispify "XDefineCursor" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XDefineCursor" 'function))

(cffi:defcfun ("XDeleteProperty" #.(custom-lispify "XDeleteProperty" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XDeleteProperty" 'function))

(cffi:defcfun ("XDestroyWindow" #.(custom-lispify "XDestroyWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XDestroyWindow" 'function))

(cffi:defcfun ("XDestroySubwindows" #.(custom-lispify "XDestroySubwindows" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XDestroySubwindows" 'function))

(cffi:defcfun ("XDoesBackingStore" #.(custom-lispify "XDoesBackingStore" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDoesBackingStore" 'function))

(cffi:defcfun ("XDoesSaveUnders" #.(custom-lispify "XDoesSaveUnders" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDoesSaveUnders" 'function))

(cffi:defcfun ("XDisableAccessControl" #.(custom-lispify "XDisableAccessControl" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDisableAccessControl" 'function))

(cffi:defcfun ("XDisplayCells" #.(custom-lispify "XDisplayCells" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XDisplayCells" 'function))

(cffi:defcfun ("XDisplayHeight" #.(custom-lispify "XDisplayHeight" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XDisplayHeight" 'function))

(cffi:defcfun ("XDisplayHeightMM" #.(custom-lispify "XDisplayHeightMM" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XDisplayHeightMM" 'function))

(cffi:defcfun ("XDisplayKeycodes" #.(custom-lispify "XDisplayKeycodes" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XDisplayKeycodes" 'function))

(cffi:defcfun ("XDisplayPlanes" #.(custom-lispify "XDisplayPlanes" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XDisplayPlanes" 'function))

(cffi:defcfun ("XDisplayWidth" #.(custom-lispify "XDisplayWidth" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XDisplayWidth" 'function))

(cffi:defcfun ("XDisplayWidthMM" #.(custom-lispify "XDisplayWidthMM" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XDisplayWidthMM" 'function))

(cffi:defcfun ("XDrawArc" #.(custom-lispify "XDrawArc" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int)
  (arg7 :int)
  (arg8 :int))

(cl:export '#.(custom-lispify "XDrawArc" 'function))

(cffi:defcfun ("XDrawArcs" #.(custom-lispify "XDrawArcs" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int))

(cl:export '#.(custom-lispify "XDrawArcs" 'function))

(cffi:defcfun ("XDrawImageString" #.(custom-lispify "XDrawImageString" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 string-or-ptr)
  (arg6 :int))

(cl:export '#.(custom-lispify "XDrawImageString" 'function))

(cffi:defcfun ("XDrawImageString16" #.(custom-lispify "XDrawImageString16" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cl:export '#.(custom-lispify "XDrawImageString16" 'function))

(cffi:defcfun ("XDrawLine" #.(custom-lispify "XDrawLine" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :int)
  (arg6 :int))

(cl:export '#.(custom-lispify "XDrawLine" 'function))

(cffi:defcfun ("XDrawLines" #.(custom-lispify "XDrawLines" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int))

(cl:export '#.(custom-lispify "XDrawLines" 'function))

(cffi:defcfun ("XDrawPoint" #.(custom-lispify "XDrawPoint" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int))

(cl:export '#.(custom-lispify "XDrawPoint" 'function))

(cffi:defcfun ("XDrawPoints" #.(custom-lispify "XDrawPoints" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int))

(cl:export '#.(custom-lispify "XDrawPoints" 'function))

(cffi:defcfun ("XDrawRectangle" #.(custom-lispify "XDrawRectangle" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int))

(cl:export '#.(custom-lispify "XDrawRectangle" 'function))

(cffi:defcfun ("XDrawRectangles" #.(custom-lispify "XDrawRectangles" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int))

(cl:export '#.(custom-lispify "XDrawRectangles" 'function))

(cffi:defcfun ("XDrawSegments" #.(custom-lispify "XDrawSegments" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int))

(cl:export '#.(custom-lispify "XDrawSegments" 'function))

(cffi:defcfun ("XDrawString" #.(custom-lispify "XDrawString" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 string-or-ptr)
  (arg6 :int))

(cl:export '#.(custom-lispify "XDrawString" 'function))

(cffi:defcfun ("XDrawString16" #.(custom-lispify "XDrawString16" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cl:export '#.(custom-lispify "XDrawString16" 'function))

(cffi:defcfun ("XDrawText" #.(custom-lispify "XDrawText" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cl:export '#.(custom-lispify "XDrawText" 'function))

(cffi:defcfun ("XDrawText16" #.(custom-lispify "XDrawText16" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cl:export '#.(custom-lispify "XDrawText16" 'function))

(cffi:defcfun ("XEnableAccessControl" #.(custom-lispify "XEnableAccessControl" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XEnableAccessControl" 'function))

(cffi:defcfun ("XEventsQueued" #.(custom-lispify "XEventsQueued" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XEventsQueued" 'function))

(cffi:defcfun ("XFetchName" #.(custom-lispify "XFetchName" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XFetchName" 'function))

(cffi:defcfun ("XFillArc" #.(custom-lispify "XFillArc" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int)
  (arg7 :int)
  (arg8 :int))

(cl:export '#.(custom-lispify "XFillArc" 'function))

(cffi:defcfun ("XFillArcs" #.(custom-lispify "XFillArcs" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int))

(cl:export '#.(custom-lispify "XFillArcs" 'function))

(cffi:defcfun ("XFillPolygon" #.(custom-lispify "XFillPolygon" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :int))

(cl:export '#.(custom-lispify "XFillPolygon" 'function))

(cffi:defcfun ("XFillRectangle" #.(custom-lispify "XFillRectangle" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int))

(cl:export '#.(custom-lispify "XFillRectangle" 'function))

(cffi:defcfun ("XFillRectangles" #.(custom-lispify "XFillRectangles" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int))

(cl:export '#.(custom-lispify "XFillRectangles" 'function))

(cffi:defcfun ("XFlush" #.(custom-lispify "XFlush" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XFlush" 'function))

(cffi:defcfun ("XForceScreenSaver" #.(custom-lispify "XForceScreenSaver" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XForceScreenSaver" 'function))

(cffi:defcfun ("XFree" #.(custom-lispify "XFree" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XFree" 'function))

(cffi:defcfun ("XFreeColormap" #.(custom-lispify "XFreeColormap" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XFreeColormap" 'function))

(cffi:defcfun ("XFreeColors" #.(custom-lispify "XFreeColors" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :unsigned-long))

(cl:export '#.(custom-lispify "XFreeColors" 'function))

(cffi:defcfun ("XFreeCursor" #.(custom-lispify "XFreeCursor" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XFreeCursor" 'function))

(cffi:defcfun ("XFreeExtensionList" #.(custom-lispify "XFreeExtensionList" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XFreeExtensionList" 'function))

(cffi:defcfun ("XFreeFont" #.(custom-lispify "XFreeFont" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XFreeFont" 'function))

(cffi:defcfun ("XFreeFontInfo" #.(custom-lispify "XFreeFontInfo" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XFreeFontInfo" 'function))

(cffi:defcfun ("XFreeFontNames" #.(custom-lispify "XFreeFontNames" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XFreeFontNames" 'function))

(cffi:defcfun ("XFreeFontPath" #.(custom-lispify "XFreeFontPath" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XFreeFontPath" 'function))

(cffi:defcfun ("XFreeGC" #.(custom-lispify "XFreeGC" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XFreeGC" 'function))

(cffi:defcfun ("XFreeModifiermap" #.(custom-lispify "XFreeModifiermap" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XFreeModifiermap" 'function))

(cffi:defcfun ("XFreePixmap" #.(custom-lispify "XFreePixmap" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XFreePixmap" 'function))

(cffi:defcfun ("XGeometry" #.(custom-lispify "XGeometry" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 string-or-ptr)
  (arg3 string-or-ptr)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int)
  (arg7 :int)
  (arg8 :int)
  (arg9 :pointer)
  (arg10 :pointer)
  (arg11 :pointer)
  (arg12 :pointer))

(cl:export '#.(custom-lispify "XGeometry" 'function))

(cffi:defcfun ("XGetErrorDatabaseText" #.(custom-lispify "XGetErrorDatabaseText" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 string-or-ptr)
  (arg3 string-or-ptr)
  (arg4 string-or-ptr)
  (arg5 :int))

(cl:export '#.(custom-lispify "XGetErrorDatabaseText" 'function))

(cffi:defcfun ("XGetErrorText" #.(custom-lispify "XGetErrorText" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 string-or-ptr)
  (arg3 :int))

(cl:export '#.(custom-lispify "XGetErrorText" 'function))

(cffi:defcfun ("XGetFontProperty" #.(custom-lispify "XGetFontProperty" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XGetFontProperty" 'function))

(cffi:defcfun ("XGetGCValues" #.(custom-lispify "XGetGCValues" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetGCValues" 'function))

(cffi:defcfun ("XGetGeometry" #.(custom-lispify "XGetGeometry" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cl:export '#.(custom-lispify "XGetGeometry" 'function))

(cffi:defcfun ("XGetIconName" #.(custom-lispify "XGetIconName" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XGetIconName" 'function))

(cffi:defcfun ("XGetInputFocus" #.(custom-lispify "XGetInputFocus" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XGetInputFocus" 'function))

(cffi:defcfun ("XGetKeyboardControl" #.(custom-lispify "XGetKeyboardControl" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XGetKeyboardControl" 'function))

(cffi:defcfun ("XGetPointerControl" #.(custom-lispify "XGetPointerControl" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetPointerControl" 'function))

(cffi:defcfun ("XGetPointerMapping" #.(custom-lispify "XGetPointerMapping" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XGetPointerMapping" 'function))

(cffi:defcfun ("XGetScreenSaver" #.(custom-lispify "XGetScreenSaver" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XGetScreenSaver" 'function))

(cffi:defcfun ("XGetTransientForHint" #.(custom-lispify "XGetTransientForHint" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XGetTransientForHint" 'function))

(cffi:defcfun ("XGetWindowProperty" #.(custom-lispify "XGetWindowProperty" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :long)
  (arg4 :long)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer)
  (arg9 :pointer)
  (arg10 :pointer)
  (arg11 :pointer))

(cl:export '#.(custom-lispify "XGetWindowProperty" 'function))

(cffi:defcfun ("XGetWindowAttributes" #.(custom-lispify "XGetWindowAttributes" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XGetWindowAttributes" 'function))

(cffi:defcfun ("XGrabButton" #.(custom-lispify "XGrabButton" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-int)
  (arg2 :unsigned-int)
  (arg3 :unsigned-long)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :int)
  (arg7 :int)
  (arg8 :unsigned-long)
  (arg9 :pointer))

(cl:export '#.(custom-lispify "XGrabButton" 'function))

(cffi:defcfun ("XGrabKey" #.(custom-lispify "XGrabKey" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :unsigned-int)
  (arg3 :unsigned-long)
  (arg4 :int)
  (arg5 :int)
  (arg6 :int))

(cl:export '#.(custom-lispify "XGrabKey" 'function))

(cffi:defcfun ("XGrabKeyboard" #.(custom-lispify "XGrabKeyboard" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer))

(cl:export '#.(custom-lispify "XGrabKeyboard" 'function))

(cffi:defcfun ("XGrabPointer" #.(custom-lispify "XGrabPointer" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :unsigned-int)
  (arg4 :int)
  (arg5 :int)
  (arg6 :unsigned-long)
  (arg7 :pointer)
  (arg8 :pointer))

(cl:export '#.(custom-lispify "XGrabPointer" 'function))

(cffi:defcfun ("XGrabServer" #.(custom-lispify "XGrabServer" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XGrabServer" 'function))

(cffi:defcfun ("XHeightMMOfScreen" #.(custom-lispify "XHeightMMOfScreen" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XHeightMMOfScreen" 'function))

(cffi:defcfun ("XHeightOfScreen" #.(custom-lispify "XHeightOfScreen" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XHeightOfScreen" 'function))

(cffi:defcfun ("XIfEvent" #.(custom-lispify "XIfEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 string-or-ptr))

(cl:export '#.(custom-lispify "XIfEvent" 'function))

(cffi:defcfun ("XImageByteOrder" #.(custom-lispify "XImageByteOrder" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XImageByteOrder" 'function))

(cffi:defcfun ("XInstallColormap" #.(custom-lispify "XInstallColormap" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XInstallColormap" 'function))

(cffi:defcfun ("XKeysymToKeycode" #.(custom-lispify "XKeysymToKeycode" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XKeysymToKeycode" 'function))

(cffi:defcfun ("XKillClient" #.(custom-lispify "XKillClient" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XKillClient" 'function))

(cffi:defcfun ("XLookupColor" #.(custom-lispify "XLookupColor" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XLookupColor" 'function))

(cffi:defcfun ("XLowerWindow" #.(custom-lispify "XLowerWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XLowerWindow" 'function))

(cffi:defcfun ("XMapRaised" #.(custom-lispify "XMapRaised" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XMapRaised" 'function))

(cffi:defcfun ("XMapSubwindows" #.(custom-lispify "XMapSubwindows" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XMapSubwindows" 'function))

(cffi:defcfun ("XMapWindow" #.(custom-lispify "XMapWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XMapWindow" 'function))

(cffi:defcfun ("XMaskEvent" #.(custom-lispify "XMaskEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XMaskEvent" 'function))

(cffi:defcfun ("XMaxCmapsOfScreen" #.(custom-lispify "XMaxCmapsOfScreen" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XMaxCmapsOfScreen" 'function))

(cffi:defcfun ("XMinCmapsOfScreen" #.(custom-lispify "XMinCmapsOfScreen" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XMinCmapsOfScreen" 'function))

(cffi:defcfun ("XMoveResizeWindow" #.(custom-lispify "XMoveResizeWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int))

(cl:export '#.(custom-lispify "XMoveResizeWindow" 'function))

(cffi:defcfun ("XMoveWindow" #.(custom-lispify "XMoveWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :int))

(cl:export '#.(custom-lispify "XMoveWindow" 'function))

(cffi:defcfun ("XNextEvent" #.(custom-lispify "XNextEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XNextEvent" 'function))

(cffi:defcfun ("XNoOp" #.(custom-lispify "XNoOp" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XNoOp" 'function))

(cffi:defcfun ("XParseColor" #.(custom-lispify "XParseColor" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XParseColor" 'function))

(cffi:defcfun ("XParseGeometry" #.(custom-lispify "XParseGeometry" 'function)) :int
  (arg0 string-or-ptr)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XParseGeometry" 'function))

(cffi:defcfun ("XPeekEvent" #.(custom-lispify "XPeekEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XPeekEvent" 'function))

(cffi:defcfun ("XPeekIfEvent" #.(custom-lispify "XPeekIfEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 string-or-ptr))

(cl:export '#.(custom-lispify "XPeekIfEvent" 'function))

(cffi:defcfun ("XPending" #.(custom-lispify "XPending" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XPending" 'function))

(cffi:defcfun ("XPlanesOfScreen" #.(custom-lispify "XPlanesOfScreen" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XPlanesOfScreen" 'function))

(cffi:defcfun ("XProtocolRevision" #.(custom-lispify "XProtocolRevision" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XProtocolRevision" 'function))

(cffi:defcfun ("XProtocolVersion" #.(custom-lispify "XProtocolVersion" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XProtocolVersion" 'function))

(cffi:defcfun ("XPutBackEvent" #.(custom-lispify "XPutBackEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XPutBackEvent" 'function))

(cffi:defcfun ("XPutImage" #.(custom-lispify "XPutImage" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :int)
  (arg7 :int)
  (arg8 :unsigned-int)
  (arg9 :unsigned-int))

(cl:export '#.(custom-lispify "XPutImage" 'function))

(cffi:defcfun ("XQLength" #.(custom-lispify "XQLength" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XQLength" 'function))

(cffi:defcfun ("XQueryBestCursor" #.(custom-lispify "XQueryBestCursor" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int)
  (arg4 :pointer)
  (arg5 :pointer))

(cl:export '#.(custom-lispify "XQueryBestCursor" 'function))

(cffi:defcfun ("XQueryBestSize" #.(custom-lispify "XQueryBestSize" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :pointer)
  (arg3 :unsigned-int)
  (arg4 :unsigned-int)
  (arg5 :pointer)
  (arg6 :pointer))

(cl:export '#.(custom-lispify "XQueryBestSize" 'function))

(cffi:defcfun ("XQueryBestStipple" #.(custom-lispify "XQueryBestStipple" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int)
  (arg4 :pointer)
  (arg5 :pointer))

(cl:export '#.(custom-lispify "XQueryBestStipple" 'function))

(cffi:defcfun ("XQueryBestTile" #.(custom-lispify "XQueryBestTile" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int)
  (arg4 :pointer)
  (arg5 :pointer))

(cl:export '#.(custom-lispify "XQueryBestTile" 'function))

(cffi:defcfun ("XQueryColor" #.(custom-lispify "XQueryColor" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XQueryColor" 'function))

(cffi:defcfun ("XQueryColors" #.(custom-lispify "XQueryColors" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int))

(cl:export '#.(custom-lispify "XQueryColors" 'function))

(cffi:defcfun ("XQueryExtension" #.(custom-lispify "XQueryExtension" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XQueryExtension" 'function))

(cffi:defcfun ("XQueryKeymap" #.(custom-lispify "XQueryKeymap" 'function)) :int
  (arg0 :pointer)
  (arg1 :char :count 32))

(cl:export '#.(custom-lispify "XQueryKeymap" 'function))

(cffi:defcfun ("XQueryPointer" #.(custom-lispify "XQueryPointer" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cl:export '#.(custom-lispify "XQueryPointer" 'function))

(cffi:defcfun ("XQueryTextExtents" #.(custom-lispify "XQueryTextExtents" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 string-or-ptr)
  (arg3 :int)
  (arg4 :pointer)
  (arg5 :pointer)
  (arg6 :pointer)
  (arg7 :pointer))

(cl:export '#.(custom-lispify "XQueryTextExtents" 'function))

(cffi:defcfun ("XQueryTextExtents16" #.(custom-lispify "XQueryTextExtents16" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :pointer)
  (arg5 :pointer)
  (arg6 :pointer)
  (arg7 :pointer))

(cl:export '#.(custom-lispify "XQueryTextExtents16" 'function))

(cffi:defcfun ("XQueryTree" #.(custom-lispify "XQueryTree" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer))

(cl:export '#.(custom-lispify "XQueryTree" 'function))

(cffi:defcfun ("XRaiseWindow" #.(custom-lispify "XRaiseWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XRaiseWindow" 'function))

(cffi:defcfun ("XReadBitmapFile" #.(custom-lispify "XReadBitmapFile" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer)
  (arg6 :pointer)
  (arg7 :pointer))

(cl:export '#.(custom-lispify "XReadBitmapFile" 'function))

(cffi:defcfun ("XReadBitmapFileData" #.(custom-lispify "XReadBitmapFileData" 'function)) :int
  (arg0 string-or-ptr)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer))

(cl:export '#.(custom-lispify "XReadBitmapFileData" 'function))

(cffi:defcfun ("XRebindKeysym" #.(custom-lispify "XRebindKeysym" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :pointer)
  (arg5 :int))

(cl:export '#.(custom-lispify "XRebindKeysym" 'function))

(cffi:defcfun ("XRecolorCursor" #.(custom-lispify "XRecolorCursor" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XRecolorCursor" 'function))

(cffi:defcfun ("XRefreshKeyboardMapping" #.(custom-lispify "XRefreshKeyboardMapping" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XRefreshKeyboardMapping" 'function))

(cffi:defcfun ("XRemoveFromSaveSet" #.(custom-lispify "XRemoveFromSaveSet" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XRemoveFromSaveSet" 'function))

(cffi:defcfun ("XRemoveHost" #.(custom-lispify "XRemoveHost" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XRemoveHost" 'function))

(cffi:defcfun ("XRemoveHosts" #.(custom-lispify "XRemoveHosts" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XRemoveHosts" 'function))

(cffi:defcfun ("XReparentWindow" #.(custom-lispify "XReparentWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :unsigned-long)
  (arg3 :int)
  (arg4 :int))

(cl:export '#.(custom-lispify "XReparentWindow" 'function))

(cffi:defcfun ("XResetScreenSaver" #.(custom-lispify "XResetScreenSaver" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XResetScreenSaver" 'function))

(cffi:defcfun ("XResizeWindow" #.(custom-lispify "XResizeWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int))

(cl:export '#.(custom-lispify "XResizeWindow" 'function))

(cffi:defcfun ("XRestackWindows" #.(custom-lispify "XRestackWindows" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XRestackWindows" 'function))

(cffi:defcfun ("XRotateBuffers" #.(custom-lispify "XRotateBuffers" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XRotateBuffers" 'function))

(cffi:defcfun ("XRotateWindowProperties" #.(custom-lispify "XRotateWindowProperties" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int))

(cl:export '#.(custom-lispify "XRotateWindowProperties" 'function))

(cffi:defcfun ("XScreenCount" #.(custom-lispify "XScreenCount" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XScreenCount" 'function))

(cffi:defcfun ("XSelectInput" #.(custom-lispify "XSelectInput" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :long))

(cl:export '#.(custom-lispify "XSelectInput" 'function))

(cffi:defcfun ("XSendEvent" #.(custom-lispify "XSendEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :long)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XSendEvent" 'function))

(cffi:defcfun ("XSetAccessControl" #.(custom-lispify "XSetAccessControl" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XSetAccessControl" 'function))

(cffi:defcfun ("XSetArcMode" #.(custom-lispify "XSetArcMode" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XSetArcMode" 'function))

(cffi:defcfun ("XSetBackground" #.(custom-lispify "XSetBackground" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long))

(cl:export '#.(custom-lispify "XSetBackground" 'function))

(cffi:defcfun ("XSetClipMask" #.(custom-lispify "XSetClipMask" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetClipMask" 'function))

(cffi:defcfun ("XSetClipOrigin" #.(custom-lispify "XSetClipOrigin" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int))

(cl:export '#.(custom-lispify "XSetClipOrigin" 'function))

(cffi:defcfun ("XSetClipRectangles" #.(custom-lispify "XSetClipRectangles" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :pointer)
  (arg5 :int)
  (arg6 :int))

(cl:export '#.(custom-lispify "XSetClipRectangles" 'function))

(cffi:defcfun ("XSetCloseDownMode" #.(custom-lispify "XSetCloseDownMode" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XSetCloseDownMode" 'function))

(cffi:defcfun ("XSetCommand" #.(custom-lispify "XSetCommand" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :int))

(cl:export '#.(custom-lispify "XSetCommand" 'function))

(cffi:defcfun ("XSetDashes" #.(custom-lispify "XSetDashes" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 string-or-ptr)
  (arg4 :int))

(cl:export '#.(custom-lispify "XSetDashes" 'function))

(cffi:defcfun ("XSetFillRule" #.(custom-lispify "XSetFillRule" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XSetFillRule" 'function))

(cffi:defcfun ("XSetFillStyle" #.(custom-lispify "XSetFillStyle" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XSetFillStyle" 'function))

(cffi:defcfun ("XSetFont" #.(custom-lispify "XSetFont" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetFont" 'function))

(cffi:defcfun ("XSetFontPath" #.(custom-lispify "XSetFontPath" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XSetFontPath" 'function))

(cffi:defcfun ("XSetForeground" #.(custom-lispify "XSetForeground" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long))

(cl:export '#.(custom-lispify "XSetForeground" 'function))

(cffi:defcfun ("XSetFunction" #.(custom-lispify "XSetFunction" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XSetFunction" 'function))

(cffi:defcfun ("XSetGraphicsExposures" #.(custom-lispify "XSetGraphicsExposures" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XSetGraphicsExposures" 'function))

(cffi:defcfun ("XSetIconName" #.(custom-lispify "XSetIconName" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 string-or-ptr))

(cl:export '#.(custom-lispify "XSetIconName" 'function))

(cffi:defcfun ("XSetInputFocus" #.(custom-lispify "XSetInputFocus" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XSetInputFocus" 'function))

(cffi:defcfun ("XSetLineAttributes" #.(custom-lispify "XSetLineAttributes" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :int)
  (arg4 :int)
  (arg5 :int))

(cl:export '#.(custom-lispify "XSetLineAttributes" 'function))

(cffi:defcfun ("XSetModifierMapping" #.(custom-lispify "XSetModifierMapping" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XSetModifierMapping" 'function))

(cffi:defcfun ("XSetPlaneMask" #.(custom-lispify "XSetPlaneMask" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long))

(cl:export '#.(custom-lispify "XSetPlaneMask" 'function))

(cffi:defcfun ("XSetPointerMapping" #.(custom-lispify "XSetPointerMapping" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XSetPointerMapping" 'function))

(cffi:defcfun ("XSetScreenSaver" #.(custom-lispify "XSetScreenSaver" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :int)
  (arg4 :int))

(cl:export '#.(custom-lispify "XSetScreenSaver" 'function))

(cffi:defcfun ("XSetSelectionOwner" #.(custom-lispify "XSetSelectionOwner" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XSetSelectionOwner" 'function))

(cffi:defcfun ("XSetState" #.(custom-lispify "XSetState" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :unsigned-long)
  (arg4 :int)
  (arg5 :unsigned-long))

(cl:export '#.(custom-lispify "XSetState" 'function))

(cffi:defcfun ("XSetStipple" #.(custom-lispify "XSetStipple" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetStipple" 'function))

(cffi:defcfun ("XSetSubwindowMode" #.(custom-lispify "XSetSubwindowMode" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XSetSubwindowMode" 'function))

(cffi:defcfun ("XSetTSOrigin" #.(custom-lispify "XSetTSOrigin" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int))

(cl:export '#.(custom-lispify "XSetTSOrigin" 'function))

(cffi:defcfun ("XSetTile" #.(custom-lispify "XSetTile" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetTile" 'function))

(cffi:defcfun ("XSetWindowBackground" #.(custom-lispify "XSetWindowBackground" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :unsigned-long))

(cl:export '#.(custom-lispify "XSetWindowBackground" 'function))

(cffi:defcfun ("XSetWindowBackgroundPixmap" #.(custom-lispify "XSetWindowBackgroundPixmap" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetWindowBackgroundPixmap" 'function))

(cffi:defcfun ("XSetWindowBorder" #.(custom-lispify "XSetWindowBorder" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :unsigned-long))

(cl:export '#.(custom-lispify "XSetWindowBorder" 'function))

(cffi:defcfun ("XSetWindowBorderPixmap" #.(custom-lispify "XSetWindowBorderPixmap" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetWindowBorderPixmap" 'function))

(cffi:defcfun ("XSetWindowBorderWidth" #.(custom-lispify "XSetWindowBorderWidth" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :unsigned-int))

(cl:export '#.(custom-lispify "XSetWindowBorderWidth" 'function))

(cffi:defcfun ("XSetWindowColormap" #.(custom-lispify "XSetWindowColormap" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetWindowColormap" 'function))

(cffi:defcfun ("XStoreBuffer" #.(custom-lispify "XStoreBuffer" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int)
  (arg3 :int))

(cl:export '#.(custom-lispify "XStoreBuffer" 'function))

(cffi:defcfun ("XStoreBytes" #.(custom-lispify "XStoreBytes" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int))

(cl:export '#.(custom-lispify "XStoreBytes" 'function))

(cffi:defcfun ("XStoreColor" #.(custom-lispify "XStoreColor" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XStoreColor" 'function))

(cffi:defcfun ("XStoreColors" #.(custom-lispify "XStoreColors" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int))

(cl:export '#.(custom-lispify "XStoreColors" 'function))

(cffi:defcfun ("XStoreName" #.(custom-lispify "XStoreName" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 string-or-ptr))

(cl:export '#.(custom-lispify "XStoreName" 'function))

(cffi:defcfun ("XStoreNamedColor" #.(custom-lispify "XStoreNamedColor" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 :unsigned-long)
  (arg4 :int))

(cl:export '#.(custom-lispify "XStoreNamedColor" 'function))

(cffi:defcfun ("XSync" #.(custom-lispify "XSync" 'function)) :int
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XSync" 'function))

(cffi:defcfun ("XTextExtents" #.(custom-lispify "XTextExtents" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer)
  (arg6 :pointer))

(cl:export '#.(custom-lispify "XTextExtents" 'function))

(cffi:defcfun ("XTextExtents16" #.(custom-lispify "XTextExtents16" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer)
  (arg6 :pointer))

(cl:export '#.(custom-lispify "XTextExtents16" 'function))

(cffi:defcfun ("XTextWidth" #.(custom-lispify "XTextWidth" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int))

(cl:export '#.(custom-lispify "XTextWidth" 'function))

(cffi:defcfun ("XTextWidth16" #.(custom-lispify "XTextWidth16" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XTextWidth16" 'function))

(cffi:defcfun ("XTranslateCoordinates" #.(custom-lispify "XTranslateCoordinates" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :unsigned-long)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :pointer)
  (arg7 :pointer))

(cl:export '#.(custom-lispify "XTranslateCoordinates" 'function))

(cffi:defcfun ("XUndefineCursor" #.(custom-lispify "XUndefineCursor" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XUndefineCursor" 'function))

(cffi:defcfun ("XUngrabButton" #.(custom-lispify "XUngrabButton" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-int)
  (arg2 :unsigned-int)
  (arg3 :unsigned-long))

(cl:export '#.(custom-lispify "XUngrabButton" 'function))

(cffi:defcfun ("XUngrabKey" #.(custom-lispify "XUngrabKey" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :unsigned-int)
  (arg3 :unsigned-long))

(cl:export '#.(custom-lispify "XUngrabKey" 'function))

(cffi:defcfun ("XUngrabKeyboard" #.(custom-lispify "XUngrabKeyboard" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XUngrabKeyboard" 'function))

(cffi:defcfun ("XUngrabPointer" #.(custom-lispify "XUngrabPointer" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XUngrabPointer" 'function))

(cffi:defcfun ("XUngrabServer" #.(custom-lispify "XUngrabServer" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XUngrabServer" 'function))

(cffi:defcfun ("XUninstallColormap" #.(custom-lispify "XUninstallColormap" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XUninstallColormap" 'function))

(cffi:defcfun ("XUnloadFont" #.(custom-lispify "XUnloadFont" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XUnloadFont" 'function))

(cffi:defcfun ("XUnmapSubwindows" #.(custom-lispify "XUnmapSubwindows" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XUnmapSubwindows" 'function))

(cffi:defcfun ("XUnmapWindow" #.(custom-lispify "XUnmapWindow" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XUnmapWindow" 'function))

(cffi:defcfun ("XVendorRelease" #.(custom-lispify "XVendorRelease" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XVendorRelease" 'function))

(cffi:defcfun ("XWarpPointer" #.(custom-lispify "XWarpPointer" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :unsigned-long)
  (arg3 :int)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int)
  (arg7 :int)
  (arg8 :int))

(cl:export '#.(custom-lispify "XWarpPointer" 'function))

(cffi:defcfun ("XWidthMMOfScreen" #.(custom-lispify "XWidthMMOfScreen" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XWidthMMOfScreen" 'function))

(cffi:defcfun ("XWidthOfScreen" #.(custom-lispify "XWidthOfScreen" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XWidthOfScreen" 'function))

(cffi:defcfun ("XWindowEvent" #.(custom-lispify "XWindowEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :long)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XWindowEvent" 'function))

(cffi:defcfun ("XWriteBitmapFile" #.(custom-lispify "XWriteBitmapFile" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :pointer)
  (arg3 :unsigned-int)
  (arg4 :unsigned-int)
  (arg5 :int)
  (arg6 :int))

(cl:export '#.(custom-lispify "XWriteBitmapFile" 'function))

(cffi:defcfun ("XSupportsLocale" #.(custom-lispify "XSupportsLocale" 'function)) :int)

(cl:export '#.(custom-lispify "XSupportsLocale" 'function))

(cffi:defcfun ("XSetLocaleModifiers" #.(custom-lispify "XSetLocaleModifiers" 'function)) string-or-ptr
  (arg0 string-or-ptr))

(cl:export '#.(custom-lispify "XSetLocaleModifiers" 'function))

(cffi:defcfun ("XOpenOM" #.(custom-lispify "XOpenOM" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 string-or-ptr))

(cl:export '#.(custom-lispify "XOpenOM" 'function))

(cffi:defcfun ("XCloseOM" #.(custom-lispify "XCloseOM" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XCloseOM" 'function))

(cffi:defcfun ("XSetOMValues" #.(custom-lispify "XSetOMValues" 'function)) string-or-ptr
  (arg0 :pointer)
  &rest)

(cl:export '#.(custom-lispify "XSetOMValues" 'function))

(cffi:defcfun ("XGetOMValues" #.(custom-lispify "XGetOMValues" 'function)) string-or-ptr
  (arg0 :pointer)
  &rest)

(cl:export '#.(custom-lispify "XGetOMValues" 'function))

(cffi:defcfun ("XDisplayOfOM" #.(custom-lispify "XDisplayOfOM" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDisplayOfOM" 'function))

(cffi:defcfun ("XLocaleOfOM" #.(custom-lispify "XLocaleOfOM" 'function)) string-or-ptr
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XLocaleOfOM" 'function))

(cffi:defcfun ("XCreateOC" #.(custom-lispify "XCreateOC" 'function)) :pointer
  (arg0 :pointer)
  &rest)

(cl:export '#.(custom-lispify "XCreateOC" 'function))

(cffi:defcfun ("XDestroyOC" #.(custom-lispify "XDestroyOC" 'function)) :void
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDestroyOC" 'function))

(cffi:defcfun ("XOMOfOC" #.(custom-lispify "XOMOfOC" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XOMOfOC" 'function))

(cffi:defcfun ("XSetOCValues" #.(custom-lispify "XSetOCValues" 'function)) string-or-ptr
  (arg0 :pointer)
  &rest)

(cl:export '#.(custom-lispify "XSetOCValues" 'function))

(cffi:defcfun ("XGetOCValues" #.(custom-lispify "XGetOCValues" 'function)) string-or-ptr
  (arg0 :pointer)
  &rest)

(cl:export '#.(custom-lispify "XGetOCValues" 'function))

(cffi:defcfun ("XCreateFontSet" #.(custom-lispify "XCreateFontSet" 'function)) :pointer
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XCreateFontSet" 'function))

(cffi:defcfun ("XFreeFontSet" #.(custom-lispify "XFreeFontSet" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XFreeFontSet" 'function))

(cffi:defcfun ("XFontsOfFontSet" #.(custom-lispify "XFontsOfFontSet" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XFontsOfFontSet" 'function))

(cffi:defcfun ("XBaseFontNameListOfFontSet" #.(custom-lispify "XBaseFontNameListOfFontSet" 'function)) string-or-ptr
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XBaseFontNameListOfFontSet" 'function))

(cffi:defcfun ("XLocaleOfFontSet" #.(custom-lispify "XLocaleOfFontSet" 'function)) string-or-ptr
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XLocaleOfFontSet" 'function))

(cffi:defcfun ("XContextDependentDrawing" #.(custom-lispify "XContextDependentDrawing" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XContextDependentDrawing" 'function))

(cffi:defcfun ("XDirectionalDependentDrawing" #.(custom-lispify "XDirectionalDependentDrawing" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDirectionalDependentDrawing" 'function))

(cffi:defcfun ("XContextualDrawing" #.(custom-lispify "XContextualDrawing" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XContextualDrawing" 'function))

(cffi:defcfun ("XExtentsOfFontSet" #.(custom-lispify "XExtentsOfFontSet" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XExtentsOfFontSet" 'function))

(cffi:defcfun ("XmbTextEscapement" #.(custom-lispify "XmbTextEscapement" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int))

(cl:export '#.(custom-lispify "XmbTextEscapement" 'function))

(cffi:defcfun ("XwcTextEscapement" #.(custom-lispify "XwcTextEscapement" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cl:export '#.(custom-lispify "XwcTextEscapement" 'function))

(cffi:defcfun ("Xutf8TextEscapement" #.(custom-lispify "Xutf8TextEscapement" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int))

(cl:export '#.(custom-lispify "Xutf8TextEscapement" 'function))

(cffi:defcfun ("XmbTextExtents" #.(custom-lispify "XmbTextExtents" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XmbTextExtents" 'function))

(cffi:defcfun ("XwcTextExtents" #.(custom-lispify "XwcTextExtents" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XwcTextExtents" 'function))

(cffi:defcfun ("Xutf8TextExtents" #.(custom-lispify "Xutf8TextExtents" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "Xutf8TextExtents" 'function))

(cffi:defcfun ("XmbTextPerCharExtents" #.(custom-lispify "XmbTextPerCharExtents" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cl:export '#.(custom-lispify "XmbTextPerCharExtents" 'function))

(cffi:defcfun ("XwcTextPerCharExtents" #.(custom-lispify "XwcTextPerCharExtents" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cl:export '#.(custom-lispify "XwcTextPerCharExtents" 'function))

(cffi:defcfun ("Xutf8TextPerCharExtents" #.(custom-lispify "Xutf8TextPerCharExtents" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cl:export '#.(custom-lispify "Xutf8TextPerCharExtents" 'function))

(cffi:defcfun ("XmbDrawText" #.(custom-lispify "XmbDrawText" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cl:export '#.(custom-lispify "XmbDrawText" 'function))

(cffi:defcfun ("XwcDrawText" #.(custom-lispify "XwcDrawText" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cl:export '#.(custom-lispify "XwcDrawText" 'function))

(cffi:defcfun ("Xutf8DrawText" #.(custom-lispify "Xutf8DrawText" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cl:export '#.(custom-lispify "Xutf8DrawText" 'function))

(cffi:defcfun ("XmbDrawString" #.(custom-lispify "XmbDrawString" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 string-or-ptr)
  (arg7 :int))

(cl:export '#.(custom-lispify "XmbDrawString" 'function))

(cffi:defcfun ("XwcDrawString" #.(custom-lispify "XwcDrawString" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :int))

(cl:export '#.(custom-lispify "XwcDrawString" 'function))

(cffi:defcfun ("Xutf8DrawString" #.(custom-lispify "Xutf8DrawString" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 string-or-ptr)
  (arg7 :int))

(cl:export '#.(custom-lispify "Xutf8DrawString" 'function))

(cffi:defcfun ("XmbDrawImageString" #.(custom-lispify "XmbDrawImageString" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 string-or-ptr)
  (arg7 :int))

(cl:export '#.(custom-lispify "XmbDrawImageString" 'function))

(cffi:defcfun ("XwcDrawImageString" #.(custom-lispify "XwcDrawImageString" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :int))

(cl:export '#.(custom-lispify "XwcDrawImageString" 'function))

(cffi:defcfun ("Xutf8DrawImageString" #.(custom-lispify "Xutf8DrawImageString" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 string-or-ptr)
  (arg7 :int))

(cl:export '#.(custom-lispify "Xutf8DrawImageString" 'function))

(cffi:defcfun ("XOpenIM" #.(custom-lispify "XOpenIM" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 string-or-ptr))

(cl:export '#.(custom-lispify "XOpenIM" 'function))

(cffi:defcfun ("XCloseIM" #.(custom-lispify "XCloseIM" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XCloseIM" 'function))

(cffi:defcfun ("XGetIMValues" #.(custom-lispify "XGetIMValues" 'function)) string-or-ptr
  (arg0 :pointer)
  &rest)

(cl:export '#.(custom-lispify "XGetIMValues" 'function))

(cffi:defcfun ("XSetIMValues" #.(custom-lispify "XSetIMValues" 'function)) string-or-ptr
  (arg0 :pointer)
  &rest)

(cl:export '#.(custom-lispify "XSetIMValues" 'function))

(cffi:defcfun ("XDisplayOfIM" #.(custom-lispify "XDisplayOfIM" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDisplayOfIM" 'function))

(cffi:defcfun ("XLocaleOfIM" #.(custom-lispify "XLocaleOfIM" 'function)) string-or-ptr
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XLocaleOfIM" 'function))

(cffi:defcfun ("XCreateIC" #.(custom-lispify "XCreateIC" 'function)) :pointer
  (arg0 :pointer)
  &rest)

(cl:export '#.(custom-lispify "XCreateIC" 'function))

(cffi:defcfun ("XDestroyIC" #.(custom-lispify "XDestroyIC" 'function)) :void
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDestroyIC" 'function))

(cffi:defcfun ("XSetICFocus" #.(custom-lispify "XSetICFocus" 'function)) :void
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XSetICFocus" 'function))

(cffi:defcfun ("XUnsetICFocus" #.(custom-lispify "XUnsetICFocus" 'function)) :void
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XUnsetICFocus" 'function))

(cffi:defcfun ("XwcResetIC" #.(custom-lispify "XwcResetIC" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XwcResetIC" 'function))

(cffi:defcfun ("XmbResetIC" #.(custom-lispify "XmbResetIC" 'function)) string-or-ptr
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XmbResetIC" 'function))

(cffi:defcfun ("Xutf8ResetIC" #.(custom-lispify "Xutf8ResetIC" 'function)) string-or-ptr
  (arg0 :pointer))

(cl:export '#.(custom-lispify "Xutf8ResetIC" 'function))

(cffi:defcfun ("XSetICValues" #.(custom-lispify "XSetICValues" 'function)) string-or-ptr
  (arg0 :pointer)
  &rest)

(cl:export '#.(custom-lispify "XSetICValues" 'function))

(cffi:defcfun ("XGetICValues" #.(custom-lispify "XGetICValues" 'function)) string-or-ptr
  (arg0 :pointer)
  &rest)

(cl:export '#.(custom-lispify "XGetICValues" 'function))

(cffi:defcfun ("XIMOfIC" #.(custom-lispify "XIMOfIC" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XIMOfIC" 'function))

(cffi:defcfun ("XFilterEvent" #.(custom-lispify "XFilterEvent" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XFilterEvent" 'function))

(cffi:defcfun ("XmbLookupString" #.(custom-lispify "XmbLookupString" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 :int)
  (arg4 :pointer)
  (arg5 :pointer))

(cl:export '#.(custom-lispify "XmbLookupString" 'function))

(cffi:defcfun ("XwcLookupString" #.(custom-lispify "XwcLookupString" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :pointer)
  (arg5 :pointer))

(cl:export '#.(custom-lispify "XwcLookupString" 'function))

(cffi:defcfun ("Xutf8LookupString" #.(custom-lispify "Xutf8LookupString" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 :int)
  (arg4 :pointer)
  (arg5 :pointer))

(cl:export '#.(custom-lispify "Xutf8LookupString" 'function))

(cffi:defcfun ("XVaCreateNestedList" #.(custom-lispify "XVaCreateNestedList" 'function)) :pointer
  (arg0 :int)
  &rest)

(cl:export '#.(custom-lispify "XVaCreateNestedList" 'function))

(cffi:defcfun ("XRegisterIMInstantiateCallback" #.(custom-lispify "XRegisterIMInstantiateCallback" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 string-or-ptr)
  (arg4 :pointer)
  (arg5 string-or-ptr))

(cl:export '#.(custom-lispify "XRegisterIMInstantiateCallback" 'function))

(cffi:defcfun ("XUnregisterIMInstantiateCallback" #.(custom-lispify "XUnregisterIMInstantiateCallback" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr)
  (arg3 string-or-ptr)
  (arg4 :pointer)
  (arg5 string-or-ptr))

(cl:export '#.(custom-lispify "XUnregisterIMInstantiateCallback" 'function))

(cffi:defctype #.(custom-lispify "XConnectionWatchProc" 'typename) :pointer)

(cl:export '#.(custom-lispify "XConnectionWatchProc" 'typename))

(cffi:defcfun ("XInternalConnectionNumbers" #.(custom-lispify "XInternalConnectionNumbers" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XInternalConnectionNumbers" 'function))

(cffi:defcfun ("XProcessInternalConnection" #.(custom-lispify "XProcessInternalConnection" 'function)) :void
  (arg0 :pointer)
  (arg1 :int))

(cl:export '#.(custom-lispify "XProcessInternalConnection" 'function))

(cffi:defcfun ("XAddConnectionWatch" #.(custom-lispify "XAddConnectionWatch" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr))

(cl:export '#.(custom-lispify "XAddConnectionWatch" 'function))

(cffi:defcfun ("XRemoveConnectionWatch" #.(custom-lispify "XRemoveConnectionWatch" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 string-or-ptr))

(cl:export '#.(custom-lispify "XRemoveConnectionWatch" 'function))

(cffi:defcfun ("XSetAuthorization" #.(custom-lispify "XSetAuthorization" 'function)) :void
  (arg0 string-or-ptr)
  (arg1 :int)
  (arg2 string-or-ptr)
  (arg3 :int))

(cl:export '#.(custom-lispify "XSetAuthorization" 'function))

(cffi:defcfun ("_Xmbtowc" #.(custom-lispify "_Xmbtowc" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int))

(cl:export '#.(custom-lispify "_Xmbtowc" 'function))

(cffi:defcfun ("_Xwctomb" #.(custom-lispify "_Xwctomb" 'function)) :int
  (arg0 string-or-ptr)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "_Xwctomb" 'function))

(cffi:defcfun ("XGetEventData" #.(custom-lispify "XGetEventData" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XGetEventData" 'function))

(cffi:defcfun ("XFreeEventData" #.(custom-lispify "XFreeEventData" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XFreeEventData" 'function))

(cl:defconstant #.(custom-lispify "NoValue" 'constant) #x00000)

(cl:export '#.(custom-lispify "NoValue" 'constant))

(cl:defconstant #.(custom-lispify "XValue" 'constant) #x00001)

(cl:export '#.(custom-lispify "XValue" 'constant))

(cl:defconstant #.(custom-lispify "YValue" 'constant) #x00002)

(cl:export '#.(custom-lispify "YValue" 'constant))

(cl:defconstant #.(custom-lispify "WidthValue" 'constant) #x00004)

(cl:export '#.(custom-lispify "WidthValue" 'constant))

(cl:defconstant #.(custom-lispify "HeightValue" 'constant) #x00008)

(cl:export '#.(custom-lispify "HeightValue" 'constant))

(cl:defconstant #.(custom-lispify "AllValues" 'constant) #x0000F)

(cl:export '#.(custom-lispify "AllValues" 'constant))

(cl:defconstant #.(custom-lispify "XNegative" 'constant) #x00010)

(cl:export '#.(custom-lispify "XNegative" 'constant))

(cl:defconstant #.(custom-lispify "YNegative" 'constant) #x00020)

(cl:export '#.(custom-lispify "YNegative" 'constant))

(cffi:defcstruct #.(custom-lispify "XSizeHints" 'structname-decl)
	(#.(custom-lispify "flags" 'slotname) :long)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "min_width" 'slotname) :int)
	(#.(custom-lispify "min_height" 'slotname) :int)
	(#.(custom-lispify "max_width" 'slotname) :int)
	(#.(custom-lispify "max_height" 'slotname) :int)
	(#.(custom-lispify "width_inc" 'slotname) :int)
	(#.(custom-lispify "height_inc" 'slotname) :int)
	(#.(custom-lispify "base_width" 'slotname) :int)
	(#.(custom-lispify "base_height" 'slotname) :int)
	(#.(custom-lispify "win_gravity" 'slotname) :int)
	(#.(custom-lispify "min_aspect" 'slotname) :pointer)
	(#.(custom-lispify "max_aspect" 'slotname) :pointer))

(cl:export '#.(custom-lispify "XSizeHints" 'classname))

(cl:export '#.(custom-lispify "flags" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "min_width" 'slotname))

(cl:export '#.(custom-lispify "min_height" 'slotname))

(cl:export '#.(custom-lispify "max_width" 'slotname))

(cl:export '#.(custom-lispify "max_height" 'slotname))

(cl:export '#.(custom-lispify "width_inc" 'slotname))

(cl:export '#.(custom-lispify "height_inc" 'slotname))

(cl:export '#.(custom-lispify "base_width" 'slotname))

(cl:export '#.(custom-lispify "base_height" 'slotname))

(cl:export '#.(custom-lispify "win_gravity" 'slotname))

(cl:export '#.(custom-lispify "min_aspect" 'slotname))

(cl:export '#.(custom-lispify "max_aspect" 'slotname))

(cffi:defcstruct #.(custom-lispify "XSizeHints_max_aspect" 'structname-decl)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int))

(cl:export '#.(custom-lispify "XSizeHints_max_aspect" 'classname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cffi:defcstruct #.(custom-lispify "XSizeHints_min_aspect" 'structname-decl)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int))

(cl:export '#.(custom-lispify "XSizeHints_min_aspect" 'classname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:defconstant #.(custom-lispify "USPosition" 'constant) (cl:ash 1 0))

(cl:export '#.(custom-lispify "USPosition" 'constant))

(cl:defconstant #.(custom-lispify "USSize" 'constant) (cl:ash 1 1))

(cl:export '#.(custom-lispify "USSize" 'constant))

(cl:defconstant #.(custom-lispify "PPosition" 'constant) (cl:ash 1 2))

(cl:export '#.(custom-lispify "PPosition" 'constant))

(cl:defconstant #.(custom-lispify "PSize" 'constant) (cl:ash 1 3))

(cl:export '#.(custom-lispify "PSize" 'constant))

(cl:defconstant #.(custom-lispify "PMinSize" 'constant) (cl:ash 1 4))

(cl:export '#.(custom-lispify "PMinSize" 'constant))

(cl:defconstant #.(custom-lispify "PMaxSize" 'constant) (cl:ash 1 5))

(cl:export '#.(custom-lispify "PMaxSize" 'constant))

(cl:defconstant #.(custom-lispify "PResizeInc" 'constant) (cl:ash 1 6))

(cl:export '#.(custom-lispify "PResizeInc" 'constant))

(cl:defconstant #.(custom-lispify "PAspect" 'constant) (cl:ash 1 7))

(cl:export '#.(custom-lispify "PAspect" 'constant))

(cl:defconstant #.(custom-lispify "PBaseSize" 'constant) (cl:ash 1 8))

(cl:export '#.(custom-lispify "PBaseSize" 'constant))

(cl:defconstant #.(custom-lispify "PWinGravity" 'constant) (cl:ash 1 9))

(cl:export '#.(custom-lispify "PWinGravity" 'constant))

(cl:defconstant #.(custom-lispify "PAllHints" 'constant) (cl:logior (cl:ash 1 2) (cl:ash 1 3) (cl:ash 1 4) (cl:ash 1 5) (cl:ash 1 6) (cl:ash 1 7)))

(cl:export '#.(custom-lispify "PAllHints" 'constant))

(cffi:defcstruct #.(custom-lispify "XWMHints" 'structname-decl)
	(#.(custom-lispify "flags" 'slotname) :long)
	(#.(custom-lispify "input" 'slotname) :int)
	(#.(custom-lispify "initial_state" 'slotname) :int)
	(#.(custom-lispify "icon_pixmap" 'slotname) :pointer)
	(#.(custom-lispify "icon_window" 'slotname) :unsigned-long)
	(#.(custom-lispify "icon_x" 'slotname) :int)
	(#.(custom-lispify "icon_y" 'slotname) :int)
	(#.(custom-lispify "icon_mask" 'slotname) :pointer)
	(#.(custom-lispify "window_group" 'slotname) :unsigned-long))

(cl:export '#.(custom-lispify "XWMHints" 'classname))

(cl:export '#.(custom-lispify "flags" 'slotname))

(cl:export '#.(custom-lispify "input" 'slotname))

(cl:export '#.(custom-lispify "initial_state" 'slotname))

(cl:export '#.(custom-lispify "icon_pixmap" 'slotname))

(cl:export '#.(custom-lispify "icon_window" 'slotname))

(cl:export '#.(custom-lispify "icon_x" 'slotname))

(cl:export '#.(custom-lispify "icon_y" 'slotname))

(cl:export '#.(custom-lispify "icon_mask" 'slotname))

(cl:export '#.(custom-lispify "window_group" 'slotname))

(cl:defconstant #.(custom-lispify "InputHint" 'constant) (cl:ash 1 0))

(cl:export '#.(custom-lispify "InputHint" 'constant))

(cl:defconstant #.(custom-lispify "StateHint" 'constant) (cl:ash 1 1))

(cl:export '#.(custom-lispify "StateHint" 'constant))

(cl:defconstant #.(custom-lispify "IconPixmapHint" 'constant) (cl:ash 1 2))

(cl:export '#.(custom-lispify "IconPixmapHint" 'constant))

(cl:defconstant #.(custom-lispify "IconWindowHint" 'constant) (cl:ash 1 3))

(cl:export '#.(custom-lispify "IconWindowHint" 'constant))

(cl:defconstant #.(custom-lispify "IconPositionHint" 'constant) (cl:ash 1 4))

(cl:export '#.(custom-lispify "IconPositionHint" 'constant))

(cl:defconstant #.(custom-lispify "IconMaskHint" 'constant) (cl:ash 1 5))

(cl:export '#.(custom-lispify "IconMaskHint" 'constant))

(cl:defconstant #.(custom-lispify "WindowGroupHint" 'constant) (cl:ash 1 6))

(cl:export '#.(custom-lispify "WindowGroupHint" 'constant))

(cl:defconstant #.(custom-lispify "AllHints" 'constant) (cl:logior (cl:ash 1 0) (cl:ash 1 1) (cl:ash 1 2) (cl:ash 1 3) (cl:ash 1 4) (cl:ash 1 5) (cl:ash 1 6)))

(cl:export '#.(custom-lispify "AllHints" 'constant))

(cl:defconstant #.(custom-lispify "XUrgencyHint" 'constant) (cl:ash 1 8))

(cl:export '#.(custom-lispify "XUrgencyHint" 'constant))

(cl:defconstant #.(custom-lispify "WithdrawnState" 'constant) 0)

(cl:export '#.(custom-lispify "WithdrawnState" 'constant))

(cl:defconstant #.(custom-lispify "NormalState" 'constant) 1)

(cl:export '#.(custom-lispify "NormalState" 'constant))

(cl:defconstant #.(custom-lispify "IconicState" 'constant) 3)

(cl:export '#.(custom-lispify "IconicState" 'constant))

(cl:defconstant #.(custom-lispify "DontCareState" 'constant) 0)

(cl:export '#.(custom-lispify "DontCareState" 'constant))

(cl:defconstant #.(custom-lispify "ZoomState" 'constant) 2)

(cl:export '#.(custom-lispify "ZoomState" 'constant))

(cl:defconstant #.(custom-lispify "InactiveState" 'constant) 4)

(cl:export '#.(custom-lispify "InactiveState" 'constant))

(cffi:defcstruct #.(custom-lispify "XTextProperty" 'structname-decl)
	(#.(custom-lispify "value" 'slotname) :pointer)
	(#.(custom-lispify "encoding" 'slotname) :pointer)
	(#.(custom-lispify "format" 'slotname) :int)
	(#.(custom-lispify "nitems" 'slotname) :unsigned-long))

(cl:export '#.(custom-lispify "XTextProperty" 'classname))

(cl:export '#.(custom-lispify "value" 'slotname))

(cl:export '#.(custom-lispify "encoding" 'slotname))

(cl:export '#.(custom-lispify "format" 'slotname))

(cl:export '#.(custom-lispify "nitems" 'slotname))

(cl:defconstant #.(custom-lispify "XNoMemory" 'constant) -1)

(cl:export '#.(custom-lispify "XNoMemory" 'constant))

(cl:defconstant #.(custom-lispify "XLocaleNotSupported" 'constant) -2)

(cl:export '#.(custom-lispify "XLocaleNotSupported" 'constant))

(cl:defconstant #.(custom-lispify "XConverterNotFound" 'constant) -3)

(cl:export '#.(custom-lispify "XConverterNotFound" 'constant))

(cffi:defcenum #.(custom-lispify "XICCEncodingStyle" 'enumname)
	#.(custom-lispify "XStringStyle" 'enumvalue :keyword)
	#.(custom-lispify "XCompoundTextStyle" 'enumvalue :keyword)
	#.(custom-lispify "XTextStyle" 'enumvalue :keyword)
	#.(custom-lispify "XStdICCTextStyle" 'enumvalue :keyword)
	#.(custom-lispify "XUTF8StringStyle" 'enumvalue :keyword))

(cl:export '#.(custom-lispify "XICCEncodingStyle" 'enumname))

(cffi:defcstruct #.(custom-lispify "XIconSize" 'structname-decl)
	(#.(custom-lispify "min_width" 'slotname) :int)
	(#.(custom-lispify "min_height" 'slotname) :int)
	(#.(custom-lispify "max_width" 'slotname) :int)
	(#.(custom-lispify "max_height" 'slotname) :int)
	(#.(custom-lispify "width_inc" 'slotname) :int)
	(#.(custom-lispify "height_inc" 'slotname) :int))

(cl:export '#.(custom-lispify "XIconSize" 'classname))

(cl:export '#.(custom-lispify "min_width" 'slotname))

(cl:export '#.(custom-lispify "min_height" 'slotname))

(cl:export '#.(custom-lispify "max_width" 'slotname))

(cl:export '#.(custom-lispify "max_height" 'slotname))

(cl:export '#.(custom-lispify "width_inc" 'slotname))

(cl:export '#.(custom-lispify "height_inc" 'slotname))

(cffi:defcstruct #.(custom-lispify "XClassHint" 'structname-decl)
	(#.(custom-lispify "res_name" 'slotname) string-or-ptr)
	(#.(custom-lispify "res_class" 'slotname) string-or-ptr))

(cl:export '#.(custom-lispify "XClassHint" 'classname))

(cl:export '#.(custom-lispify "res_name" 'slotname))

(cl:export '#.(custom-lispify "res_class" 'slotname))

(cffi:defcstruct #.(custom-lispify "XComposeStatus" 'structname-decl)
	(#.(custom-lispify "compose_ptr" 'slotname) string-or-ptr)
	(#.(custom-lispify "chars_matched" 'slotname) :int))

(cl:export '#.(custom-lispify "XComposeStatus" 'classname))

(cl:export '#.(custom-lispify "compose_ptr" 'slotname))

(cl:export '#.(custom-lispify "chars_matched" 'slotname))

(cffi:defctype #.(custom-lispify "Region" 'typename) :pointer)

(cl:export '#.(custom-lispify "Region" 'typename))

(cl:defconstant #.(custom-lispify "RectangleOut" 'constant) 0)

(cl:export '#.(custom-lispify "RectangleOut" 'constant))

(cl:defconstant #.(custom-lispify "RectangleIn" 'constant) 1)

(cl:export '#.(custom-lispify "RectangleIn" 'constant))

(cl:defconstant #.(custom-lispify "RectanglePart" 'constant) 2)

(cl:export '#.(custom-lispify "RectanglePart" 'constant))

(cffi:defcstruct #.(custom-lispify "XVisualInfo" 'structname-decl)
	(#.(custom-lispify "visual" 'slotname) :pointer)
	(#.(custom-lispify "visualid" 'slotname) :pointer)
	(#.(custom-lispify "screen" 'slotname) :int)
	(#.(custom-lispify "depth" 'slotname) :int)
	(#.(custom-lispify "class" 'slotname) :int)
	(#.(custom-lispify "red_mask" 'slotname) :unsigned-long)
	(#.(custom-lispify "green_mask" 'slotname) :unsigned-long)
	(#.(custom-lispify "blue_mask" 'slotname) :unsigned-long)
	(#.(custom-lispify "colormap_size" 'slotname) :int)
	(#.(custom-lispify "bits_per_rgb" 'slotname) :int))

(cl:export '#.(custom-lispify "XVisualInfo" 'classname))

(cl:export '#.(custom-lispify "visual" 'slotname))

(cl:export '#.(custom-lispify "visualid" 'slotname))

(cl:export '#.(custom-lispify "screen" 'slotname))

(cl:export '#.(custom-lispify "depth" 'slotname))

(cl:export '#.(custom-lispify "class" 'slotname))

(cl:export '#.(custom-lispify "red_mask" 'slotname))

(cl:export '#.(custom-lispify "green_mask" 'slotname))

(cl:export '#.(custom-lispify "blue_mask" 'slotname))

(cl:export '#.(custom-lispify "colormap_size" 'slotname))

(cl:export '#.(custom-lispify "bits_per_rgb" 'slotname))

(cl:defconstant #.(custom-lispify "VisualNoMask" 'constant) #x00)

(cl:export '#.(custom-lispify "VisualNoMask" 'constant))

(cl:defconstant #.(custom-lispify "VisualIDMask" 'constant) #x01)

(cl:export '#.(custom-lispify "VisualIDMask" 'constant))

(cl:defconstant #.(custom-lispify "VisualScreenMask" 'constant) #x02)

(cl:export '#.(custom-lispify "VisualScreenMask" 'constant))

(cl:defconstant #.(custom-lispify "VisualDepthMask" 'constant) #x04)

(cl:export '#.(custom-lispify "VisualDepthMask" 'constant))

(cl:defconstant #.(custom-lispify "VisualClassMask" 'constant) #x08)

(cl:export '#.(custom-lispify "VisualClassMask" 'constant))

(cl:defconstant #.(custom-lispify "VisualRedMaskMask" 'constant) #x010)

(cl:export '#.(custom-lispify "VisualRedMaskMask" 'constant))

(cl:defconstant #.(custom-lispify "VisualGreenMaskMask" 'constant) #x020)

(cl:export '#.(custom-lispify "VisualGreenMaskMask" 'constant))

(cl:defconstant #.(custom-lispify "VisualBlueMaskMask" 'constant) #x040)

(cl:export '#.(custom-lispify "VisualBlueMaskMask" 'constant))

(cl:defconstant #.(custom-lispify "VisualColormapSizeMask" 'constant) #x080)

(cl:export '#.(custom-lispify "VisualColormapSizeMask" 'constant))

(cl:defconstant #.(custom-lispify "VisualBitsPerRGBMask" 'constant) #x0100)

(cl:export '#.(custom-lispify "VisualBitsPerRGBMask" 'constant))

(cl:defconstant #.(custom-lispify "VisualAllMask" 'constant) #x01FF)

(cl:export '#.(custom-lispify "VisualAllMask" 'constant))

(cffi:defcstruct #.(custom-lispify "XStandardColormap" 'structname-decl)
	(#.(custom-lispify "colormap" 'slotname) :pointer)
	(#.(custom-lispify "red_max" 'slotname) :unsigned-long)
	(#.(custom-lispify "red_mult" 'slotname) :unsigned-long)
	(#.(custom-lispify "green_max" 'slotname) :unsigned-long)
	(#.(custom-lispify "green_mult" 'slotname) :unsigned-long)
	(#.(custom-lispify "blue_max" 'slotname) :unsigned-long)
	(#.(custom-lispify "blue_mult" 'slotname) :unsigned-long)
	(#.(custom-lispify "base_pixel" 'slotname) :unsigned-long)
	(#.(custom-lispify "visualid" 'slotname) :pointer)
	(#.(custom-lispify "killid" 'slotname) :unsigned-long))

(cl:export '#.(custom-lispify "XStandardColormap" 'classname))

(cl:export '#.(custom-lispify "colormap" 'slotname))

(cl:export '#.(custom-lispify "red_max" 'slotname))

(cl:export '#.(custom-lispify "red_mult" 'slotname))

(cl:export '#.(custom-lispify "green_max" 'slotname))

(cl:export '#.(custom-lispify "green_mult" 'slotname))

(cl:export '#.(custom-lispify "blue_max" 'slotname))

(cl:export '#.(custom-lispify "blue_mult" 'slotname))

(cl:export '#.(custom-lispify "base_pixel" 'slotname))

(cl:export '#.(custom-lispify "visualid" 'slotname))

(cl:export '#.(custom-lispify "killid" 'slotname))

(cl:defconstant #.(custom-lispify "BitmapSuccess" 'constant) 0)

(cl:export '#.(custom-lispify "BitmapSuccess" 'constant))

(cl:defconstant #.(custom-lispify "BitmapOpenFailed" 'constant) 1)

(cl:export '#.(custom-lispify "BitmapOpenFailed" 'constant))

(cl:defconstant #.(custom-lispify "BitmapFileInvalid" 'constant) 2)

(cl:export '#.(custom-lispify "BitmapFileInvalid" 'constant))

(cl:defconstant #.(custom-lispify "BitmapNoMemory" 'constant) 3)

(cl:export '#.(custom-lispify "BitmapNoMemory" 'constant))

(cl:defconstant #.(custom-lispify "XCSUCCESS" 'constant) 0)

(cl:export '#.(custom-lispify "XCSUCCESS" 'constant))

(cl:defconstant #.(custom-lispify "XCNOMEM" 'constant) 1)

(cl:export '#.(custom-lispify "XCNOMEM" 'constant))

(cl:defconstant #.(custom-lispify "XCNOENT" 'constant) 2)

(cl:export '#.(custom-lispify "XCNOENT" 'constant))

(cffi:defctype #.(custom-lispify "XContext" 'typename) :int)

(cl:export '#.(custom-lispify "XContext" 'typename))

(cffi:defcfun ("XAllocClassHint" #.(custom-lispify "XAllocClassHint" 'function)) :pointer)

(cl:export '#.(custom-lispify "XAllocClassHint" 'function))

(cffi:defcfun ("XAllocIconSize" #.(custom-lispify "XAllocIconSize" 'function)) :pointer)

(cl:export '#.(custom-lispify "XAllocIconSize" 'function))

(cffi:defcfun ("XAllocSizeHints" #.(custom-lispify "XAllocSizeHints" 'function)) :pointer)

(cl:export '#.(custom-lispify "XAllocSizeHints" 'function))

(cffi:defcfun ("XAllocStandardColormap" #.(custom-lispify "XAllocStandardColormap" 'function)) :pointer)

(cl:export '#.(custom-lispify "XAllocStandardColormap" 'function))

(cffi:defcfun ("XAllocWMHints" #.(custom-lispify "XAllocWMHints" 'function)) :pointer)

(cl:export '#.(custom-lispify "XAllocWMHints" 'function))

(cffi:defcfun ("XClipBox" #.(custom-lispify "XClipBox" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XClipBox" 'function))

(cffi:defcfun ("XCreateRegion" #.(custom-lispify "XCreateRegion" 'function)) :pointer)

(cl:export '#.(custom-lispify "XCreateRegion" 'function))

(cffi:defcfun ("XDefaultString" #.(custom-lispify "XDefaultString" 'function)) string-or-ptr)

(cl:export '#.(custom-lispify "XDefaultString" 'function))

(cffi:defcfun ("XDeleteContext" #.(custom-lispify "XDeleteContext" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int))

(cl:export '#.(custom-lispify "XDeleteContext" 'function))

(cffi:defcfun ("XDestroyRegion" #.(custom-lispify "XDestroyRegion" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XDestroyRegion" 'function))

(cffi:defcfun ("XEmptyRegion" #.(custom-lispify "XEmptyRegion" 'function)) :int
  (arg0 :pointer))

(cl:export '#.(custom-lispify "XEmptyRegion" 'function))

(cffi:defcfun ("XEqualRegion" #.(custom-lispify "XEqualRegion" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cl:export '#.(custom-lispify "XEqualRegion" 'function))

(cffi:defcfun ("XFindContext" #.(custom-lispify "XFindContext" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XFindContext" 'function))

(cffi:defcfun ("XGetClassHint" #.(custom-lispify "XGetClassHint" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XGetClassHint" 'function))

(cffi:defcfun ("XGetIconSizes" #.(custom-lispify "XGetIconSizes" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetIconSizes" 'function))

(cffi:defcfun ("XGetNormalHints" #.(custom-lispify "XGetNormalHints" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XGetNormalHints" 'function))

(cffi:defcfun ("XGetRGBColormaps" #.(custom-lispify "XGetRGBColormaps" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XGetRGBColormaps" 'function))

(cffi:defcfun ("XGetSizeHints" #.(custom-lispify "XGetSizeHints" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetSizeHints" 'function))

(cffi:defcfun ("XGetStandardColormap" #.(custom-lispify "XGetStandardColormap" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetStandardColormap" 'function))

(cffi:defcfun ("XGetTextProperty" #.(custom-lispify "XGetTextProperty" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetTextProperty" 'function))

(cffi:defcfun ("XGetVisualInfo" #.(custom-lispify "XGetVisualInfo" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetVisualInfo" 'function))

(cffi:defcfun ("XGetWMClientMachine" #.(custom-lispify "XGetWMClientMachine" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XGetWMClientMachine" 'function))

(cffi:defcfun ("XGetWMHints" #.(custom-lispify "XGetWMHints" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :unsigned-long))

(cl:export '#.(custom-lispify "XGetWMHints" 'function))

(cffi:defcfun ("XGetWMIconName" #.(custom-lispify "XGetWMIconName" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XGetWMIconName" 'function))

(cffi:defcfun ("XGetWMName" #.(custom-lispify "XGetWMName" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XGetWMName" 'function))

(cffi:defcfun ("XGetWMNormalHints" #.(custom-lispify "XGetWMNormalHints" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XGetWMNormalHints" 'function))

(cffi:defcfun ("XGetWMSizeHints" #.(custom-lispify "XGetWMSizeHints" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XGetWMSizeHints" 'function))

(cffi:defcfun ("XGetZoomHints" #.(custom-lispify "XGetZoomHints" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XGetZoomHints" 'function))

(cffi:defcfun ("XIntersectRegion" #.(custom-lispify "XIntersectRegion" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XIntersectRegion" 'function))

(cffi:defcfun ("XConvertCase" #.(custom-lispify "XConvertCase" 'function)) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XConvertCase" 'function))

(cffi:defcfun ("XLookupString" #.(custom-lispify "XLookupString" 'function)) :int
  (arg0 :pointer)
  (arg1 string-or-ptr)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XLookupString" 'function))

(cffi:defcfun ("XMatchVisualInfo" #.(custom-lispify "XMatchVisualInfo" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :int)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XMatchVisualInfo" 'function))

(cffi:defcfun ("XOffsetRegion" #.(custom-lispify "XOffsetRegion" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int))

(cl:export '#.(custom-lispify "XOffsetRegion" 'function))

(cffi:defcfun ("XPointInRegion" #.(custom-lispify "XPointInRegion" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int))

(cl:export '#.(custom-lispify "XPointInRegion" 'function))

(cffi:defcfun ("XPolygonRegion" #.(custom-lispify "XPolygonRegion" 'function)) :pointer
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int))

(cl:export '#.(custom-lispify "XPolygonRegion" 'function))

(cffi:defcfun ("XRectInRegion" #.(custom-lispify "XRectInRegion" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :unsigned-int)
  (arg4 :unsigned-int))

(cl:export '#.(custom-lispify "XRectInRegion" 'function))

(cffi:defcfun ("XSaveContext" #.(custom-lispify "XSaveContext" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :int)
  (arg3 string-or-ptr))

(cl:export '#.(custom-lispify "XSaveContext" 'function))

(cffi:defcfun ("XSetClassHint" #.(custom-lispify "XSetClassHint" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetClassHint" 'function))

(cffi:defcfun ("XSetIconSizes" #.(custom-lispify "XSetIconSizes" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :int))

(cl:export '#.(custom-lispify "XSetIconSizes" 'function))

(cffi:defcfun ("XSetNormalHints" #.(custom-lispify "XSetNormalHints" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetNormalHints" 'function))

(cffi:defcfun ("XSetRGBColormaps" #.(custom-lispify "XSetRGBColormaps" 'function)) :void
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :pointer))

(cl:export '#.(custom-lispify "XSetRGBColormaps" 'function))

(cffi:defcfun ("XSetSizeHints" #.(custom-lispify "XSetSizeHints" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XSetSizeHints" 'function))

(cffi:defcfun ("XSetStandardProperties" #.(custom-lispify "XSetStandardProperties" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 string-or-ptr)
  (arg3 string-or-ptr)
  (arg4 :pointer)
  (arg5 :pointer)
  (arg6 :int)
  (arg7 :pointer))

(cl:export '#.(custom-lispify "XSetStandardProperties" 'function))

(cffi:defcfun ("XSetTextProperty" #.(custom-lispify "XSetTextProperty" 'function)) :void
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XSetTextProperty" 'function))

(cffi:defcfun ("XSetWMClientMachine" #.(custom-lispify "XSetWMClientMachine" 'function)) :void
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetWMClientMachine" 'function))

(cffi:defcfun ("XSetWMHints" #.(custom-lispify "XSetWMHints" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetWMHints" 'function))

(cffi:defcfun ("XSetWMIconName" #.(custom-lispify "XSetWMIconName" 'function)) :void
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetWMIconName" 'function))

(cffi:defcfun ("XSetWMName" #.(custom-lispify "XSetWMName" 'function)) :void
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetWMName" 'function))

(cffi:defcfun ("XSetWMNormalHints" #.(custom-lispify "XSetWMNormalHints" 'function)) :void
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetWMNormalHints" 'function))

(cffi:defcfun ("XSetWMProperties" #.(custom-lispify "XSetWMProperties" 'function)) :void
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cl:export '#.(custom-lispify "XSetWMProperties" 'function))

(cffi:defcfun ("XmbSetWMProperties" #.(custom-lispify "XmbSetWMProperties" 'function)) :void
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 string-or-ptr)
  (arg3 string-or-ptr)
  (arg4 :pointer)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cl:export '#.(custom-lispify "XmbSetWMProperties" 'function))

(cffi:defcfun ("Xutf8SetWMProperties" #.(custom-lispify "Xutf8SetWMProperties" 'function)) :void
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 string-or-ptr)
  (arg3 string-or-ptr)
  (arg4 :pointer)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cl:export '#.(custom-lispify "Xutf8SetWMProperties" 'function))

(cffi:defcfun ("XSetWMSizeHints" #.(custom-lispify "XSetWMSizeHints" 'function)) :void
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XSetWMSizeHints" 'function))

(cffi:defcfun ("XSetRegion" #.(custom-lispify "XSetRegion" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetRegion" 'function))

(cffi:defcfun ("XSetStandardColormap" #.(custom-lispify "XSetStandardColormap" 'function)) :void
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer)
  (arg3 :pointer))

(cl:export '#.(custom-lispify "XSetStandardColormap" 'function))

(cffi:defcfun ("XSetZoomHints" #.(custom-lispify "XSetZoomHints" 'function)) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSetZoomHints" 'function))

(cffi:defcfun ("XShrinkRegion" #.(custom-lispify "XShrinkRegion" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int))

(cl:export '#.(custom-lispify "XShrinkRegion" 'function))

(cffi:defcfun ("XStringListToTextProperty" #.(custom-lispify "XStringListToTextProperty" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XStringListToTextProperty" 'function))

(cffi:defcfun ("XSubtractRegion" #.(custom-lispify "XSubtractRegion" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XSubtractRegion" 'function))

(cffi:defcfun ("XmbTextListToTextProperty" #.(custom-lispify "XmbTextListToTextProperty" 'function)) :int
  (display :pointer)
  (list :pointer)
  (count :int)
  (style #.(custom-lispify "XICCEncodingStyle" 'enumname))
  (text_prop_return :pointer))

(cl:export '#.(custom-lispify "XmbTextListToTextProperty" 'function))

(cffi:defcfun ("XwcTextListToTextProperty" #.(custom-lispify "XwcTextListToTextProperty" 'function)) :int
  (display :pointer)
  (list :pointer)
  (count :int)
  (style #.(custom-lispify "XICCEncodingStyle" 'enumname))
  (text_prop_return :pointer))

(cl:export '#.(custom-lispify "XwcTextListToTextProperty" 'function))

(cffi:defcfun ("Xutf8TextListToTextProperty" #.(custom-lispify "Xutf8TextListToTextProperty" 'function)) :int
  (display :pointer)
  (list :pointer)
  (count :int)
  (style #.(custom-lispify "XICCEncodingStyle" 'enumname))
  (text_prop_return :pointer))

(cl:export '#.(custom-lispify "Xutf8TextListToTextProperty" 'function))

(cffi:defcfun ("XwcFreeStringList" #.(custom-lispify "XwcFreeStringList" 'function)) :void
  (list :pointer))

(cl:export '#.(custom-lispify "XwcFreeStringList" 'function))

(cffi:defcfun ("XTextPropertyToStringList" #.(custom-lispify "XTextPropertyToStringList" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XTextPropertyToStringList" 'function))

(cffi:defcfun ("XmbTextPropertyToTextList" #.(custom-lispify "XmbTextPropertyToTextList" 'function)) :int
  (display :pointer)
  (text_prop :pointer)
  (list_return :pointer)
  (count_return :pointer))

(cl:export '#.(custom-lispify "XmbTextPropertyToTextList" 'function))

(cffi:defcfun ("XwcTextPropertyToTextList" #.(custom-lispify "XwcTextPropertyToTextList" 'function)) :int
  (display :pointer)
  (text_prop :pointer)
  (list_return :pointer)
  (count_return :pointer))

(cl:export '#.(custom-lispify "XwcTextPropertyToTextList" 'function))

(cffi:defcfun ("Xutf8TextPropertyToTextList" #.(custom-lispify "Xutf8TextPropertyToTextList" 'function)) :int
  (display :pointer)
  (text_prop :pointer)
  (list_return :pointer)
  (count_return :pointer))

(cl:export '#.(custom-lispify "Xutf8TextPropertyToTextList" 'function))

(cffi:defcfun ("XUnionRectWithRegion" #.(custom-lispify "XUnionRectWithRegion" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XUnionRectWithRegion" 'function))

(cffi:defcfun ("XUnionRegion" #.(custom-lispify "XUnionRegion" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XUnionRegion" 'function))

(cffi:defcfun ("XWMGeometry" #.(custom-lispify "XWMGeometry" 'function)) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 string-or-ptr)
  (arg3 string-or-ptr)
  (arg4 :unsigned-int)
  (arg5 :pointer)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer)
  (arg9 :pointer)
  (arg10 :pointer))

(cl:export '#.(custom-lispify "XWMGeometry" 'function))

(cffi:defcfun ("XXorRegion" #.(custom-lispify "XXorRegion" 'function)) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cl:export '#.(custom-lispify "XXorRegion" 'function))

(cl:defconstant #.(custom-lispify "GLX_VERSION_1_1" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_VERSION_1_1" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VERSION_1_2" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_VERSION_1_2" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VERSION_1_3" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_VERSION_1_3" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VERSION_1_4" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_VERSION_1_4" 'constant))

(cl:defconstant #.(custom-lispify "GLX_EXTENSION_NAME" 'constant) '#.(intern "GLX"))

(cl:export '#.(custom-lispify "GLX_EXTENSION_NAME" 'constant))

(cl:defconstant #.(custom-lispify "GLX_USE_GL" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_USE_GL" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BUFFER_SIZE" 'constant) 2)

(cl:export '#.(custom-lispify "GLX_BUFFER_SIZE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_LEVEL" 'constant) 3)

(cl:export '#.(custom-lispify "GLX_LEVEL" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RGBA" 'constant) 4)

(cl:export '#.(custom-lispify "GLX_RGBA" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DOUBLEBUFFER" 'constant) 5)

(cl:export '#.(custom-lispify "GLX_DOUBLEBUFFER" 'constant))

(cl:defconstant #.(custom-lispify "GLX_STEREO" 'constant) 6)

(cl:export '#.(custom-lispify "GLX_STEREO" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX_BUFFERS" 'constant) 7)

(cl:export '#.(custom-lispify "GLX_AUX_BUFFERS" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RED_SIZE" 'constant) 8)

(cl:export '#.(custom-lispify "GLX_RED_SIZE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GREEN_SIZE" 'constant) 9)

(cl:export '#.(custom-lispify "GLX_GREEN_SIZE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BLUE_SIZE" 'constant) 10)

(cl:export '#.(custom-lispify "GLX_BLUE_SIZE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_ALPHA_SIZE" 'constant) 11)

(cl:export '#.(custom-lispify "GLX_ALPHA_SIZE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DEPTH_SIZE" 'constant) 12)

(cl:export '#.(custom-lispify "GLX_DEPTH_SIZE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_STENCIL_SIZE" 'constant) 13)

(cl:export '#.(custom-lispify "GLX_STENCIL_SIZE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_ACCUM_RED_SIZE" 'constant) 14)

(cl:export '#.(custom-lispify "GLX_ACCUM_RED_SIZE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_ACCUM_GREEN_SIZE" 'constant) 15)

(cl:export '#.(custom-lispify "GLX_ACCUM_GREEN_SIZE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_ACCUM_BLUE_SIZE" 'constant) 16)

(cl:export '#.(custom-lispify "GLX_ACCUM_BLUE_SIZE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_ACCUM_ALPHA_SIZE" 'constant) 17)

(cl:export '#.(custom-lispify "GLX_ACCUM_ALPHA_SIZE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BAD_SCREEN" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_BAD_SCREEN" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BAD_ATTRIBUTE" 'constant) 2)

(cl:export '#.(custom-lispify "GLX_BAD_ATTRIBUTE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_NO_EXTENSION" 'constant) 3)

(cl:export '#.(custom-lispify "GLX_NO_EXTENSION" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BAD_VISUAL" 'constant) 4)

(cl:export '#.(custom-lispify "GLX_BAD_VISUAL" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BAD_CONTEXT" 'constant) 5)

(cl:export '#.(custom-lispify "GLX_BAD_CONTEXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BAD_VALUE" 'constant) 6)

(cl:export '#.(custom-lispify "GLX_BAD_VALUE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BAD_ENUM" 'constant) 7)

(cl:export '#.(custom-lispify "GLX_BAD_ENUM" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VENDOR" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_VENDOR" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VERSION" 'constant) 2)

(cl:export '#.(custom-lispify "GLX_VERSION" 'constant))

(cl:defconstant #.(custom-lispify "GLX_EXTENSIONS" 'constant) 3)

(cl:export '#.(custom-lispify "GLX_EXTENSIONS" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONFIG_CAVEAT" 'constant) #x020)

(cl:export '#.(custom-lispify "GLX_CONFIG_CAVEAT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DONT_CARE" 'constant) #x0FFFFFFFF)

(cl:export '#.(custom-lispify "GLX_DONT_CARE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_X_VISUAL_TYPE" 'constant) #x022)

(cl:export '#.(custom-lispify "GLX_X_VISUAL_TYPE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_TYPE" 'constant) #x023)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_TYPE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_INDEX_VALUE" 'constant) #x024)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_INDEX_VALUE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_RED_VALUE" 'constant) #x025)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_RED_VALUE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_GREEN_VALUE" 'constant) #x026)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_GREEN_VALUE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_BLUE_VALUE" 'constant) #x027)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_BLUE_VALUE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_ALPHA_VALUE" 'constant) #x028)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_ALPHA_VALUE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_WINDOW_BIT" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_WINDOW_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PIXMAP_BIT" 'constant) #x000000002)

(cl:export '#.(custom-lispify "GLX_PIXMAP_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PBUFFER_BIT" 'constant) #x000000004)

(cl:export '#.(custom-lispify "GLX_PBUFFER_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX_BUFFERS_BIT" 'constant) #x000000010)

(cl:export '#.(custom-lispify "GLX_AUX_BUFFERS_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FRONT_LEFT_BUFFER_BIT" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_FRONT_LEFT_BUFFER_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FRONT_RIGHT_BUFFER_BIT" 'constant) #x000000002)

(cl:export '#.(custom-lispify "GLX_FRONT_RIGHT_BUFFER_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BACK_LEFT_BUFFER_BIT" 'constant) #x000000004)

(cl:export '#.(custom-lispify "GLX_BACK_LEFT_BUFFER_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BACK_RIGHT_BUFFER_BIT" 'constant) #x000000008)

(cl:export '#.(custom-lispify "GLX_BACK_RIGHT_BUFFER_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DEPTH_BUFFER_BIT" 'constant) #x000000020)

(cl:export '#.(custom-lispify "GLX_DEPTH_BUFFER_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_STENCIL_BUFFER_BIT" 'constant) #x000000040)

(cl:export '#.(custom-lispify "GLX_STENCIL_BUFFER_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_ACCUM_BUFFER_BIT" 'constant) #x000000080)

(cl:export '#.(custom-lispify "GLX_ACCUM_BUFFER_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_NONE" 'constant) #x08000)

(cl:export '#.(custom-lispify "GLX_NONE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SLOW_CONFIG" 'constant) #x08001)

(cl:export '#.(custom-lispify "GLX_SLOW_CONFIG" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRUE_COLOR" 'constant) #x08002)

(cl:export '#.(custom-lispify "GLX_TRUE_COLOR" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DIRECT_COLOR" 'constant) #x08003)

(cl:export '#.(custom-lispify "GLX_DIRECT_COLOR" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PSEUDO_COLOR" 'constant) #x08004)

(cl:export '#.(custom-lispify "GLX_PSEUDO_COLOR" 'constant))

(cl:defconstant #.(custom-lispify "GLX_STATIC_COLOR" 'constant) #x08005)

(cl:export '#.(custom-lispify "GLX_STATIC_COLOR" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GRAY_SCALE" 'constant) #x08006)

(cl:export '#.(custom-lispify "GLX_GRAY_SCALE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_STATIC_GRAY" 'constant) #x08007)

(cl:export '#.(custom-lispify "GLX_STATIC_GRAY" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_RGB" 'constant) #x08008)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_RGB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_INDEX" 'constant) #x08009)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_INDEX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VISUAL_ID" 'constant) #x0800B)

(cl:export '#.(custom-lispify "GLX_VISUAL_ID" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SCREEN" 'constant) #x0800C)

(cl:export '#.(custom-lispify "GLX_SCREEN" 'constant))

(cl:defconstant #.(custom-lispify "GLX_NON_CONFORMANT_CONFIG" 'constant) #x0800D)

(cl:export '#.(custom-lispify "GLX_NON_CONFORMANT_CONFIG" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DRAWABLE_TYPE" 'constant) #x08010)

(cl:export '#.(custom-lispify "GLX_DRAWABLE_TYPE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RENDER_TYPE" 'constant) #x08011)

(cl:export '#.(custom-lispify "GLX_RENDER_TYPE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_X_RENDERABLE" 'constant) #x08012)

(cl:export '#.(custom-lispify "GLX_X_RENDERABLE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FBCONFIG_ID" 'constant) #x08013)

(cl:export '#.(custom-lispify "GLX_FBCONFIG_ID" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RGBA_TYPE" 'constant) #x08014)

(cl:export '#.(custom-lispify "GLX_RGBA_TYPE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_COLOR_INDEX_TYPE" 'constant) #x08015)

(cl:export '#.(custom-lispify "GLX_COLOR_INDEX_TYPE" 'constant))

(cl:defconstant #.(custom-lispify "GLX_MAX_PBUFFER_WIDTH" 'constant) #x08016)

(cl:export '#.(custom-lispify "GLX_MAX_PBUFFER_WIDTH" 'constant))

(cl:defconstant #.(custom-lispify "GLX_MAX_PBUFFER_HEIGHT" 'constant) #x08017)

(cl:export '#.(custom-lispify "GLX_MAX_PBUFFER_HEIGHT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_MAX_PBUFFER_PIXELS" 'constant) #x08018)

(cl:export '#.(custom-lispify "GLX_MAX_PBUFFER_PIXELS" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PRESERVED_CONTENTS" 'constant) #x0801B)

(cl:export '#.(custom-lispify "GLX_PRESERVED_CONTENTS" 'constant))

(cl:defconstant #.(custom-lispify "GLX_LARGEST_PBUFFER" 'constant) #x0801C)

(cl:export '#.(custom-lispify "GLX_LARGEST_PBUFFER" 'constant))

(cl:defconstant #.(custom-lispify "GLX_WIDTH" 'constant) #x0801D)

(cl:export '#.(custom-lispify "GLX_WIDTH" 'constant))

(cl:defconstant #.(custom-lispify "GLX_HEIGHT" 'constant) #x0801E)

(cl:export '#.(custom-lispify "GLX_HEIGHT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_EVENT_MASK" 'constant) #x0801F)

(cl:export '#.(custom-lispify "GLX_EVENT_MASK" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DAMAGED" 'constant) #x08020)

(cl:export '#.(custom-lispify "GLX_DAMAGED" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SAVED" 'constant) #x08021)

(cl:export '#.(custom-lispify "GLX_SAVED" 'constant))

(cl:defconstant #.(custom-lispify "GLX_WINDOW" 'constant) #x08022)

(cl:export '#.(custom-lispify "GLX_WINDOW" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PBUFFER" 'constant) #x08023)

(cl:export '#.(custom-lispify "GLX_PBUFFER" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PBUFFER_HEIGHT" 'constant) #x08040)

(cl:export '#.(custom-lispify "GLX_PBUFFER_HEIGHT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PBUFFER_WIDTH" 'constant) #x08041)

(cl:export '#.(custom-lispify "GLX_PBUFFER_WIDTH" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RGBA_BIT" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_RGBA_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_COLOR_INDEX_BIT" 'constant) #x000000002)

(cl:export '#.(custom-lispify "GLX_COLOR_INDEX_BIT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PBUFFER_CLOBBER_MASK" 'constant) #x008000000)

(cl:export '#.(custom-lispify "GLX_PBUFFER_CLOBBER_MASK" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SAMPLE_BUFFERS" 'constant) #x0186a0)

(cl:export '#.(custom-lispify "GLX_SAMPLE_BUFFERS" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SAMPLES" 'constant) #x0186a1)

(cl:export '#.(custom-lispify "GLX_SAMPLES" 'constant))

(cffi:defctype #.(custom-lispify "GLXContext" 'typename) :pointer)

(cl:export '#.(custom-lispify "GLXContext" 'typename))

(cffi:defctype #.(custom-lispify "GLXPixmap" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "GLXPixmap" 'typename))

(cffi:defctype #.(custom-lispify "GLXDrawable" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "GLXDrawable" 'typename))

(cffi:defctype #.(custom-lispify "GLXFBConfig" 'typename) :pointer)

(cl:export '#.(custom-lispify "GLXFBConfig" 'typename))

(cffi:defctype #.(custom-lispify "GLXFBConfigID" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "GLXFBConfigID" 'typename))

(cffi:defctype #.(custom-lispify "GLXContextID" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "GLXContextID" 'typename))

(cffi:defctype #.(custom-lispify "GLXWindow" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "GLXWindow" 'typename))

(cffi:defctype #.(custom-lispify "GLXPbuffer" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "GLXPbuffer" 'typename))

(cl:defconstant #.(custom-lispify "GLX_PbufferClobber" 'constant) 0)

(cl:export '#.(custom-lispify "GLX_PbufferClobber" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BufferSwapComplete" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_BufferSwapComplete" 'constant))

(cl:defconstant #.(custom-lispify "__GLX_NUMBER_EVENTS" 'constant) 17)

(cl:export '#.(custom-lispify "__GLX_NUMBER_EVENTS" 'constant))

(cffi:defcfun ("glXChooseVisual" #.(custom-lispify "glXChooseVisual" 'function)) :pointer
  (dpy :pointer)
  (screen :int)
  (attribList :pointer))

(cl:export '#.(custom-lispify "glXChooseVisual" 'function))

(cffi:defcfun ("glXCreateContext" #.(custom-lispify "glXCreateContext" 'function)) :pointer
  (dpy :pointer)
  (vis :pointer)
  (shareList :pointer)
  (direct :int))

(cl:export '#.(custom-lispify "glXCreateContext" 'function))

(cffi:defcfun ("glXDestroyContext" #.(custom-lispify "glXDestroyContext" 'function)) :void
  (dpy :pointer)
  (ctx :pointer))

(cl:export '#.(custom-lispify "glXDestroyContext" 'function))

(cffi:defcfun ("glXMakeCurrent" #.(custom-lispify "glXMakeCurrent" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long)
  (ctx :pointer))

(cl:export '#.(custom-lispify "glXMakeCurrent" 'function))

(cffi:defcfun ("glXCopyContext" #.(custom-lispify "glXCopyContext" 'function)) :void
  (dpy :pointer)
  (src :pointer)
  (dst :pointer)
  (mask :unsigned-long))

(cl:export '#.(custom-lispify "glXCopyContext" 'function))

(cffi:defcfun ("glXSwapBuffers" #.(custom-lispify "glXSwapBuffers" 'function)) :void
  (dpy :pointer)
  (drawable :unsigned-long))

(cl:export '#.(custom-lispify "glXSwapBuffers" 'function))

(cffi:defcfun ("glXCreateGLXPixmap" #.(custom-lispify "glXCreateGLXPixmap" 'function)) :unsigned-long
  (dpy :pointer)
  (visual :pointer)
  (pixmap :pointer))

(cl:export '#.(custom-lispify "glXCreateGLXPixmap" 'function))

(cffi:defcfun ("glXDestroyGLXPixmap" #.(custom-lispify "glXDestroyGLXPixmap" 'function)) :void
  (dpy :pointer)
  (pixmap :unsigned-long))

(cl:export '#.(custom-lispify "glXDestroyGLXPixmap" 'function))

(cffi:defcfun ("glXQueryExtension" #.(custom-lispify "glXQueryExtension" 'function)) :int
  (dpy :pointer)
  (errorb :pointer)
  (event :pointer))

(cl:export '#.(custom-lispify "glXQueryExtension" 'function))

(cffi:defcfun ("glXQueryVersion" #.(custom-lispify "glXQueryVersion" 'function)) :int
  (dpy :pointer)
  (maj :pointer)
  (min :pointer))

(cl:export '#.(custom-lispify "glXQueryVersion" 'function))

(cffi:defcfun ("glXIsDirect" #.(custom-lispify "glXIsDirect" 'function)) :int
  (dpy :pointer)
  (ctx :pointer))

(cl:export '#.(custom-lispify "glXIsDirect" 'function))

(cffi:defcfun ("glXGetConfig" #.(custom-lispify "glXGetConfig" 'function)) :int
  (dpy :pointer)
  (visual :pointer)
  (attrib :int)
  (value :pointer))

(cl:export '#.(custom-lispify "glXGetConfig" 'function))

(cffi:defcfun ("glXGetCurrentContext" #.(custom-lispify "glXGetCurrentContext" 'function)) :pointer)

(cl:export '#.(custom-lispify "glXGetCurrentContext" 'function))

(cffi:defcfun ("glXGetCurrentDrawable" #.(custom-lispify "glXGetCurrentDrawable" 'function)) :unsigned-long)

(cl:export '#.(custom-lispify "glXGetCurrentDrawable" 'function))

(cffi:defcfun ("glXWaitGL" #.(custom-lispify "glXWaitGL" 'function)) :void)

(cl:export '#.(custom-lispify "glXWaitGL" 'function))

(cffi:defcfun ("glXWaitX" #.(custom-lispify "glXWaitX" 'function)) :void)

(cl:export '#.(custom-lispify "glXWaitX" 'function))

(cffi:defcfun ("glXUseXFont" #.(custom-lispify "glXUseXFont" 'function)) :void
  (font :pointer)
  (first :int)
  (count :int)
  (list :int))

(cl:export '#.(custom-lispify "glXUseXFont" 'function))

(cffi:defcfun ("glXQueryExtensionsString" #.(custom-lispify "glXQueryExtensionsString" 'function)) string-or-ptr
  (dpy :pointer)
  (screen :int))

(cl:export '#.(custom-lispify "glXQueryExtensionsString" 'function))

(cffi:defcfun ("glXQueryServerString" #.(custom-lispify "glXQueryServerString" 'function)) string-or-ptr
  (dpy :pointer)
  (screen :int)
  (name :int))

(cl:export '#.(custom-lispify "glXQueryServerString" 'function))

(cffi:defcfun ("glXGetClientString" #.(custom-lispify "glXGetClientString" 'function)) string-or-ptr
  (dpy :pointer)
  (name :int))

(cl:export '#.(custom-lispify "glXGetClientString" 'function))

(cffi:defcfun ("glXGetCurrentDisplay" #.(custom-lispify "glXGetCurrentDisplay" 'function)) :pointer)

(cl:export '#.(custom-lispify "glXGetCurrentDisplay" 'function))

(cffi:defcfun ("glXChooseFBConfig" #.(custom-lispify "glXChooseFBConfig" 'function)) :pointer
  (dpy :pointer)
  (screen :int)
  (attribList :pointer)
  (nitems :pointer))

(cl:export '#.(custom-lispify "glXChooseFBConfig" 'function))

(cffi:defcfun ("glXGetFBConfigAttrib" #.(custom-lispify "glXGetFBConfigAttrib" 'function)) :int
  (dpy :pointer)
  (config :pointer)
  (attribute :int)
  (value :pointer))

(cl:export '#.(custom-lispify "glXGetFBConfigAttrib" 'function))

(cffi:defcfun ("glXGetFBConfigs" #.(custom-lispify "glXGetFBConfigs" 'function)) :pointer
  (dpy :pointer)
  (screen :int)
  (nelements :pointer))

(cl:export '#.(custom-lispify "glXGetFBConfigs" 'function))

(cffi:defcfun ("glXGetVisualFromFBConfig" #.(custom-lispify "glXGetVisualFromFBConfig" 'function)) :pointer
  (dpy :pointer)
  (config :pointer))

(cl:export '#.(custom-lispify "glXGetVisualFromFBConfig" 'function))

(cffi:defcfun ("glXCreateWindow" #.(custom-lispify "glXCreateWindow" 'function)) :unsigned-long
  (dpy :pointer)
  (config :pointer)
  (win :unsigned-long)
  (attribList :pointer))

(cl:export '#.(custom-lispify "glXCreateWindow" 'function))

(cffi:defcfun ("glXDestroyWindow" #.(custom-lispify "glXDestroyWindow" 'function)) :void
  (dpy :pointer)
  (window :unsigned-long))

(cl:export '#.(custom-lispify "glXDestroyWindow" 'function))

(cffi:defcfun ("glXCreatePixmap" #.(custom-lispify "glXCreatePixmap" 'function)) :unsigned-long
  (dpy :pointer)
  (config :pointer)
  (pixmap :pointer)
  (attribList :pointer))

(cl:export '#.(custom-lispify "glXCreatePixmap" 'function))

(cffi:defcfun ("glXDestroyPixmap" #.(custom-lispify "glXDestroyPixmap" 'function)) :void
  (dpy :pointer)
  (pixmap :unsigned-long))

(cl:export '#.(custom-lispify "glXDestroyPixmap" 'function))

(cffi:defcfun ("glXCreatePbuffer" #.(custom-lispify "glXCreatePbuffer" 'function)) :unsigned-long
  (dpy :pointer)
  (config :pointer)
  (attribList :pointer))

(cl:export '#.(custom-lispify "glXCreatePbuffer" 'function))

(cffi:defcfun ("glXDestroyPbuffer" #.(custom-lispify "glXDestroyPbuffer" 'function)) :void
  (dpy :pointer)
  (pbuf :unsigned-long))

(cl:export '#.(custom-lispify "glXDestroyPbuffer" 'function))

(cffi:defcfun ("glXQueryDrawable" #.(custom-lispify "glXQueryDrawable" 'function)) :void
  (dpy :pointer)
  (draw :unsigned-long)
  (attribute :int)
  (value :pointer))

(cl:export '#.(custom-lispify "glXQueryDrawable" 'function))

(cffi:defcfun ("glXCreateNewContext" #.(custom-lispify "glXCreateNewContext" 'function)) :pointer
  (dpy :pointer)
  (config :pointer)
  (renderType :int)
  (shareList :pointer)
  (direct :int))

(cl:export '#.(custom-lispify "glXCreateNewContext" 'function))

(cffi:defcfun ("glXMakeContextCurrent" #.(custom-lispify "glXMakeContextCurrent" 'function)) :int
  (dpy :pointer)
  (draw :unsigned-long)
  (read :unsigned-long)
  (ctx :pointer))

(cl:export '#.(custom-lispify "glXMakeContextCurrent" 'function))

(cffi:defcfun ("glXGetCurrentReadDrawable" #.(custom-lispify "glXGetCurrentReadDrawable" 'function)) :unsigned-long)

(cl:export '#.(custom-lispify "glXGetCurrentReadDrawable" 'function))

(cffi:defcfun ("glXQueryContext" #.(custom-lispify "glXQueryContext" 'function)) :int
  (dpy :pointer)
  (ctx :pointer)
  (attribute :int)
  (value :pointer))

(cl:export '#.(custom-lispify "glXQueryContext" 'function))

(cffi:defcfun ("glXSelectEvent" #.(custom-lispify "glXSelectEvent" 'function)) :void
  (dpy :pointer)
  (drawable :unsigned-long)
  (mask :unsigned-long))

(cl:export '#.(custom-lispify "glXSelectEvent" 'function))

(cffi:defcfun ("glXGetSelectedEvent" #.(custom-lispify "glXGetSelectedEvent" 'function)) :void
  (dpy :pointer)
  (drawable :unsigned-long)
  (mask :pointer))

(cl:export '#.(custom-lispify "glXGetSelectedEvent" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXGETFBCONFIGSPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETFBCONFIGSPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXCHOOSEFBCONFIGPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCHOOSEFBCONFIGPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETFBCONFIGATTRIBPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETFBCONFIGATTRIBPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETVISUALFROMFBCONFIGPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETVISUALFROMFBCONFIGPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXCREATEWINDOWPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCREATEWINDOWPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXDESTROYWINDOWPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXDESTROYWINDOWPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXCREATEPIXMAPPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCREATEPIXMAPPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXDESTROYPIXMAPPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXDESTROYPIXMAPPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXCREATEPBUFFERPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCREATEPBUFFERPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXDESTROYPBUFFERPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXDESTROYPBUFFERPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYDRAWABLEPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYDRAWABLEPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXCREATENEWCONTEXTPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCREATENEWCONTEXTPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXMAKECONTEXTCURRENTPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXMAKECONTEXTCURRENTPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETCURRENTREADDRAWABLEPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETCURRENTREADDRAWABLEPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETCURRENTDISPLAYPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETCURRENTDISPLAYPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYCONTEXTPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYCONTEXTPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXSELECTEVENTPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXSELECTEVENTPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETSELECTEDEVENTPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETSELECTEDEVENTPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_ARB_get_proc_address" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_ARB_get_proc_address" 'constant))

(cffi:defctype #.(custom-lispify "__GLXextFuncPtr" 'typename) :pointer)

(cl:export '#.(custom-lispify "__GLXextFuncPtr" 'typename))

(cffi:defcfun ("glXGetProcAddressARB" #.(custom-lispify "glXGetProcAddressARB" 'function)) :pointer
  (arg0 :pointer))

(cl:export '#.(custom-lispify "glXGetProcAddressARB" 'function))

(cffi:defcfun ("glXGetProcAddress" #.(custom-lispify "glXGetProcAddress" 'function)) :pointer
  (procname :pointer))

(cl:export '#.(custom-lispify "glXGetProcAddress" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXGETPROCADDRESSPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETPROCADDRESSPROC" 'typename))

(cffi:defcfun ("glXAllocateMemoryNV" #.(custom-lispify "glXAllocateMemoryNV" 'function)) :pointer
  (size :pointer)
  (readfreq :pointer)
  (writefreq :pointer)
  (priority :pointer))

(cl:export '#.(custom-lispify "glXAllocateMemoryNV" 'function))

(cffi:defcfun ("glXFreeMemoryNV" #.(custom-lispify "glXFreeMemoryNV" 'function)) :void
  (pointer :pointer))

(cl:export '#.(custom-lispify "glXFreeMemoryNV" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXALLOCATEMEMORYNVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXALLOCATEMEMORYNVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXFREEMEMORYNVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXFREEMEMORYNVPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_ARB_render_texture" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_ARB_render_texture" 'constant))

(cffi:defcfun ("glXBindTexImageARB" #.(custom-lispify "glXBindTexImageARB" 'function)) :int
  (dpy :pointer)
  (pbuffer :unsigned-long)
  (buffer :int))

(cl:export '#.(custom-lispify "glXBindTexImageARB" 'function))

(cffi:defcfun ("glXReleaseTexImageARB" #.(custom-lispify "glXReleaseTexImageARB" 'function)) :int
  (dpy :pointer)
  (pbuffer :unsigned-long)
  (buffer :int))

(cl:export '#.(custom-lispify "glXReleaseTexImageARB" 'function))

(cffi:defcfun ("glXDrawableAttribARB" #.(custom-lispify "glXDrawableAttribARB" 'function)) :int
  (dpy :pointer)
  (draw :unsigned-long)
  (attribList :pointer))

(cl:export '#.(custom-lispify "glXDrawableAttribARB" 'function))

(cl:defconstant #.(custom-lispify "GLX_NV_float_buffer" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_NV_float_buffer" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FLOAT_COMPONENTS_NV" 'constant) #x020B0)

(cl:export '#.(custom-lispify "GLX_FLOAT_COMPONENTS_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_MESA_swap_frame_usage" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_MESA_swap_frame_usage" 'constant))

(cffi:defcfun ("glXGetFrameUsageMESA" #.(custom-lispify "glXGetFrameUsageMESA" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long)
  (usage :pointer))

(cl:export '#.(custom-lispify "glXGetFrameUsageMESA" 'function))

(cffi:defcfun ("glXBeginFrameTrackingMESA" #.(custom-lispify "glXBeginFrameTrackingMESA" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long))

(cl:export '#.(custom-lispify "glXBeginFrameTrackingMESA" 'function))

(cffi:defcfun ("glXEndFrameTrackingMESA" #.(custom-lispify "glXEndFrameTrackingMESA" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long))

(cl:export '#.(custom-lispify "glXEndFrameTrackingMESA" 'function))

(cffi:defcfun ("glXQueryFrameTrackingMESA" #.(custom-lispify "glXQueryFrameTrackingMESA" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long)
  (swapCount :pointer)
  (missedFrames :pointer)
  (lastMissedUsage :pointer))

(cl:export '#.(custom-lispify "glXQueryFrameTrackingMESA" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXGETFRAMEUSAGEMESAPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETFRAMEUSAGEMESAPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXBEGINFRAMETRACKINGMESAPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXBEGINFRAMETRACKINGMESAPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXENDFRAMETRACKINGMESAPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXENDFRAMETRACKINGMESAPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYFRAMETRACKINGMESAPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYFRAMETRACKINGMESAPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_MESA_swap_control" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_MESA_swap_control" 'constant))

(cffi:defcfun ("glXSwapIntervalMESA" #.(custom-lispify "glXSwapIntervalMESA" 'function)) :int
  (interval :unsigned-int))

(cl:export '#.(custom-lispify "glXSwapIntervalMESA" 'function))

(cffi:defcfun ("glXGetSwapIntervalMESA" #.(custom-lispify "glXGetSwapIntervalMESA" 'function)) :int)

(cl:export '#.(custom-lispify "glXGetSwapIntervalMESA" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXSWAPINTERVALMESAPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXSWAPINTERVALMESAPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETSWAPINTERVALMESAPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETSWAPINTERVALMESAPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_EXT_texture_from_pixmap" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_EXT_texture_from_pixmap" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BIND_TO_TEXTURE_RGB_EXT" 'constant) #x020D0)

(cl:export '#.(custom-lispify "GLX_BIND_TO_TEXTURE_RGB_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BIND_TO_TEXTURE_RGBA_EXT" 'constant) #x020D1)

(cl:export '#.(custom-lispify "GLX_BIND_TO_TEXTURE_RGBA_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BIND_TO_MIPMAP_TEXTURE_EXT" 'constant) #x020D2)

(cl:export '#.(custom-lispify "GLX_BIND_TO_MIPMAP_TEXTURE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BIND_TO_TEXTURE_TARGETS_EXT" 'constant) #x020D3)

(cl:export '#.(custom-lispify "GLX_BIND_TO_TEXTURE_TARGETS_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_Y_INVERTED_EXT" 'constant) #x020D4)

(cl:export '#.(custom-lispify "GLX_Y_INVERTED_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TEXTURE_FORMAT_EXT" 'constant) #x020D5)

(cl:export '#.(custom-lispify "GLX_TEXTURE_FORMAT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TEXTURE_TARGET_EXT" 'constant) #x020D6)

(cl:export '#.(custom-lispify "GLX_TEXTURE_TARGET_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_MIPMAP_TEXTURE_EXT" 'constant) #x020D7)

(cl:export '#.(custom-lispify "GLX_MIPMAP_TEXTURE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TEXTURE_FORMAT_NONE_EXT" 'constant) #x020D8)

(cl:export '#.(custom-lispify "GLX_TEXTURE_FORMAT_NONE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TEXTURE_FORMAT_RGB_EXT" 'constant) #x020D9)

(cl:export '#.(custom-lispify "GLX_TEXTURE_FORMAT_RGB_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TEXTURE_FORMAT_RGBA_EXT" 'constant) #x020DA)

(cl:export '#.(custom-lispify "GLX_TEXTURE_FORMAT_RGBA_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TEXTURE_1D_BIT_EXT" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_TEXTURE_1D_BIT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TEXTURE_2D_BIT_EXT" 'constant) #x000000002)

(cl:export '#.(custom-lispify "GLX_TEXTURE_2D_BIT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TEXTURE_RECTANGLE_BIT_EXT" 'constant) #x000000004)

(cl:export '#.(custom-lispify "GLX_TEXTURE_RECTANGLE_BIT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TEXTURE_1D_EXT" 'constant) #x020DB)

(cl:export '#.(custom-lispify "GLX_TEXTURE_1D_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TEXTURE_2D_EXT" 'constant) #x020DC)

(cl:export '#.(custom-lispify "GLX_TEXTURE_2D_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TEXTURE_RECTANGLE_EXT" 'constant) #x020DD)

(cl:export '#.(custom-lispify "GLX_TEXTURE_RECTANGLE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FRONT_LEFT_EXT" 'constant) #x020DE)

(cl:export '#.(custom-lispify "GLX_FRONT_LEFT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FRONT_RIGHT_EXT" 'constant) #x020DF)

(cl:export '#.(custom-lispify "GLX_FRONT_RIGHT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BACK_LEFT_EXT" 'constant) #x020E0)

(cl:export '#.(custom-lispify "GLX_BACK_LEFT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BACK_RIGHT_EXT" 'constant) #x020E1)

(cl:export '#.(custom-lispify "GLX_BACK_RIGHT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FRONT_EXT" 'constant) #x020DE)

(cl:export '#.(custom-lispify "GLX_FRONT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BACK_EXT" 'constant) #x020E0)

(cl:export '#.(custom-lispify "GLX_BACK_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX0_EXT" 'constant) #x020E2)

(cl:export '#.(custom-lispify "GLX_AUX0_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX1_EXT" 'constant) #x020E3)

(cl:export '#.(custom-lispify "GLX_AUX1_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX2_EXT" 'constant) #x020E4)

(cl:export '#.(custom-lispify "GLX_AUX2_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX3_EXT" 'constant) #x020E5)

(cl:export '#.(custom-lispify "GLX_AUX3_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX4_EXT" 'constant) #x020E6)

(cl:export '#.(custom-lispify "GLX_AUX4_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX5_EXT" 'constant) #x020E7)

(cl:export '#.(custom-lispify "GLX_AUX5_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX6_EXT" 'constant) #x020E8)

(cl:export '#.(custom-lispify "GLX_AUX6_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX7_EXT" 'constant) #x020E9)

(cl:export '#.(custom-lispify "GLX_AUX7_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX8_EXT" 'constant) #x020EA)

(cl:export '#.(custom-lispify "GLX_AUX8_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX9_EXT" 'constant) #x020EB)

(cl:export '#.(custom-lispify "GLX_AUX9_EXT" 'constant))

(cffi:defcfun ("glXBindTexImageEXT" #.(custom-lispify "glXBindTexImageEXT" 'function)) :void
  (dpy :pointer)
  (drawable :unsigned-long)
  (buffer :int)
  (attrib_list :pointer))

(cl:export '#.(custom-lispify "glXBindTexImageEXT" 'function))

(cffi:defcfun ("glXReleaseTexImageEXT" #.(custom-lispify "glXReleaseTexImageEXT" 'function)) :void
  (dpy :pointer)
  (drawable :unsigned-long)
  (buffer :int))

(cl:export '#.(custom-lispify "glXReleaseTexImageEXT" 'function))

(cffi:defcstruct #.(custom-lispify "GLXPbufferClobberEvent" 'structname-decl)
	(#.(custom-lispify "event_type" 'slotname) :int)
	(#.(custom-lispify "draw_type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "drawable" 'slotname) :unsigned-long)
	(#.(custom-lispify "buffer_mask" 'slotname) :unsigned-int)
	(#.(custom-lispify "aux_buffer" 'slotname) :unsigned-int)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "count" 'slotname) :int))

(cl:export '#.(custom-lispify "GLXPbufferClobberEvent" 'classname))

(cl:export '#.(custom-lispify "event_type" 'slotname))

(cl:export '#.(custom-lispify "draw_type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "drawable" 'slotname))

(cl:export '#.(custom-lispify "buffer_mask" 'slotname))

(cl:export '#.(custom-lispify "aux_buffer" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "count" 'slotname))

(cffi:defcstruct #.(custom-lispify "GLXBufferSwapComplete" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "drawable" 'slotname) :unsigned-long)
	(#.(custom-lispify "event_type" 'slotname) :int)
	(#.(custom-lispify "ust" 'slotname) :pointer)
	(#.(custom-lispify "msc" 'slotname) :pointer)
	(#.(custom-lispify "sbc" 'slotname) :pointer))

(cl:export '#.(custom-lispify "GLXBufferSwapComplete" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "drawable" 'slotname))

(cl:export '#.(custom-lispify "event_type" 'slotname))

(cl:export '#.(custom-lispify "ust" 'slotname))

(cl:export '#.(custom-lispify "msc" 'slotname))

(cl:export '#.(custom-lispify "sbc" 'slotname))

(cffi:defcunion #.(custom-lispify "GLXEvent" 'unionname-decl)
	(#.(custom-lispify "glxpbufferclobber" 'slotname) #.(custom-lispify "GLXPbufferClobberEvent" 'structname))
	(#.(custom-lispify "glxbufferswapcomplete" 'slotname) #.(custom-lispify "GLXBufferSwapComplete" 'structname))
	(#.(custom-lispify "pad" 'slotname) :long :count 24))

(cl:export '#.(custom-lispify "GLXEvent" 'classname))

(cl:export '#.(custom-lispify "glxpbufferclobber" 'slotname))

(cl:export '#.(custom-lispify "glxbufferswapcomplete" 'slotname))

(cl:export '#.(custom-lispify "pad" 'slotname))

(cl:defconstant #.(custom-lispify "GLX_GLXEXT_VERSION" 'constant) 33)

(cl:export '#.(custom-lispify "GLX_GLXEXT_VERSION" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SAMPLE_BUFFERS_ARB" 'constant) 100000)

(cl:export '#.(custom-lispify "GLX_SAMPLE_BUFFERS_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SAMPLES_ARB" 'constant) 100001)

(cl:export '#.(custom-lispify "GLX_SAMPLES_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB" 'constant) #x02095)

(cl:export '#.(custom-lispify "GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RGBA_FLOAT_TYPE_ARB" 'constant) #x020B9)

(cl:export '#.(custom-lispify "GLX_RGBA_FLOAT_TYPE_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RGBA_FLOAT_BIT_ARB" 'constant) #x000000004)

(cl:export '#.(custom-lispify "GLX_RGBA_FLOAT_BIT_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB" 'constant) #x020B2)

(cl:export '#.(custom-lispify "GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_DEBUG_BIT_ARB" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_CONTEXT_DEBUG_BIT_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB" 'constant) #x000000002)

(cl:export '#.(custom-lispify "GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_MAJOR_VERSION_ARB" 'constant) #x02091)

(cl:export '#.(custom-lispify "GLX_CONTEXT_MAJOR_VERSION_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_MINOR_VERSION_ARB" 'constant) #x02092)

(cl:export '#.(custom-lispify "GLX_CONTEXT_MINOR_VERSION_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_FLAGS_ARB" 'constant) #x02094)

(cl:export '#.(custom-lispify "GLX_CONTEXT_FLAGS_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_CORE_PROFILE_BIT_ARB" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_CONTEXT_CORE_PROFILE_BIT_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB" 'constant) #x000000002)

(cl:export '#.(custom-lispify "GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_PROFILE_MASK_ARB" 'constant) #x09126)

(cl:export '#.(custom-lispify "GLX_CONTEXT_PROFILE_MASK_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB" 'constant) #x000000004)

(cl:export '#.(custom-lispify "GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_LOSE_CONTEXT_ON_RESET_ARB" 'constant) #x08252)

(cl:export '#.(custom-lispify "GLX_LOSE_CONTEXT_ON_RESET_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB" 'constant) #x08256)

(cl:export '#.(custom-lispify "GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_NO_RESET_NOTIFICATION_ARB" 'constant) #x08261)

(cl:export '#.(custom-lispify "GLX_NO_RESET_NOTIFICATION_ARB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SAMPLE_BUFFERS_SGIS" 'constant) 100000)

(cl:export '#.(custom-lispify "GLX_SAMPLE_BUFFERS_SGIS" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SAMPLES_SGIS" 'constant) 100001)

(cl:export '#.(custom-lispify "GLX_SAMPLES_SGIS" 'constant))

(cl:defconstant #.(custom-lispify "GLX_X_VISUAL_TYPE_EXT" 'constant) #x022)

(cl:export '#.(custom-lispify "GLX_X_VISUAL_TYPE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_TYPE_EXT" 'constant) #x023)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_TYPE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_INDEX_VALUE_EXT" 'constant) #x024)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_INDEX_VALUE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_RED_VALUE_EXT" 'constant) #x025)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_RED_VALUE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_GREEN_VALUE_EXT" 'constant) #x026)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_GREEN_VALUE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_BLUE_VALUE_EXT" 'constant) #x027)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_BLUE_VALUE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_ALPHA_VALUE_EXT" 'constant) #x028)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_ALPHA_VALUE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_NONE_EXT" 'constant) #x08000)

(cl:export '#.(custom-lispify "GLX_NONE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRUE_COLOR_EXT" 'constant) #x08002)

(cl:export '#.(custom-lispify "GLX_TRUE_COLOR_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DIRECT_COLOR_EXT" 'constant) #x08003)

(cl:export '#.(custom-lispify "GLX_DIRECT_COLOR_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PSEUDO_COLOR_EXT" 'constant) #x08004)

(cl:export '#.(custom-lispify "GLX_PSEUDO_COLOR_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_STATIC_COLOR_EXT" 'constant) #x08005)

(cl:export '#.(custom-lispify "GLX_STATIC_COLOR_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GRAY_SCALE_EXT" 'constant) #x08006)

(cl:export '#.(custom-lispify "GLX_GRAY_SCALE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_STATIC_GRAY_EXT" 'constant) #x08007)

(cl:export '#.(custom-lispify "GLX_STATIC_GRAY_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_RGB_EXT" 'constant) #x08008)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_RGB_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_TRANSPARENT_INDEX_EXT" 'constant) #x08009)

(cl:export '#.(custom-lispify "GLX_TRANSPARENT_INDEX_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VISUAL_CAVEAT_EXT" 'constant) #x020)

(cl:export '#.(custom-lispify "GLX_VISUAL_CAVEAT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SLOW_VISUAL_EXT" 'constant) #x08001)

(cl:export '#.(custom-lispify "GLX_SLOW_VISUAL_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_NON_CONFORMANT_VISUAL_EXT" 'constant) #x0800D)

(cl:export '#.(custom-lispify "GLX_NON_CONFORMANT_VISUAL_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SHARE_CONTEXT_EXT" 'constant) #x0800A)

(cl:export '#.(custom-lispify "GLX_SHARE_CONTEXT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VISUAL_ID_EXT" 'constant) #x0800B)

(cl:export '#.(custom-lispify "GLX_VISUAL_ID_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SCREEN_EXT" 'constant) #x0800C)

(cl:export '#.(custom-lispify "GLX_SCREEN_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_WINDOW_BIT_SGIX" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_WINDOW_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PIXMAP_BIT_SGIX" 'constant) #x000000002)

(cl:export '#.(custom-lispify "GLX_PIXMAP_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RGBA_BIT_SGIX" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_RGBA_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_COLOR_INDEX_BIT_SGIX" 'constant) #x000000002)

(cl:export '#.(custom-lispify "GLX_COLOR_INDEX_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DRAWABLE_TYPE_SGIX" 'constant) #x08010)

(cl:export '#.(custom-lispify "GLX_DRAWABLE_TYPE_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RENDER_TYPE_SGIX" 'constant) #x08011)

(cl:export '#.(custom-lispify "GLX_RENDER_TYPE_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_X_RENDERABLE_SGIX" 'constant) #x08012)

(cl:export '#.(custom-lispify "GLX_X_RENDERABLE_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FBCONFIG_ID_SGIX" 'constant) #x08013)

(cl:export '#.(custom-lispify "GLX_FBCONFIG_ID_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RGBA_TYPE_SGIX" 'constant) #x08014)

(cl:export '#.(custom-lispify "GLX_RGBA_TYPE_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_COLOR_INDEX_TYPE_SGIX" 'constant) #x08015)

(cl:export '#.(custom-lispify "GLX_COLOR_INDEX_TYPE_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PBUFFER_BIT_SGIX" 'constant) #x000000004)

(cl:export '#.(custom-lispify "GLX_PBUFFER_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BUFFER_CLOBBER_MASK_SGIX" 'constant) #x008000000)

(cl:export '#.(custom-lispify "GLX_BUFFER_CLOBBER_MASK_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FRONT_LEFT_BUFFER_BIT_SGIX" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_FRONT_LEFT_BUFFER_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FRONT_RIGHT_BUFFER_BIT_SGIX" 'constant) #x000000002)

(cl:export '#.(custom-lispify "GLX_FRONT_RIGHT_BUFFER_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BACK_LEFT_BUFFER_BIT_SGIX" 'constant) #x000000004)

(cl:export '#.(custom-lispify "GLX_BACK_LEFT_BUFFER_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BACK_RIGHT_BUFFER_BIT_SGIX" 'constant) #x000000008)

(cl:export '#.(custom-lispify "GLX_BACK_RIGHT_BUFFER_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_AUX_BUFFERS_BIT_SGIX" 'constant) #x000000010)

(cl:export '#.(custom-lispify "GLX_AUX_BUFFERS_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DEPTH_BUFFER_BIT_SGIX" 'constant) #x000000020)

(cl:export '#.(custom-lispify "GLX_DEPTH_BUFFER_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_STENCIL_BUFFER_BIT_SGIX" 'constant) #x000000040)

(cl:export '#.(custom-lispify "GLX_STENCIL_BUFFER_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_ACCUM_BUFFER_BIT_SGIX" 'constant) #x000000080)

(cl:export '#.(custom-lispify "GLX_ACCUM_BUFFER_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SAMPLE_BUFFERS_BIT_SGIX" 'constant) #x000000100)

(cl:export '#.(custom-lispify "GLX_SAMPLE_BUFFERS_BIT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_MAX_PBUFFER_WIDTH_SGIX" 'constant) #x08016)

(cl:export '#.(custom-lispify "GLX_MAX_PBUFFER_WIDTH_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_MAX_PBUFFER_HEIGHT_SGIX" 'constant) #x08017)

(cl:export '#.(custom-lispify "GLX_MAX_PBUFFER_HEIGHT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_MAX_PBUFFER_PIXELS_SGIX" 'constant) #x08018)

(cl:export '#.(custom-lispify "GLX_MAX_PBUFFER_PIXELS_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_OPTIMAL_PBUFFER_WIDTH_SGIX" 'constant) #x08019)

(cl:export '#.(custom-lispify "GLX_OPTIMAL_PBUFFER_WIDTH_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX" 'constant) #x0801A)

(cl:export '#.(custom-lispify "GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PRESERVED_CONTENTS_SGIX" 'constant) #x0801B)

(cl:export '#.(custom-lispify "GLX_PRESERVED_CONTENTS_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_LARGEST_PBUFFER_SGIX" 'constant) #x0801C)

(cl:export '#.(custom-lispify "GLX_LARGEST_PBUFFER_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_WIDTH_SGIX" 'constant) #x0801D)

(cl:export '#.(custom-lispify "GLX_WIDTH_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_HEIGHT_SGIX" 'constant) #x0801E)

(cl:export '#.(custom-lispify "GLX_HEIGHT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_EVENT_MASK_SGIX" 'constant) #x0801F)

(cl:export '#.(custom-lispify "GLX_EVENT_MASK_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DAMAGED_SGIX" 'constant) #x08020)

(cl:export '#.(custom-lispify "GLX_DAMAGED_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SAVED_SGIX" 'constant) #x08021)

(cl:export '#.(custom-lispify "GLX_SAVED_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_WINDOW_SGIX" 'constant) #x08022)

(cl:export '#.(custom-lispify "GLX_WINDOW_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PBUFFER_SGIX" 'constant) #x08023)

(cl:export '#.(custom-lispify "GLX_PBUFFER_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SYNC_FRAME_SGIX" 'constant) #x000000000)

(cl:export '#.(custom-lispify "GLX_SYNC_FRAME_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SYNC_SWAP_SGIX" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_SYNC_SWAP_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DIGITAL_MEDIA_PBUFFER_SGIX" 'constant) #x08024)

(cl:export '#.(custom-lispify "GLX_DIGITAL_MEDIA_PBUFFER_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BLENDED_RGBA_SGIS" 'constant) #x08025)

(cl:export '#.(custom-lispify "GLX_BLENDED_RGBA_SGIS" 'constant))

(cl:defconstant #.(custom-lispify "GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS" 'constant) #x08026)

(cl:export '#.(custom-lispify "GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS" 'constant))

(cl:defconstant #.(custom-lispify "GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS" 'constant) #x08027)

(cl:export '#.(custom-lispify "GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SAMPLE_BUFFERS_3DFX" 'constant) #x08050)

(cl:export '#.(custom-lispify "GLX_SAMPLE_BUFFERS_3DFX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SAMPLES_3DFX" 'constant) #x08051)

(cl:export '#.(custom-lispify "GLX_SAMPLES_3DFX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_3DFX_WINDOW_MODE_MESA" 'constant) #x01)

(cl:export '#.(custom-lispify "GLX_3DFX_WINDOW_MODE_MESA" 'constant))

(cl:defconstant #.(custom-lispify "GLX_3DFX_FULLSCREEN_MODE_MESA" 'constant) #x02)

(cl:export '#.(custom-lispify "GLX_3DFX_FULLSCREEN_MODE_MESA" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VISUAL_SELECT_GROUP_SGIX" 'constant) #x08028)

(cl:export '#.(custom-lispify "GLX_VISUAL_SELECT_GROUP_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SWAP_METHOD_OML" 'constant) #x08060)

(cl:export '#.(custom-lispify "GLX_SWAP_METHOD_OML" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SWAP_EXCHANGE_OML" 'constant) #x08061)

(cl:export '#.(custom-lispify "GLX_SWAP_EXCHANGE_OML" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SWAP_COPY_OML" 'constant) #x08062)

(cl:export '#.(custom-lispify "GLX_SWAP_COPY_OML" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SWAP_UNDEFINED_OML" 'constant) #x08063)

(cl:export '#.(custom-lispify "GLX_SWAP_UNDEFINED_OML" 'constant))

(cl:defconstant #.(custom-lispify "GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX" 'constant) 80)

(cl:export '#.(custom-lispify "GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BAD_HYPERPIPE_CONFIG_SGIX" 'constant) 91)

(cl:export '#.(custom-lispify "GLX_BAD_HYPERPIPE_CONFIG_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BAD_HYPERPIPE_SGIX" 'constant) 92)

(cl:export '#.(custom-lispify "GLX_BAD_HYPERPIPE_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_HYPERPIPE_DISPLAY_PIPE_SGIX" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_HYPERPIPE_DISPLAY_PIPE_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_HYPERPIPE_RENDER_PIPE_SGIX" 'constant) #x000000002)

(cl:export '#.(custom-lispify "GLX_HYPERPIPE_RENDER_PIPE_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PIPE_RECT_SGIX" 'constant) #x000000001)

(cl:export '#.(custom-lispify "GLX_PIPE_RECT_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_PIPE_RECT_LIMITS_SGIX" 'constant) #x000000002)

(cl:export '#.(custom-lispify "GLX_PIPE_RECT_LIMITS_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_HYPERPIPE_STEREO_SGIX" 'constant) #x000000003)

(cl:export '#.(custom-lispify "GLX_HYPERPIPE_STEREO_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX" 'constant) #x000000004)

(cl:export '#.(custom-lispify "GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_HYPERPIPE_ID_SGIX" 'constant) #x08030)

(cl:export '#.(custom-lispify "GLX_HYPERPIPE_ID_SGIX" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT" 'constant) #x020B1)

(cl:export '#.(custom-lispify "GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT" 'constant) #x000000008)

(cl:export '#.(custom-lispify "GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT" 'constant) #x020B2)

(cl:export '#.(custom-lispify "GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_NUM_VIDEO_SLOTS_NV" 'constant) #x020F0)

(cl:export '#.(custom-lispify "GLX_NUM_VIDEO_SLOTS_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VIDEO_OUT_COLOR_NV" 'constant) #x020C3)

(cl:export '#.(custom-lispify "GLX_VIDEO_OUT_COLOR_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VIDEO_OUT_ALPHA_NV" 'constant) #x020C4)

(cl:export '#.(custom-lispify "GLX_VIDEO_OUT_ALPHA_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VIDEO_OUT_DEPTH_NV" 'constant) #x020C5)

(cl:export '#.(custom-lispify "GLX_VIDEO_OUT_DEPTH_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV" 'constant) #x020C6)

(cl:export '#.(custom-lispify "GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV" 'constant) #x020C7)

(cl:export '#.(custom-lispify "GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VIDEO_OUT_FRAME_NV" 'constant) #x020C8)

(cl:export '#.(custom-lispify "GLX_VIDEO_OUT_FRAME_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VIDEO_OUT_FIELD_1_NV" 'constant) #x020C9)

(cl:export '#.(custom-lispify "GLX_VIDEO_OUT_FIELD_1_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VIDEO_OUT_FIELD_2_NV" 'constant) #x020CA)

(cl:export '#.(custom-lispify "GLX_VIDEO_OUT_FIELD_2_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV" 'constant) #x020CB)

(cl:export '#.(custom-lispify "GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV" 'constant) #x020CC)

(cl:export '#.(custom-lispify "GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_DEVICE_ID_NV" 'constant) #x020CD)

(cl:export '#.(custom-lispify "GLX_DEVICE_ID_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_UNIQUE_ID_NV" 'constant) #x020CE)

(cl:export '#.(custom-lispify "GLX_UNIQUE_ID_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_NUM_VIDEO_CAPTURE_SLOTS_NV" 'constant) #x020CF)

(cl:export '#.(custom-lispify "GLX_NUM_VIDEO_CAPTURE_SLOTS_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SWAP_INTERVAL_EXT" 'constant) #x020F1)

(cl:export '#.(custom-lispify "GLX_SWAP_INTERVAL_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_MAX_SWAP_INTERVAL_EXT" 'constant) #x020F2)

(cl:export '#.(custom-lispify "GLX_MAX_SWAP_INTERVAL_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK" 'constant) #x004000000)

(cl:export '#.(custom-lispify "GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK" 'constant))

(cl:defconstant #.(custom-lispify "GLX_EXCHANGE_COMPLETE_INTEL" 'constant) #x08180)

(cl:export '#.(custom-lispify "GLX_EXCHANGE_COMPLETE_INTEL" 'constant))

(cl:defconstant #.(custom-lispify "GLX_COPY_COMPLETE_INTEL" 'constant) #x08181)

(cl:export '#.(custom-lispify "GLX_COPY_COMPLETE_INTEL" 'constant))

(cl:defconstant #.(custom-lispify "GLX_FLIP_COMPLETE_INTEL" 'constant) #x08182)

(cl:export '#.(custom-lispify "GLX_FLIP_COMPLETE_INTEL" 'constant))

(cl:defconstant #.(custom-lispify "GLX_COVERAGE_SAMPLES_NV" 'constant) 100001)

(cl:export '#.(custom-lispify "GLX_COVERAGE_SAMPLES_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_COLOR_SAMPLES_NV" 'constant) #x020B3)

(cl:export '#.(custom-lispify "GLX_COLOR_SAMPLES_NV" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GPU_VENDOR_AMD" 'constant) #x01F00)

(cl:export '#.(custom-lispify "GLX_GPU_VENDOR_AMD" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GPU_RENDERER_STRING_AMD" 'constant) #x01F01)

(cl:export '#.(custom-lispify "GLX_GPU_RENDERER_STRING_AMD" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GPU_OPENGL_VERSION_STRING_AMD" 'constant) #x01F02)

(cl:export '#.(custom-lispify "GLX_GPU_OPENGL_VERSION_STRING_AMD" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GPU_FASTEST_TARGET_GPUS_AMD" 'constant) #x021A2)

(cl:export '#.(custom-lispify "GLX_GPU_FASTEST_TARGET_GPUS_AMD" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GPU_RAM_AMD" 'constant) #x021A3)

(cl:export '#.(custom-lispify "GLX_GPU_RAM_AMD" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GPU_CLOCK_AMD" 'constant) #x021A4)

(cl:export '#.(custom-lispify "GLX_GPU_CLOCK_AMD" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GPU_NUM_PIPES_AMD" 'constant) #x021A5)

(cl:export '#.(custom-lispify "GLX_GPU_NUM_PIPES_AMD" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GPU_NUM_SIMD_AMD" 'constant) #x021A6)

(cl:export '#.(custom-lispify "GLX_GPU_NUM_SIMD_AMD" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GPU_NUM_RB_AMD" 'constant) #x021A7)

(cl:export '#.(custom-lispify "GLX_GPU_NUM_RB_AMD" 'constant))

(cl:defconstant #.(custom-lispify "GLX_GPU_NUM_SPI_AMD" 'constant) #x021A8)

(cl:export '#.(custom-lispify "GLX_GPU_NUM_SPI_AMD" 'constant))

(cl:defconstant #.(custom-lispify "GLX_CONTEXT_ES2_PROFILE_BIT_EXT" 'constant) #x000000004)

(cl:export '#.(custom-lispify "GLX_CONTEXT_ES2_PROFILE_BIT_EXT" 'constant))

(cl:defconstant #.(custom-lispify "GLX_LATE_SWAPS_TEAR_EXT" 'constant) #x020F3)

(cl:export '#.(custom-lispify "GLX_LATE_SWAPS_TEAR_EXT" 'constant))

(cffi:defctype #.(custom-lispify "GLXVideoSourceSGIX" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "GLXVideoSourceSGIX" 'typename))

(cffi:defctype #.(custom-lispify "GLXFBConfigIDSGIX" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "GLXFBConfigIDSGIX" 'typename))

(cffi:defctype #.(custom-lispify "GLXFBConfigSGIX" 'typename) :pointer)

(cl:export '#.(custom-lispify "GLXFBConfigSGIX" 'typename))

(cffi:defctype #.(custom-lispify "GLXPbufferSGIX" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "GLXPbufferSGIX" 'typename))

(cffi:defcstruct #.(custom-lispify "GLXBufferClobberEventSGIX" 'structname-decl)
	(#.(custom-lispify "type" 'slotname) :int)
	(#.(custom-lispify "serial" 'slotname) :unsigned-long)
	(#.(custom-lispify "send_event" 'slotname) :int)
	(#.(custom-lispify "display" 'slotname) :pointer)
	(#.(custom-lispify "drawable" 'slotname) :unsigned-long)
	(#.(custom-lispify "event_type" 'slotname) :int)
	(#.(custom-lispify "draw_type" 'slotname) :int)
	(#.(custom-lispify "mask" 'slotname) :unsigned-int)
	(#.(custom-lispify "x" 'slotname) :int)
	(#.(custom-lispify "y" 'slotname) :int)
	(#.(custom-lispify "width" 'slotname) :int)
	(#.(custom-lispify "height" 'slotname) :int)
	(#.(custom-lispify "count" 'slotname) :int))

(cl:export '#.(custom-lispify "GLXBufferClobberEventSGIX" 'classname))

(cl:export '#.(custom-lispify "type" 'slotname))

(cl:export '#.(custom-lispify "serial" 'slotname))

(cl:export '#.(custom-lispify "send_event" 'slotname))

(cl:export '#.(custom-lispify "display" 'slotname))

(cl:export '#.(custom-lispify "drawable" 'slotname))

(cl:export '#.(custom-lispify "event_type" 'slotname))

(cl:export '#.(custom-lispify "draw_type" 'slotname))

(cl:export '#.(custom-lispify "mask" 'slotname))

(cl:export '#.(custom-lispify "x" 'slotname))

(cl:export '#.(custom-lispify "y" 'slotname))

(cl:export '#.(custom-lispify "width" 'slotname))

(cl:export '#.(custom-lispify "height" 'slotname))

(cl:export '#.(custom-lispify "count" 'slotname))

(cffi:defctype #.(custom-lispify "GLXVideoDeviceNV" 'typename) :unsigned-int)

(cl:export '#.(custom-lispify "GLXVideoDeviceNV" 'typename))

(cffi:defctype #.(custom-lispify "GLXVideoCaptureDeviceNV" 'typename) :unsigned-long)

(cl:export '#.(custom-lispify "GLXVideoCaptureDeviceNV" 'typename))

(cl:defconstant #.(custom-lispify "GLX_ARB_multisample" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_ARB_multisample" 'constant))

(cl:defconstant #.(custom-lispify "GLX_ARB_fbconfig_float" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_ARB_fbconfig_float" 'constant))

(cl:defconstant #.(custom-lispify "GLX_ARB_framebuffer_sRGB" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_ARB_framebuffer_sRGB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_ARB_create_context" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_ARB_create_context" 'constant))

(cffi:defcfun ("glXCreateContextAttribsARB" #.(custom-lispify "glXCreateContextAttribsARB" 'function)) :pointer
  (dpy :pointer)
  (config :pointer)
  (share_context :pointer)
  (direct :int)
  (attrib_list :pointer))

(cl:export '#.(custom-lispify "glXCreateContextAttribsARB" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXCREATECONTEXTATTRIBSARBPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCREATECONTEXTATTRIBSARBPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_ARB_create_context_profile" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_ARB_create_context_profile" 'constant))

(cl:defconstant #.(custom-lispify "GLX_ARB_create_context_robustness" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_ARB_create_context_robustness" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SGIS_multisample" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGIS_multisample" 'constant))

(cl:defconstant #.(custom-lispify "GLX_EXT_visual_info" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_EXT_visual_info" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SGI_swap_control" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGI_swap_control" 'constant))

(cffi:defcfun ("glXSwapIntervalSGI" #.(custom-lispify "glXSwapIntervalSGI" 'function)) :int
  (interval :int))

(cl:export '#.(custom-lispify "glXSwapIntervalSGI" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXSWAPINTERVALSGIPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXSWAPINTERVALSGIPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SGI_video_sync" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGI_video_sync" 'constant))

(cffi:defcfun ("glXGetVideoSyncSGI" #.(custom-lispify "glXGetVideoSyncSGI" 'function)) :int
  (count :pointer))

(cl:export '#.(custom-lispify "glXGetVideoSyncSGI" 'function))

(cffi:defcfun ("glXWaitVideoSyncSGI" #.(custom-lispify "glXWaitVideoSyncSGI" 'function)) :int
  (divisor :int)
  (remainder :int)
  (count :pointer))

(cl:export '#.(custom-lispify "glXWaitVideoSyncSGI" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXGETVIDEOSYNCSGIPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETVIDEOSYNCSGIPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXWAITVIDEOSYNCSGIPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXWAITVIDEOSYNCSGIPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SGI_make_current_read" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGI_make_current_read" 'constant))

(cffi:defcfun ("glXMakeCurrentReadSGI" #.(custom-lispify "glXMakeCurrentReadSGI" 'function)) :int
  (dpy :pointer)
  (draw :unsigned-long)
  (read :unsigned-long)
  (ctx :pointer))

(cl:export '#.(custom-lispify "glXMakeCurrentReadSGI" 'function))

(cffi:defcfun ("glXGetCurrentReadDrawableSGI" #.(custom-lispify "glXGetCurrentReadDrawableSGI" 'function)) :unsigned-long)

(cl:export '#.(custom-lispify "glXGetCurrentReadDrawableSGI" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXMAKECURRENTREADSGIPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXMAKECURRENTREADSGIPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETCURRENTREADDRAWABLESGIPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETCURRENTREADDRAWABLESGIPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SGIX_video_source" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGIX_video_source" 'constant))

(cl:defconstant #.(custom-lispify "GLX_EXT_visual_rating" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_EXT_visual_rating" 'constant))

(cl:defconstant #.(custom-lispify "GLX_EXT_import_context" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_EXT_import_context" 'constant))

(cffi:defcfun ("glXGetCurrentDisplayEXT" #.(custom-lispify "glXGetCurrentDisplayEXT" 'function)) :pointer)

(cl:export '#.(custom-lispify "glXGetCurrentDisplayEXT" 'function))

(cffi:defcfun ("glXQueryContextInfoEXT" #.(custom-lispify "glXQueryContextInfoEXT" 'function)) :int
  (dpy :pointer)
  (context :pointer)
  (attribute :int)
  (value :pointer))

(cl:export '#.(custom-lispify "glXQueryContextInfoEXT" 'function))

(cffi:defcfun ("glXGetContextIDEXT" #.(custom-lispify "glXGetContextIDEXT" 'function)) :unsigned-long
  (context :pointer))

(cl:export '#.(custom-lispify "glXGetContextIDEXT" 'function))

(cffi:defcfun ("glXImportContextEXT" #.(custom-lispify "glXImportContextEXT" 'function)) :pointer
  (dpy :pointer)
  (contextID :unsigned-long))

(cl:export '#.(custom-lispify "glXImportContextEXT" 'function))

(cffi:defcfun ("glXFreeContextEXT" #.(custom-lispify "glXFreeContextEXT" 'function)) :void
  (dpy :pointer)
  (context :pointer))

(cl:export '#.(custom-lispify "glXFreeContextEXT" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXGETCURRENTDISPLAYEXTPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETCURRENTDISPLAYEXTPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYCONTEXTINFOEXTPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYCONTEXTINFOEXTPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETCONTEXTIDEXTPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETCONTEXTIDEXTPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXIMPORTCONTEXTEXTPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXIMPORTCONTEXTEXTPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXFREECONTEXTEXTPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXFREECONTEXTEXTPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SGIX_fbconfig" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGIX_fbconfig" 'constant))

(cffi:defcfun ("glXGetFBConfigAttribSGIX" #.(custom-lispify "glXGetFBConfigAttribSGIX" 'function)) :int
  (dpy :pointer)
  (config :pointer)
  (attribute :int)
  (value :pointer))

(cl:export '#.(custom-lispify "glXGetFBConfigAttribSGIX" 'function))

(cffi:defcfun ("glXChooseFBConfigSGIX" #.(custom-lispify "glXChooseFBConfigSGIX" 'function)) :pointer
  (dpy :pointer)
  (screen :int)
  (attrib_list :pointer)
  (nelements :pointer))

(cl:export '#.(custom-lispify "glXChooseFBConfigSGIX" 'function))

(cffi:defcfun ("glXCreateGLXPixmapWithConfigSGIX" #.(custom-lispify "glXCreateGLXPixmapWithConfigSGIX" 'function)) :unsigned-long
  (dpy :pointer)
  (config :pointer)
  (pixmap :pointer))

(cl:export '#.(custom-lispify "glXCreateGLXPixmapWithConfigSGIX" 'function))

(cffi:defcfun ("glXCreateContextWithConfigSGIX" #.(custom-lispify "glXCreateContextWithConfigSGIX" 'function)) :pointer
  (dpy :pointer)
  (config :pointer)
  (render_type :int)
  (share_list :pointer)
  (direct :int))

(cl:export '#.(custom-lispify "glXCreateContextWithConfigSGIX" 'function))

(cffi:defcfun ("glXGetVisualFromFBConfigSGIX" #.(custom-lispify "glXGetVisualFromFBConfigSGIX" 'function)) :pointer
  (dpy :pointer)
  (config :pointer))

(cl:export '#.(custom-lispify "glXGetVisualFromFBConfigSGIX" 'function))

(cffi:defcfun ("glXGetFBConfigFromVisualSGIX" #.(custom-lispify "glXGetFBConfigFromVisualSGIX" 'function)) :pointer
  (dpy :pointer)
  (vis :pointer))

(cl:export '#.(custom-lispify "glXGetFBConfigFromVisualSGIX" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXGETFBCONFIGATTRIBSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETFBCONFIGATTRIBSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXCHOOSEFBCONFIGSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCHOOSEFBCONFIGSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETVISUALFROMFBCONFIGSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETVISUALFROMFBCONFIGSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETFBCONFIGFROMVISUALSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETFBCONFIGFROMVISUALSGIXPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SGIX_pbuffer" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGIX_pbuffer" 'constant))

(cffi:defcfun ("glXCreateGLXPbufferSGIX" #.(custom-lispify "glXCreateGLXPbufferSGIX" 'function)) :unsigned-long
  (dpy :pointer)
  (config :pointer)
  (width :unsigned-int)
  (height :unsigned-int)
  (attrib_list :pointer))

(cl:export '#.(custom-lispify "glXCreateGLXPbufferSGIX" 'function))

(cffi:defcfun ("glXDestroyGLXPbufferSGIX" #.(custom-lispify "glXDestroyGLXPbufferSGIX" 'function)) :void
  (dpy :pointer)
  (pbuf :unsigned-long))

(cl:export '#.(custom-lispify "glXDestroyGLXPbufferSGIX" 'function))

(cffi:defcfun ("glXQueryGLXPbufferSGIX" #.(custom-lispify "glXQueryGLXPbufferSGIX" 'function)) :int
  (dpy :pointer)
  (pbuf :unsigned-long)
  (attribute :int)
  (value :pointer))

(cl:export '#.(custom-lispify "glXQueryGLXPbufferSGIX" 'function))

(cffi:defcfun ("glXSelectEventSGIX" #.(custom-lispify "glXSelectEventSGIX" 'function)) :void
  (dpy :pointer)
  (drawable :unsigned-long)
  (mask :unsigned-long))

(cl:export '#.(custom-lispify "glXSelectEventSGIX" 'function))

(cffi:defcfun ("glXGetSelectedEventSGIX" #.(custom-lispify "glXGetSelectedEventSGIX" 'function)) :void
  (dpy :pointer)
  (drawable :unsigned-long)
  (mask :pointer))

(cl:export '#.(custom-lispify "glXGetSelectedEventSGIX" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXCREATEGLXPBUFFERSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCREATEGLXPBUFFERSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXDESTROYGLXPBUFFERSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXDESTROYGLXPBUFFERSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYGLXPBUFFERSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYGLXPBUFFERSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXSELECTEVENTSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXSELECTEVENTSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETSELECTEDEVENTSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETSELECTEDEVENTSGIXPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SGI_cushion" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGI_cushion" 'constant))

(cffi:defcfun ("glXCushionSGI" #.(custom-lispify "glXCushionSGI" 'function)) :void
  (dpy :pointer)
  (window :unsigned-long)
  (cushion :float))

(cl:export '#.(custom-lispify "glXCushionSGI" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXCUSHIONSGIPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCUSHIONSGIPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SGIX_video_resize" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGIX_video_resize" 'constant))

(cffi:defcfun ("glXBindChannelToWindowSGIX" #.(custom-lispify "glXBindChannelToWindowSGIX" 'function)) :int
  (display :pointer)
  (screen :int)
  (channel :int)
  (window :unsigned-long))

(cl:export '#.(custom-lispify "glXBindChannelToWindowSGIX" 'function))

(cffi:defcfun ("glXChannelRectSGIX" #.(custom-lispify "glXChannelRectSGIX" 'function)) :int
  (display :pointer)
  (screen :int)
  (channel :int)
  (x :int)
  (y :int)
  (w :int)
  (h :int))

(cl:export '#.(custom-lispify "glXChannelRectSGIX" 'function))

(cffi:defcfun ("glXQueryChannelRectSGIX" #.(custom-lispify "glXQueryChannelRectSGIX" 'function)) :int
  (display :pointer)
  (screen :int)
  (channel :int)
  (dx :pointer)
  (dy :pointer)
  (dw :pointer)
  (dh :pointer))

(cl:export '#.(custom-lispify "glXQueryChannelRectSGIX" 'function))

(cffi:defcfun ("glXQueryChannelDeltasSGIX" #.(custom-lispify "glXQueryChannelDeltasSGIX" 'function)) :int
  (display :pointer)
  (screen :int)
  (channel :int)
  (x :pointer)
  (y :pointer)
  (w :pointer)
  (h :pointer))

(cl:export '#.(custom-lispify "glXQueryChannelDeltasSGIX" 'function))

(cffi:defcfun ("glXChannelRectSyncSGIX" #.(custom-lispify "glXChannelRectSyncSGIX" 'function)) :int
  (display :pointer)
  (screen :int)
  (channel :int)
  (synctype :pointer))

(cl:export '#.(custom-lispify "glXChannelRectSyncSGIX" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXBINDCHANNELTOWINDOWSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXBINDCHANNELTOWINDOWSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXCHANNELRECTSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCHANNELRECTSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYCHANNELRECTSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYCHANNELRECTSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYCHANNELDELTASSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYCHANNELDELTASSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXCHANNELRECTSYNCSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCHANNELRECTSYNCSGIXPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SGIX_dmbuffer" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGIX_dmbuffer" 'constant))

(cl:defconstant #.(custom-lispify "GLX_SGIX_swap_group" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGIX_swap_group" 'constant))

(cffi:defcfun ("glXJoinSwapGroupSGIX" #.(custom-lispify "glXJoinSwapGroupSGIX" 'function)) :void
  (dpy :pointer)
  (drawable :unsigned-long)
  (member :unsigned-long))

(cl:export '#.(custom-lispify "glXJoinSwapGroupSGIX" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXJOINSWAPGROUPSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXJOINSWAPGROUPSGIXPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SGIX_swap_barrier" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGIX_swap_barrier" 'constant))

(cffi:defcfun ("glXBindSwapBarrierSGIX" #.(custom-lispify "glXBindSwapBarrierSGIX" 'function)) :void
  (dpy :pointer)
  (drawable :unsigned-long)
  (barrier :int))

(cl:export '#.(custom-lispify "glXBindSwapBarrierSGIX" 'function))

(cffi:defcfun ("glXQueryMaxSwapBarriersSGIX" #.(custom-lispify "glXQueryMaxSwapBarriersSGIX" 'function)) :int
  (dpy :pointer)
  (screen :int)
  (max :pointer))

(cl:export '#.(custom-lispify "glXQueryMaxSwapBarriersSGIX" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXBINDSWAPBARRIERSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXBINDSWAPBARRIERSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SUN_get_transparent_index" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SUN_get_transparent_index" 'constant))

(cffi:defcfun ("glXGetTransparentIndexSUN" #.(custom-lispify "glXGetTransparentIndexSUN" 'function)) :int
  (dpy :pointer)
  (overlay :unsigned-long)
  (underlay :unsigned-long)
  (pTransparentIndex :pointer))

(cl:export '#.(custom-lispify "glXGetTransparentIndexSUN" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXGETTRANSPARENTINDEXSUNPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETTRANSPARENTINDEXSUNPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_MESA_copy_sub_buffer" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_MESA_copy_sub_buffer" 'constant))

(cffi:defcfun ("glXCopySubBufferMESA" #.(custom-lispify "glXCopySubBufferMESA" 'function)) :void
  (dpy :pointer)
  (drawable :unsigned-long)
  (x :int)
  (y :int)
  (width :int)
  (height :int))

(cl:export '#.(custom-lispify "glXCopySubBufferMESA" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXCOPYSUBBUFFERMESAPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCOPYSUBBUFFERMESAPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_MESA_pixmap_colormap" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_MESA_pixmap_colormap" 'constant))

(cffi:defcfun ("glXCreateGLXPixmapMESA" #.(custom-lispify "glXCreateGLXPixmapMESA" 'function)) :unsigned-long
  (dpy :pointer)
  (visual :pointer)
  (pixmap :pointer)
  (cmap :pointer))

(cl:export '#.(custom-lispify "glXCreateGLXPixmapMESA" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXCREATEGLXPIXMAPMESAPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCREATEGLXPIXMAPMESAPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_MESA_release_buffers" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_MESA_release_buffers" 'constant))

(cffi:defcfun ("glXReleaseBuffersMESA" #.(custom-lispify "glXReleaseBuffersMESA" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long))

(cl:export '#.(custom-lispify "glXReleaseBuffersMESA" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXRELEASEBUFFERSMESAPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXRELEASEBUFFERSMESAPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_MESA_set_3dfx_mode" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_MESA_set_3dfx_mode" 'constant))

(cffi:defcfun ("glXSet3DfxModeMESA" #.(custom-lispify "glXSet3DfxModeMESA" 'function)) :int
  (mode :int))

(cl:export '#.(custom-lispify "glXSet3DfxModeMESA" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXSET3DFXMODEMESAPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXSET3DFXMODEMESAPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SGIX_visual_select_group" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGIX_visual_select_group" 'constant))

(cl:defconstant #.(custom-lispify "GLX_OML_swap_method" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_OML_swap_method" 'constant))

(cl:defconstant #.(custom-lispify "GLX_OML_sync_control" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_OML_sync_control" 'constant))

(cffi:defcfun ("glXGetSyncValuesOML" #.(custom-lispify "glXGetSyncValuesOML" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long)
  (ust :pointer)
  (msc :pointer)
  (sbc :pointer))

(cl:export '#.(custom-lispify "glXGetSyncValuesOML" 'function))

(cffi:defcfun ("glXGetMscRateOML" #.(custom-lispify "glXGetMscRateOML" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long)
  (numerator :pointer)
  (denominator :pointer))

(cl:export '#.(custom-lispify "glXGetMscRateOML" 'function))

(cffi:defcfun ("glXSwapBuffersMscOML" #.(custom-lispify "glXSwapBuffersMscOML" 'function)) :pointer
  (dpy :pointer)
  (drawable :unsigned-long)
  (target_msc :pointer)
  (divisor :pointer)
  (remainder :pointer))

(cl:export '#.(custom-lispify "glXSwapBuffersMscOML" 'function))

(cffi:defcfun ("glXWaitForMscOML" #.(custom-lispify "glXWaitForMscOML" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long)
  (target_msc :pointer)
  (divisor :pointer)
  (remainder :pointer)
  (ust :pointer)
  (msc :pointer)
  (sbc :pointer))

(cl:export '#.(custom-lispify "glXWaitForMscOML" 'function))

(cffi:defcfun ("glXWaitForSbcOML" #.(custom-lispify "glXWaitForSbcOML" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long)
  (target_sbc :pointer)
  (ust :pointer)
  (msc :pointer)
  (sbc :pointer))

(cl:export '#.(custom-lispify "glXWaitForSbcOML" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXGETSYNCVALUESOMLPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETSYNCVALUESOMLPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETMSCRATEOMLPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETMSCRATEOMLPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXSWAPBUFFERSMSCOMLPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXSWAPBUFFERSMSCOMLPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXWAITFORMSCOMLPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXWAITFORMSCOMLPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXWAITFORSBCOMLPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXWAITFORSBCOMLPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_SGIX_hyperpipe" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_SGIX_hyperpipe" 'constant))

(cffi:defcstruct #.(custom-lispify "GLXHyperpipeNetworkSGIX" 'structname-decl)
	(#.(custom-lispify "pipeName" 'slotname) :char :count 80)
	(#.(custom-lispify "networkId" 'slotname) :int))

(cl:export '#.(custom-lispify "GLXHyperpipeNetworkSGIX" 'classname))

(cl:export '#.(custom-lispify "pipeName" 'slotname))

(cl:export '#.(custom-lispify "networkId" 'slotname))

(cffi:defcstruct #.(custom-lispify "GLXHyperpipeConfigSGIX" 'structname-decl)
	(#.(custom-lispify "pipeName" 'slotname) :char :count 80)
	(#.(custom-lispify "channel" 'slotname) :int)
	(#.(custom-lispify "participationType" 'slotname) :unsigned-int)
	(#.(custom-lispify "timeSlice" 'slotname) :int))

(cl:export '#.(custom-lispify "GLXHyperpipeConfigSGIX" 'classname))

(cl:export '#.(custom-lispify "pipeName" 'slotname))

(cl:export '#.(custom-lispify "channel" 'slotname))

(cl:export '#.(custom-lispify "participationType" 'slotname))

(cl:export '#.(custom-lispify "timeSlice" 'slotname))

(cffi:defcstruct #.(custom-lispify "GLXPipeRect" 'structname-decl)
	(#.(custom-lispify "pipeName" 'slotname) :char :count 80)
	(#.(custom-lispify "srcXOrigin" 'slotname) :int)
	(#.(custom-lispify "srcYOrigin" 'slotname) :int)
	(#.(custom-lispify "srcWidth" 'slotname) :int)
	(#.(custom-lispify "srcHeight" 'slotname) :int)
	(#.(custom-lispify "destXOrigin" 'slotname) :int)
	(#.(custom-lispify "destYOrigin" 'slotname) :int)
	(#.(custom-lispify "destWidth" 'slotname) :int)
	(#.(custom-lispify "destHeight" 'slotname) :int))

(cl:export '#.(custom-lispify "GLXPipeRect" 'classname))

(cl:export '#.(custom-lispify "pipeName" 'slotname))

(cl:export '#.(custom-lispify "srcXOrigin" 'slotname))

(cl:export '#.(custom-lispify "srcYOrigin" 'slotname))

(cl:export '#.(custom-lispify "srcWidth" 'slotname))

(cl:export '#.(custom-lispify "srcHeight" 'slotname))

(cl:export '#.(custom-lispify "destXOrigin" 'slotname))

(cl:export '#.(custom-lispify "destYOrigin" 'slotname))

(cl:export '#.(custom-lispify "destWidth" 'slotname))

(cl:export '#.(custom-lispify "destHeight" 'slotname))

(cffi:defcstruct #.(custom-lispify "GLXPipeRectLimits" 'structname-decl)
	(#.(custom-lispify "pipeName" 'slotname) :char :count 80)
	(#.(custom-lispify "XOrigin" 'slotname) :int)
	(#.(custom-lispify "YOrigin" 'slotname) :int)
	(#.(custom-lispify "maxHeight" 'slotname) :int)
	(#.(custom-lispify "maxWidth" 'slotname) :int))

(cl:export '#.(custom-lispify "GLXPipeRectLimits" 'classname))

(cl:export '#.(custom-lispify "pipeName" 'slotname))

(cl:export '#.(custom-lispify "XOrigin" 'slotname))

(cl:export '#.(custom-lispify "YOrigin" 'slotname))

(cl:export '#.(custom-lispify "maxHeight" 'slotname))

(cl:export '#.(custom-lispify "maxWidth" 'slotname))

(cffi:defcfun ("glXQueryHyperpipeNetworkSGIX" #.(custom-lispify "glXQueryHyperpipeNetworkSGIX" 'function)) :pointer
  (dpy :pointer)
  (npipes :pointer))

(cl:export '#.(custom-lispify "glXQueryHyperpipeNetworkSGIX" 'function))

(cffi:defcfun ("glXHyperpipeConfigSGIX" #.(custom-lispify "glXHyperpipeConfigSGIX" 'function)) :int
  (dpy :pointer)
  (networkId :int)
  (npipes :int)
  (cfg :pointer)
  (hpId :pointer))

(cl:export '#.(custom-lispify "glXHyperpipeConfigSGIX" 'function))

(cffi:defcfun ("glXQueryHyperpipeConfigSGIX" #.(custom-lispify "glXQueryHyperpipeConfigSGIX" 'function)) :pointer
  (dpy :pointer)
  (hpId :int)
  (npipes :pointer))

(cl:export '#.(custom-lispify "glXQueryHyperpipeConfigSGIX" 'function))

(cffi:defcfun ("glXDestroyHyperpipeConfigSGIX" #.(custom-lispify "glXDestroyHyperpipeConfigSGIX" 'function)) :int
  (dpy :pointer)
  (hpId :int))

(cl:export '#.(custom-lispify "glXDestroyHyperpipeConfigSGIX" 'function))

(cffi:defcfun ("glXBindHyperpipeSGIX" #.(custom-lispify "glXBindHyperpipeSGIX" 'function)) :int
  (dpy :pointer)
  (hpId :int))

(cl:export '#.(custom-lispify "glXBindHyperpipeSGIX" 'function))

(cffi:defcfun ("glXQueryHyperpipeBestAttribSGIX" #.(custom-lispify "glXQueryHyperpipeBestAttribSGIX" 'function)) :int
  (dpy :pointer)
  (timeSlice :int)
  (attrib :int)
  (size :int)
  (attribList :pointer)
  (returnAttribList :pointer))

(cl:export '#.(custom-lispify "glXQueryHyperpipeBestAttribSGIX" 'function))

(cffi:defcfun ("glXHyperpipeAttribSGIX" #.(custom-lispify "glXHyperpipeAttribSGIX" 'function)) :int
  (dpy :pointer)
  (timeSlice :int)
  (attrib :int)
  (size :int)
  (attribList :pointer))

(cl:export '#.(custom-lispify "glXHyperpipeAttribSGIX" 'function))

(cffi:defcfun ("glXQueryHyperpipeAttribSGIX" #.(custom-lispify "glXQueryHyperpipeAttribSGIX" 'function)) :int
  (dpy :pointer)
  (timeSlice :int)
  (attrib :int)
  (size :int)
  (returnAttribList :pointer))

(cl:export '#.(custom-lispify "glXQueryHyperpipeAttribSGIX" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYHYPERPIPENETWORKSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYHYPERPIPENETWORKSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXHYPERPIPECONFIGSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXHYPERPIPECONFIGSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYHYPERPIPECONFIGSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYHYPERPIPECONFIGSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXBINDHYPERPIPESGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXBINDHYPERPIPESGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXHYPERPIPEATTRIBSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXHYPERPIPEATTRIBSGIXPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_MESA_agp_offset" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_MESA_agp_offset" 'constant))

(cffi:defcfun ("glXGetAGPOffsetMESA" #.(custom-lispify "glXGetAGPOffsetMESA" 'function)) :unsigned-int
  (pointer :pointer))

(cl:export '#.(custom-lispify "glXGetAGPOffsetMESA" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXGETAGPOFFSETMESAPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETAGPOFFSETMESAPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_EXT_fbconfig_packed_float" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_EXT_fbconfig_packed_float" 'constant))

(cl:defconstant #.(custom-lispify "GLX_EXT_framebuffer_sRGB" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_EXT_framebuffer_sRGB" 'constant))

(cl:defconstant #.(custom-lispify "GLX_NV_present_video" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_NV_present_video" 'constant))

(cffi:defcfun ("glXEnumerateVideoDevicesNV" #.(custom-lispify "glXEnumerateVideoDevicesNV" 'function)) :pointer
  (dpy :pointer)
  (screen :int)
  (nelements :pointer))

(cl:export '#.(custom-lispify "glXEnumerateVideoDevicesNV" 'function))

(cffi:defcfun ("glXBindVideoDeviceNV" #.(custom-lispify "glXBindVideoDeviceNV" 'function)) :int
  (dpy :pointer)
  (video_slot :unsigned-int)
  (video_device :unsigned-int)
  (attrib_list :pointer))

(cl:export '#.(custom-lispify "glXBindVideoDeviceNV" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXENUMERATEVIDEODEVICESNVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXENUMERATEVIDEODEVICESNVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXBINDVIDEODEVICENVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXBINDVIDEODEVICENVPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_NV_video_output" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_NV_video_output" 'constant))

(cffi:defcfun ("glXGetVideoDeviceNV" #.(custom-lispify "glXGetVideoDeviceNV" 'function)) :int
  (dpy :pointer)
  (screen :int)
  (numVideoDevices :int)
  (pVideoDevice :pointer))

(cl:export '#.(custom-lispify "glXGetVideoDeviceNV" 'function))

(cffi:defcfun ("glXReleaseVideoDeviceNV" #.(custom-lispify "glXReleaseVideoDeviceNV" 'function)) :int
  (dpy :pointer)
  (screen :int)
  (VideoDevice :unsigned-int))

(cl:export '#.(custom-lispify "glXReleaseVideoDeviceNV" 'function))

(cffi:defcfun ("glXBindVideoImageNV" #.(custom-lispify "glXBindVideoImageNV" 'function)) :int
  (dpy :pointer)
  (VideoDevice :unsigned-int)
  (pbuf :unsigned-long)
  (iVideoBuffer :int))

(cl:export '#.(custom-lispify "glXBindVideoImageNV" 'function))

(cffi:defcfun ("glXReleaseVideoImageNV" #.(custom-lispify "glXReleaseVideoImageNV" 'function)) :int
  (dpy :pointer)
  (pbuf :unsigned-long))

(cl:export '#.(custom-lispify "glXReleaseVideoImageNV" 'function))

(cffi:defcfun ("glXSendPbufferToVideoNV" #.(custom-lispify "glXSendPbufferToVideoNV" 'function)) :int
  (dpy :pointer)
  (pbuf :unsigned-long)
  (iBufferType :int)
  (pulCounterPbuffer :pointer)
  (bBlock :pointer))

(cl:export '#.(custom-lispify "glXSendPbufferToVideoNV" 'function))

(cffi:defcfun ("glXGetVideoInfoNV" #.(custom-lispify "glXGetVideoInfoNV" 'function)) :int
  (dpy :pointer)
  (screen :int)
  (VideoDevice :unsigned-int)
  (pulCounterOutputPbuffer :pointer)
  (pulCounterOutputVideo :pointer))

(cl:export '#.(custom-lispify "glXGetVideoInfoNV" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXGETVIDEODEVICENVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETVIDEODEVICENVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXRELEASEVIDEODEVICENVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXRELEASEVIDEODEVICENVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXBINDVIDEOIMAGENVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXBINDVIDEOIMAGENVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXRELEASEVIDEOIMAGENVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXRELEASEVIDEOIMAGENVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXSENDPBUFFERTOVIDEONVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXSENDPBUFFERTOVIDEONVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXGETVIDEOINFONVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXGETVIDEOINFONVPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_NV_swap_group" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_NV_swap_group" 'constant))

(cffi:defcfun ("glXJoinSwapGroupNV" #.(custom-lispify "glXJoinSwapGroupNV" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long)
  (group :pointer))

(cl:export '#.(custom-lispify "glXJoinSwapGroupNV" 'function))

(cffi:defcfun ("glXBindSwapBarrierNV" #.(custom-lispify "glXBindSwapBarrierNV" 'function)) :int
  (dpy :pointer)
  (group :pointer)
  (barrier :pointer))

(cl:export '#.(custom-lispify "glXBindSwapBarrierNV" 'function))

(cffi:defcfun ("glXQuerySwapGroupNV" #.(custom-lispify "glXQuerySwapGroupNV" 'function)) :int
  (dpy :pointer)
  (drawable :unsigned-long)
  (group :pointer)
  (barrier :pointer))

(cl:export '#.(custom-lispify "glXQuerySwapGroupNV" 'function))

(cffi:defcfun ("glXQueryMaxSwapGroupsNV" #.(custom-lispify "glXQueryMaxSwapGroupsNV" 'function)) :int
  (dpy :pointer)
  (screen :int)
  (maxGroups :pointer)
  (maxBarriers :pointer))

(cl:export '#.(custom-lispify "glXQueryMaxSwapGroupsNV" 'function))

(cffi:defcfun ("glXQueryFrameCountNV" #.(custom-lispify "glXQueryFrameCountNV" 'function)) :int
  (dpy :pointer)
  (screen :int)
  (count :pointer))

(cl:export '#.(custom-lispify "glXQueryFrameCountNV" 'function))

(cffi:defcfun ("glXResetFrameCountNV" #.(custom-lispify "glXResetFrameCountNV" 'function)) :int
  (dpy :pointer)
  (screen :int))

(cl:export '#.(custom-lispify "glXResetFrameCountNV" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXJOINSWAPGROUPNVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXJOINSWAPGROUPNVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXBINDSWAPBARRIERNVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXBINDSWAPBARRIERNVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYSWAPGROUPNVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYSWAPGROUPNVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYMAXSWAPGROUPSNVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYMAXSWAPGROUPSNVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYFRAMECOUNTNVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYFRAMECOUNTNVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXRESETFRAMECOUNTNVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXRESETFRAMECOUNTNVPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_NV_video_capture" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_NV_video_capture" 'constant))

(cffi:defcfun ("glXBindVideoCaptureDeviceNV" #.(custom-lispify "glXBindVideoCaptureDeviceNV" 'function)) :int
  (dpy :pointer)
  (video_capture_slot :unsigned-int)
  (device :unsigned-long))

(cl:export '#.(custom-lispify "glXBindVideoCaptureDeviceNV" 'function))

(cffi:defcfun ("glXEnumerateVideoCaptureDevicesNV" #.(custom-lispify "glXEnumerateVideoCaptureDevicesNV" 'function)) :pointer
  (dpy :pointer)
  (screen :int)
  (nelements :pointer))

(cl:export '#.(custom-lispify "glXEnumerateVideoCaptureDevicesNV" 'function))

(cffi:defcfun ("glXLockVideoCaptureDeviceNV" #.(custom-lispify "glXLockVideoCaptureDeviceNV" 'function)) :void
  (dpy :pointer)
  (device :unsigned-long))

(cl:export '#.(custom-lispify "glXLockVideoCaptureDeviceNV" 'function))

(cffi:defcfun ("glXQueryVideoCaptureDeviceNV" #.(custom-lispify "glXQueryVideoCaptureDeviceNV" 'function)) :int
  (dpy :pointer)
  (device :unsigned-long)
  (attribute :int)
  (value :pointer))

(cl:export '#.(custom-lispify "glXQueryVideoCaptureDeviceNV" 'function))

(cffi:defcfun ("glXReleaseVideoCaptureDeviceNV" #.(custom-lispify "glXReleaseVideoCaptureDeviceNV" 'function)) :void
  (dpy :pointer)
  (device :unsigned-long))

(cl:export '#.(custom-lispify "glXReleaseVideoCaptureDeviceNV" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXBINDVIDEOCAPTUREDEVICENVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXBINDVIDEOCAPTUREDEVICENVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC" 'typename))

(cffi:defctype #.(custom-lispify "PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_EXT_swap_control" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_EXT_swap_control" 'constant))

(cffi:defcfun ("glXSwapIntervalEXT" #.(custom-lispify "glXSwapIntervalEXT" 'function)) :void
  (dpy :pointer)
  (drawable :unsigned-long)
  (interval :int))

(cl:export '#.(custom-lispify "glXSwapIntervalEXT" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXSWAPINTERVALEXTPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXSWAPINTERVALEXTPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_NV_copy_image" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_NV_copy_image" 'constant))

(cffi:defcfun ("glXCopyImageSubDataNV" #.(custom-lispify "glXCopyImageSubDataNV" 'function)) :void
  (dpy :pointer)
  (srcCtx :pointer)
  (srcName :pointer)
  (srcTarget :pointer)
  (srcLevel :pointer)
  (srcX :pointer)
  (srcY :pointer)
  (srcZ :pointer)
  (dstCtx :pointer)
  (dstName :pointer)
  (dstTarget :pointer)
  (dstLevel :pointer)
  (dstX :pointer)
  (dstY :pointer)
  (dstZ :pointer)
  (width :pointer)
  (height :pointer)
  (depth :pointer))

(cl:export '#.(custom-lispify "glXCopyImageSubDataNV" 'function))

(cffi:defctype #.(custom-lispify "PFNGLXCOPYIMAGESUBDATANVPROC" 'typename) :pointer)

(cl:export '#.(custom-lispify "PFNGLXCOPYIMAGESUBDATANVPROC" 'typename))

(cl:defconstant #.(custom-lispify "GLX_INTEL_swap_event" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_INTEL_swap_event" 'constant))

(cl:defconstant #.(custom-lispify "GLX_NV_multisample_coverage" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_NV_multisample_coverage" 'constant))

(cl:defconstant #.(custom-lispify "GLX_EXT_swap_control_tear" 'constant) 1)

(cl:export '#.(custom-lispify "GLX_EXT_swap_control_tear" 'constant))


